{"sliceID":696973203919167932,"uses":[{"reference":{"otherSlice":502464163944568234},"usedName":{"valueName":{"identifier":"runSTUArray"}},"qualification":null},{"reference":{"otherSlice":7235567377809295464},"usedName":{"valueName":{"identifier":"length"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"otherSlice":155863841078474221},"usedName":{"valueName":{"identifier":"suffLengths"}},"qualification":null},{"reference":{"otherSlice":5632142578980093812},"usedName":{"valueName":{"identifier":"newArray"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":3191844957948247487},"usedName":{"valueName":{"identifier":"unsafeAt"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":5632142578980093812},"usedName":{"valueName":{"identifier":"unsafeWrite"}},"qualification":null},{"reference":{"otherSlice":4010822550476529195},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"S"},{"reference":{"otherSlice":5288367503661172006},"usedName":{"typeName":{"identifier":"UArray"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null}],"fragment":["suffShifts :: S.ByteString -> UArray Int Int","suffShifts pat\n  = runSTUArray\n      (do let !patLen = S.length pat\n              !patEnd = patLen - 1\n              !suff = suffLengths pat\n          ar <- newArray (0, patEnd) patLen\n          let preShift !idx !j\n                | idx < 0 = return ()\n                | suff `unsafeAt` idx == idx + 1 =\n                  do let !shf = patEnd - idx\n                         fillToShf !i\n                           | i == shf = return ()\n                           | otherwise =\n                             do unsafeWrite ar i shf\n                                fillToShf (i + 1)\n                     fillToShf j\n                     preShift (idx - 1) shf\n                | otherwise = preShift (idx - 1) j\n              sufShift !idx\n                | idx == patEnd = return ar\n                | otherwise =\n                  do unsafeWrite ar (patEnd - unsafeAt suff idx) (patEnd - idx)\n                     sufShift (idx + 1)\n          preShift (patEnd - 1) 0\n          sufShift 0)"],"instances":[],"language":{"extensions":["BangPatterns","FlexibleContexts","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}