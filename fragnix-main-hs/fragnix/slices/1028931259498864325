{"sliceID":1028931259498864325,"uses":[{"reference":{"otherSlice":8818741453000450561},"usedName":{"typeName":{"identifier":"Unbox"}},"qualification":null},{"reference":{"otherSlice":4641953017354057066},"usedName":{"typeName":{"identifier":"MVector"}},"qualification":"M"},{"reference":{"otherSlice":7751570579972356864},"usedName":{"typeName":{"identifier":"MVector"}},"qualification":null},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicLength"}},"qualification":"M"},{"reference":{"otherSlice":7751570579972356864},"usedName":{"constructorName":{"identifier":"MV_6"},"constructorTypeName":{"identifier":"MVector"}},"qualification":null},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicUnsafeSlice"}},"qualification":"M"},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicOverlaps"}},"qualification":"M"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"||"}},"qualification":null},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicUnsafeNew"}},"qualification":"M"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicInitialize"}},"qualification":"M"},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicUnsafeReplicate"}},"qualification":"M"},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicUnsafeRead"}},"qualification":"M"},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicUnsafeWrite"}},"qualification":"M"},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicClear"}},"qualification":"M"},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicSet"}},"qualification":"M"},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicUnsafeCopy"}},"qualification":"M"},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicUnsafeMove"}},"qualification":"M"},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicUnsafeGrow"}},"qualification":"M"},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null}],"fragment":["instance (Unbox a, Unbox b, Unbox c, Unbox d, Unbox e, Unbox f) =>\n         M.MVector MVector (a, b, c, d, e, f)\n         where\n        {-# INLINE basicLength #-}\n        basicLength (MV_6 n_ _ _ _ _ _ _) = n_\n        \n        {-# INLINE basicUnsafeSlice #-}\n        basicUnsafeSlice i_ m_ (MV_6 _ as bs cs ds es fs)\n          = MV_6 m_ (M.basicUnsafeSlice i_ m_ as)\n              (M.basicUnsafeSlice i_ m_ bs)\n              (M.basicUnsafeSlice i_ m_ cs)\n              (M.basicUnsafeSlice i_ m_ ds)\n              (M.basicUnsafeSlice i_ m_ es)\n              (M.basicUnsafeSlice i_ m_ fs)\n        \n        {-# INLINE basicOverlaps #-}\n        basicOverlaps (MV_6 _ as1 bs1 cs1 ds1 es1 fs1)\n          (MV_6 _ as2 bs2 cs2 ds2 es2 fs2)\n          = M.basicOverlaps as1 as2 ||\n              M.basicOverlaps bs1 bs2 ||\n                M.basicOverlaps cs1 cs2 ||\n                  M.basicOverlaps ds1 ds2 ||\n                    M.basicOverlaps es1 es2 || M.basicOverlaps fs1 fs2\n        \n        {-# INLINE basicUnsafeNew #-}\n        basicUnsafeNew n_\n          = do as <- M.basicUnsafeNew n_\n               bs <- M.basicUnsafeNew n_\n               cs <- M.basicUnsafeNew n_\n               ds <- M.basicUnsafeNew n_\n               es <- M.basicUnsafeNew n_\n               fs <- M.basicUnsafeNew n_\n               return $ MV_6 n_ as bs cs ds es fs\n        \n        {-# INLINE basicInitialize #-}\n        basicInitialize (MV_6 _ as bs cs ds es fs)\n          = do M.basicInitialize as\n               M.basicInitialize bs\n               M.basicInitialize cs\n               M.basicInitialize ds\n               M.basicInitialize es\n               M.basicInitialize fs\n        \n        {-# INLINE basicUnsafeReplicate #-}\n        basicUnsafeReplicate n_ (a, b, c, d, e, f)\n          = do as <- M.basicUnsafeReplicate n_ a\n               bs <- M.basicUnsafeReplicate n_ b\n               cs <- M.basicUnsafeReplicate n_ c\n               ds <- M.basicUnsafeReplicate n_ d\n               es <- M.basicUnsafeReplicate n_ e\n               fs <- M.basicUnsafeReplicate n_ f\n               return $ MV_6 n_ as bs cs ds es fs\n        \n        {-# INLINE basicUnsafeRead #-}\n        basicUnsafeRead (MV_6 _ as bs cs ds es fs) i_\n          = do a <- M.basicUnsafeRead as i_\n               b <- M.basicUnsafeRead bs i_\n               c <- M.basicUnsafeRead cs i_\n               d <- M.basicUnsafeRead ds i_\n               e <- M.basicUnsafeRead es i_\n               f <- M.basicUnsafeRead fs i_\n               return (a, b, c, d, e, f)\n        \n        {-# INLINE basicUnsafeWrite #-}\n        basicUnsafeWrite (MV_6 _ as bs cs ds es fs) i_ (a, b, c, d, e, f)\n          = do M.basicUnsafeWrite as i_ a\n               M.basicUnsafeWrite bs i_ b\n               M.basicUnsafeWrite cs i_ c\n               M.basicUnsafeWrite ds i_ d\n               M.basicUnsafeWrite es i_ e\n               M.basicUnsafeWrite fs i_ f\n        \n        {-# INLINE basicClear #-}\n        basicClear (MV_6 _ as bs cs ds es fs)\n          = do M.basicClear as\n               M.basicClear bs\n               M.basicClear cs\n               M.basicClear ds\n               M.basicClear es\n               M.basicClear fs\n        \n        {-# INLINE basicSet #-}\n        basicSet (MV_6 _ as bs cs ds es fs) (a, b, c, d, e, f)\n          = do M.basicSet as a\n               M.basicSet bs b\n               M.basicSet cs c\n               M.basicSet ds d\n               M.basicSet es e\n               M.basicSet fs f\n        \n        {-# INLINE basicUnsafeCopy #-}\n        basicUnsafeCopy (MV_6 _ as1 bs1 cs1 ds1 es1 fs1)\n          (MV_6 _ as2 bs2 cs2 ds2 es2 fs2)\n          = do M.basicUnsafeCopy as1 as2\n               M.basicUnsafeCopy bs1 bs2\n               M.basicUnsafeCopy cs1 cs2\n               M.basicUnsafeCopy ds1 ds2\n               M.basicUnsafeCopy es1 es2\n               M.basicUnsafeCopy fs1 fs2\n        \n        {-# INLINE basicUnsafeMove #-}\n        basicUnsafeMove (MV_6 _ as1 bs1 cs1 ds1 es1 fs1)\n          (MV_6 _ as2 bs2 cs2 ds2 es2 fs2)\n          = do M.basicUnsafeMove as1 as2\n               M.basicUnsafeMove bs1 bs2\n               M.basicUnsafeMove cs1 cs2\n               M.basicUnsafeMove ds1 ds2\n               M.basicUnsafeMove es1 es2\n               M.basicUnsafeMove fs1 fs2\n        \n        {-# INLINE basicUnsafeGrow #-}\n        basicUnsafeGrow (MV_6 n_ as bs cs ds es fs) m_\n          = do as' <- M.basicUnsafeGrow as m_\n               bs' <- M.basicUnsafeGrow bs m_\n               cs' <- M.basicUnsafeGrow cs m_\n               ds' <- M.basicUnsafeGrow ds m_\n               es' <- M.basicUnsafeGrow es m_\n               fs' <- M.basicUnsafeGrow fs m_\n               return $ MV_6 (m_ + n_) as' bs' cs' ds' es' fs'"],"instances":[],"language":{"extensions":["BangPatterns","MultiParamTypeClasses","TypeFamilies","FlexibleContexts","DeriveDataTypeable","StandaloneDeriving","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":true}}