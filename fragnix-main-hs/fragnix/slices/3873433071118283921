{"sliceID":3873433071118283921,"uses":[{"reference":{"builtinModule":"Data.Monoid"},"usedName":{"valueName":{"identifier":"mconcat"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"otherSlice":9091181793480111601},"usedName":{"valueName":{"identifier":"toChunks"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fmap"}},"qualification":null},{"reference":{"otherSlice":4909721930055518836},"usedName":{"valueName":{"identifier":"lazyRequestBody"}},"qualification":null},{"reference":{"builtinModule":"GHC.IORef"},"usedName":{"valueName":{"identifier":"newIORef"}},"qualification":null},{"reference":{"builtinModule":"Data.IORef"},"usedName":{"valueName":{"identifier":"atomicModifyIORef"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"Data.Monoid"},"usedName":{"valueName":{"identifier":"mempty"}},"qualification":null},{"reference":{"otherSlice":5362669780704885461},"usedName":{"valueName":{"identifier":"parseQuery"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":30758760526534613},"usedName":{"valueName":{"identifier":"requestBody"}},"qualification":null},{"reference":{"otherSlice":30758760526534613},"usedName":{"valueName":{"identifier":"requestMethod"}},"qualification":null},{"reference":{"otherSlice":30758760526534613},"usedName":{"typeName":{"identifier":"Request"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null}],"fragment":["setPost :: Request -> IO Request","setPost req\n  = do body <- (mconcat . toChunks) `fmap` lazyRequestBody req\n       ref <- newIORef body\n       let rb = atomicModifyIORef ref $ \\ bs -> (mempty, bs)\n       case parseQuery body of\n           ((\"_method\", Just newmethod) : _) -> return $\n                                                  req{requestBody = rb, requestMethod = newmethod}\n           _ -> return $ req{requestBody = rb}"],"instances":[],"language":{"extensions":["OverloadedStrings","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}