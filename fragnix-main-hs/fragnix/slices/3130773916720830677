{"sliceID":3130773916720830677,"uses":[{"reference":{"otherSlice":5777670077893585016},"usedName":{"valueName":{"identifier":"runSTUArray"}},"qualification":null},{"reference":{"otherSlice":6258463563638113276},"usedName":{"valueName":{"identifier":"length"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"builtinModule":"GHC.Word"},"usedName":{"typeName":{"identifier":"Word8"}},"qualification":null},{"reference":{"otherSlice":7420251549451097395},"usedName":{"valueName":{"identifier":"unsafeIndex"}},"qualification":null},{"reference":{"otherSlice":456988961920531281},"usedName":{"valueName":{"identifier":"newArray_"}},"qualification":null},{"reference":{"otherSlice":456988961920531281},"usedName":{"valueName":{"identifier":"unsafeWrite"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"||"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"Prelude"},"usedName":{"valueName":{"operator":"$!"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":456988961920531281},"usedName":{"valueName":{"identifier":"unsafeRead"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":">>="}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"otherSlice":8642306666063513779},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"S"},{"reference":{"otherSlice":2280363620672729624},"usedName":{"typeName":{"identifier":"UArray"}},"qualification":null}],"fragment":["kmpBorders :: S.ByteString -> UArray Int Int","kmpBorders pat\n  = runSTUArray\n      (do let !patLen = S.length pat\n              {-# INLINE patAt #-}\n              patAt :: Int -> Word8\n              patAt i = unsafeIndex pat i\n          ar <- newArray_ (0, patLen)\n          unsafeWrite ar 0 (-1)\n          let dec w j\n                | j < 0 || w == patAt j = return $! j + 1\n                | otherwise = unsafeRead ar j >>= dec w\n              bordLoop !i !j\n                | patLen < i = return ar\n                | otherwise =\n                  do let !w = patAt (i - 1)\n                     j' <- dec w j\n                     if i < patLen && patAt j' == patAt i then\n                       unsafeRead ar j' >>= unsafeWrite ar i else unsafeWrite ar i j'\n                     bordLoop (i + 1) j'\n          bordLoop 1 (-1))"],"instances":[],"language":{"extensions":["BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}