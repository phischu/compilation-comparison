{"sliceID":3211398313704198259,"uses":[{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"quotRem"}},"qualification":null},{"reference":{"otherSlice":2274392730806926570},"usedName":{"valueName":{"identifier":"countDigits"}},"qualification":null},{"reference":{"otherSlice":2729732164920485093},"usedName":{"valueName":{"identifier":"writeN"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":7073776594548819763},"usedName":{"valueName":{"identifier":"unsafeWrite"}},"qualification":null},{"reference":{"otherSlice":741508977784105651},"usedName":{"valueName":{"identifier":"minus"}},"qualification":null},{"reference":{"otherSlice":2759002976945847026},"usedName":{"valueName":{"identifier":"posDecimal"}},"qualification":null},{"reference":{"otherSlice":3341270591666349719},"usedName":{"valueName":{"identifier":"i2w"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":">>"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":4610087236446441780},"usedName":{"valueName":{"identifier":"positive"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"typeName":{"identifier":"Integral"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":3645198897320373969},"usedName":{"typeName":{"identifier":"Builder"}},"qualification":null}],"fragment":["decimal' :: (Integral a) => (a -> Bool) -> a -> Builder","decimal' p i\n  | i < 0 =\n    if p i then\n      let (q, r) = i `quotRem` 10\n          qq = -q\n          !n = countDigits qq\n        in\n        writeN (n + 2) $\n          \\ marr off ->\n            do unsafeWrite marr off minus\n               posDecimal marr (off + 1) n qq\n               unsafeWrite marr (off + n + 1) (i2w (-r))\n      else\n      let j = -i\n          !n = countDigits j\n        in\n        writeN (n + 1) $\n          \\ marr off ->\n            unsafeWrite marr off minus >> posDecimal marr (off + 1) n j\n  | otherwise = positive i"],"instances":[],"language":{"extensions":["BangPatterns","MagicHash","RankNTypes","ScopedTypeVariables","UnboxedTuples","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}