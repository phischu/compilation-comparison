{"sliceID":3599991497318271751,"uses":[{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"error"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"++"}},"qualification":null},{"reference":{"otherSlice":5300934711519751499},"usedName":{"valueName":{"identifier":"newNameList"}},"qualification":null},{"reference":{"otherSlice":4299504902901625159},"usedName":{"valueName":{"identifier":"arityInt"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"zip"}},"qualification":null},{"reference":{"otherSlice":163784499293869512},"usedName":{"valueName":{"identifier":"interleave"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"map"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"not"}},"qualification":null},{"reference":{"otherSlice":4512247588159674237},"usedName":{"valueName":{"identifier":"tagSingleConstructors"}},"qualification":null},{"reference":{"otherSlice":8610237756049066640},"usedName":{"valueName":{"identifier":"parseArgs"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Right"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":4512247588159674237},"usedName":{"valueName":{"identifier":"sumEncoding"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":2490827399793063090},"usedName":{"constructorName":{"identifier":"UntaggedValue"},"constructorTypeName":{"identifier":"SumEncoding"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":4512247588159674237},"usedName":{"valueName":{"identifier":"allNullaryToStringTag"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"all"}},"qualification":null},{"reference":{"otherSlice":8927103275629205274},"usedName":{"valueName":{"identifier":"isNullary"}},"qualification":null},{"reference":{"otherSlice":8838403415977070196},"usedName":{"constructorName":{"identifier":"String"},"constructorTypeName":{"identifier":"Value"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"liftM2"}},"qualification":null},{"reference":{"otherSlice":5420555374589246121},"usedName":{"valueName":{"identifier":"pack"}},"qualification":"T"},{"reference":{"otherSlice":2628840501397236324},"usedName":{"valueName":{"identifier":"conStringE"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"pure"}},"qualification":null},{"reference":{"otherSlice":8681288739400273612},"usedName":{"valueName":{"identifier":"getConName"}},"qualification":null},{"reference":{"otherSlice":7349205497060788690},"usedName":{"valueName":{"identifier":"noMatchFail"}},"qualification":null},{"reference":{"builtinModule":"GHC.Show"},"usedName":{"valueName":{"identifier":"show"}},"qualification":null},{"reference":{"otherSlice":2018106939656672438},"usedName":{"valueName":{"identifier":"unpack"}},"qualification":"T"},{"reference":{"otherSlice":6311416403947567638},"usedName":{"valueName":{"identifier":"noStringFail"}},"qualification":null},{"reference":{"otherSlice":8525771962104289961},"usedName":{"valueName":{"identifier":"valueConName"}},"qualification":null},{"reference":{"otherSlice":2490827399793063090},"usedName":{"constructorName":{"identifier":"TaggedObject"},"constructorTypeName":{"identifier":"SumEncoding"}},"qualification":null},{"reference":{"otherSlice":2490827399793063090},"usedName":{"valueName":{"identifier":"tagFieldName"}},"qualification":null},{"reference":{"otherSlice":2490827399793063090},"usedName":{"valueName":{"identifier":"contentsFieldName"}},"qualification":null},{"reference":{"otherSlice":2490827399793063090},"usedName":{"constructorName":{"identifier":"ObjectWithSingleField"},"constructorTypeName":{"identifier":"SumEncoding"}},"qualification":null},{"reference":{"otherSlice":2490827399793063090},"usedName":{"constructorName":{"identifier":"TwoElemArray"},"constructorTypeName":{"identifier":"SumEncoding"}},"qualification":null},{"reference":{"otherSlice":8838403415977070196},"usedName":{"constructorName":{"identifier":"Array"},"constructorTypeName":{"identifier":"Value"}},"qualification":null},{"reference":{"otherSlice":1445728727869881280},"usedName":{"valueName":{"identifier":"length"}},"qualification":"V"},{"reference":{"otherSlice":3967677939176273841},"usedName":{"valueName":{"identifier":"not2ElemArray"}},"qualification":null},{"reference":{"otherSlice":5539332488295685126},"usedName":{"valueName":{"identifier":"noArrayFail"}},"qualification":null},{"reference":{"otherSlice":8838403415977070196},"usedName":{"constructorName":{"identifier":"Object"},"constructorTypeName":{"identifier":"Value"}},"qualification":null},{"reference":{"otherSlice":3903820216845603358},"usedName":{"valueName":{"identifier":"noObjectFail"}},"qualification":null},{"reference":{"otherSlice":8939587507542956236},"usedName":{"valueName":{"operator":".:"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Left"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":6850655913240416547},"usedName":{"valueName":{"identifier":"conNotFoundFailTaggedObject"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"foldr1"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"<|>"}},"qualification":null},{"reference":{"otherSlice":5879732638212515577},"usedName":{"valueName":{"identifier":"matchFailed"}},"qualification":null},{"reference":{"otherSlice":5765157542023981113},"usedName":{"valueName":{"identifier":"unsafeIndex"}},"qualification":"V"},{"reference":{"otherSlice":3072214743258157764},"usedName":{"valueName":{"identifier":"conNotFoundFail2ElemArray"}},"qualification":null},{"reference":{"otherSlice":8918080513609086169},"usedName":{"valueName":{"identifier":"firstElemNoStringFail"}},"qualification":null},{"reference":{"otherSlice":2735546179891708078},"usedName":{"valueName":{"identifier":"toList"}},"qualification":"H"},{"reference":{"otherSlice":5454112156799993091},"usedName":{"valueName":{"identifier":"conNotFoundFailObjectSingleField"}},"qualification":null},{"reference":{"otherSlice":3299779631130537768},"usedName":{"valueName":{"identifier":"wrongPairCountFail"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"length"}},"qualification":null},{"reference":{"otherSlice":9091878617409638129},"usedName":{"valueName":{"identifier":"conNameExp"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":4512247588159674237},"usedName":{"valueName":{"identifier":"constructorTagModifier"}},"qualification":null},{"reference":{"otherSlice":3790782889836978137},"usedName":{"typeName":{"identifier":"JSONClass"}},"qualification":null},{"reference":{"otherSlice":4512247588159674237},"usedName":{"typeName":{"identifier":"Options"}},"qualification":null}],"fragment":["consFromJSON :: JSONClass -> Name -> Options -> [Con] -> Q Exp","consFromJSON _ _ _ []\n  = error $\n      \"Data.Aeson.TH.consFromJSON: \" ++ \"Not a single constructor given!\"\nconsFromJSON jc tName opts cons\n  = do value <- newName \"value\"\n       pjs <- newNameList \"_pj\" $ arityInt jc\n       pjls <- newNameList \"_pjl\" $ arityInt jc\n       let zippedPJs = zip pjs pjls\n           interleavedPJs = interleave pjs pjls\n       lamE (map varP $ interleavedPJs ++ [value]) $\n         lamExpr value zippedPJs\n  where lamExpr value pjs\n          = case cons of\n                [con] | not (tagSingleConstructors opts) ->\n                        parseArgs jc pjs tName opts con (Right value)\n                _ | sumEncoding opts == UntaggedValue ->\n                    parseUntaggedValue pjs cons value\n                  | otherwise ->\n                    caseE (varE value) $\n                      if allNullaryToStringTag opts && all isNullary cons then\n                        allNullaryMatches else mixedMatches pjs\n        allNullaryMatches\n          = [do txt <- newName \"txt\"\n                match (conP 'String [varP txt])\n                  (guardedB $\n                     [liftM2 (,)\n                        (normalG $\n                           infixApp (varE txt) [| (==) |]\n                             ([| T.pack |] `appE` conStringE opts conName))\n                        ([| pure |] `appE` conE conName)\n                      | con <- cons, let conName = getConName con]\n                       ++\n                       [liftM2 (,) (normalG [| otherwise |])\n                          ([| noMatchFail |] `appE` litE (stringL $ show tName) `appE`\n                             ([| T.unpack |] `appE` varE txt))])\n                  [],\n             do other <- newName \"other\"\n                match (varP other)\n                  (normalB $\n                     [| noStringFail |] `appE` litE (stringL $ show tName) `appE`\n                       ([| valueConName |] `appE` varE other))\n                  []]\n        mixedMatches pjs\n          = case sumEncoding opts of\n                TaggedObject{tagFieldName, contentsFieldName} -> parseObject $\n                                                                   parseTaggedObject pjs\n                                                                     tagFieldName\n                                                                     contentsFieldName\n                UntaggedValue -> error \"UntaggedValue: Should be handled already\"\n                ObjectWithSingleField -> parseObject $\n                                           parseObjectWithSingleField pjs\n                TwoElemArray -> [do arr <- newName \"array\"\n                                    match (conP 'Array [varP arr])\n                                      (guardedB\n                                         [liftM2 (,)\n                                            (normalG $\n                                               infixApp ([| V.length |] `appE` varE arr) [| (==) |]\n                                                 (litE $ integerL 2))\n                                            (parse2ElemArray pjs arr),\n                                          liftM2 (,) (normalG [| otherwise |])\n                                            ([| not2ElemArray |] `appE` litE (stringL $ show tName)\n                                               `appE` ([| V.length |] `appE` varE arr))])\n                                      [],\n                                 do other <- newName \"other\"\n                                    match (varP other)\n                                      (normalB $\n                                         [| noArrayFail |] `appE` litE (stringL $ show tName) `appE`\n                                           ([| valueConName |] `appE` varE other))\n                                      []]\n        parseObject f\n          = [do obj <- newName \"obj\"\n                match (conP 'Object [varP obj]) (normalB $ f obj) [],\n             do other <- newName \"other\"\n                match (varP other)\n                  (normalB $\n                     [| noObjectFail |] `appE` litE (stringL $ show tName) `appE`\n                       ([| valueConName |] `appE` varE other))\n                  []]\n        parseTaggedObject pjs typFieldName valFieldName obj\n          = do conKey <- newName \"conKey\"\n               doE\n                 [bindS (varP conKey)\n                    (infixApp (varE obj) [| (.:) |]\n                       ([| T.pack |] `appE` stringE typFieldName)),\n                  noBindS $\n                    parseContents pjs conKey (Left (valFieldName, obj))\n                      'conNotFoundFailTaggedObject]\n        parseUntaggedValue pjs cons' conVal\n          = foldr1 (\\ e e' -> infixApp e [| (<|>) |] e')\n              (map (\\ x -> parseValue pjs x conVal) cons')\n        parseValue _pjs (NormalC conName []) conVal\n          = do str <- newName \"str\"\n               caseE (varE conVal)\n                 [match (conP 'String [varP str])\n                    (guardedB\n                       [liftM2 (,)\n                          (normalG $\n                             infixApp (varE str) [| (==) |]\n                               ([| T.pack |] `appE` conStringE opts conName))\n                          ([| pure |] `appE` conE conName)])\n                    [],\n                  matchFailed tName conName \"String\"]\n        parseValue pjs con conVal\n          = parseArgs jc pjs tName opts con (Right conVal)\n        parse2ElemArray pjs arr\n          = do conKey <- newName \"conKey\"\n               conVal <- newName \"conVal\"\n               let letIx n ix\n                     = valD (varP n)\n                         (normalB\n                            ([| V.unsafeIndex |] `appE` varE arr `appE` litE (integerL ix)))\n                         []\n               letE [letIx conKey 0, letIx conVal 1]\n                 (caseE (varE conKey)\n                    [do txt <- newName \"txt\"\n                        match (conP 'String [varP txt])\n                          (normalB $\n                             parseContents pjs txt (Right conVal) 'conNotFoundFail2ElemArray)\n                          [],\n                     do other <- newName \"other\"\n                        match (varP other)\n                          (normalB $\n                             [| firstElemNoStringFail |] `appE` litE (stringL $ show tName)\n                               `appE` ([| valueConName |] `appE` varE other))\n                          []])\n        parseObjectWithSingleField pjs obj\n          = do conKey <- newName \"conKey\"\n               conVal <- newName \"conVal\"\n               caseE ([| H.toList |] `appE` varE obj)\n                 [match (listP [tupP [varP conKey, varP conVal]])\n                    (normalB $\n                       parseContents pjs conKey (Right conVal)\n                         'conNotFoundFailObjectSingleField)\n                    [],\n                  do other <- newName \"other\"\n                     match (varP other)\n                       (normalB $\n                          [| wrongPairCountFail |] `appE` litE (stringL $ show tName) `appE`\n                            ([| show . length |] `appE` varE other))\n                       []]\n        parseContents pjs conKey contents errorFun\n          = caseE (varE conKey)\n              [match wildP\n                 (guardedB $\n                    [do g <- normalG $\n                               infixApp (varE conKey) [| (==) |]\n                                 ([| T.pack |] `appE` conNameExp opts con)\n                        e <- parseArgs jc pjs tName opts con contents\n                        return (g, e)\n                     | con <- cons]\n                      ++\n                      [liftM2 (,) (normalG [| otherwise |])\n                         (varE errorFun `appE` litE (stringL $ show tName) `appE`\n                            listE\n                              (map\n                                 (litE .\n                                    stringL . constructorTagModifier opts . nameBase . getConName)\n                                 cons)\n                            `appE` ([| T.unpack |] `appE` varE conKey))])\n                 []]"],"instances":[],"language":{"extensions":["BangPatterns","FlexibleInstances","NamedFieldPuns","NoImplicitPrelude","UndecidableInstances","TemplateHaskellQuotes","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards","TemplateHaskell"],"isInstance":false}}