{"sliceID":4140461930772351125,"uses":[{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"error"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"++"}},"qualification":null},{"reference":{"builtinModule":"GHC.Show"},"usedName":{"valueName":{"identifier":"show"}},"qualification":null}],"fragment":["withType :: Name -> ([TyVarBndr] -> [Con] -> Q a) -> Q a","withType name f\n  = do info <- reify name\n       case info of\n           TyConI dec -> case dec of\n                             DataD _ _ tvbs cons _ -> f tvbs cons\n                             NewtypeD _ _ tvbs con _ -> f tvbs [con]\n                             other -> error $\n                                        \"Data.Aeson.TH.withType: Unsupported type: \" ++ show other\n           _ -> error \"Data.Aeson.TH.withType: I need the name of a type.\""],"instances":[],"language":{"extensions":["FlexibleInstances","IncoherentInstances","NamedFieldPuns","NoImplicitPrelude","OverlappingInstances","TemplateHaskell","UndecidableInstances","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}