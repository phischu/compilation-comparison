{"sliceID":5473192748579496556,"uses":[{"reference":{"otherSlice":675696118971413715},"usedName":{"valueName":{"identifier":"null"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":3837783939365562731},"usedName":{"valueName":{"identifier":"unsafeHead"}},"qualification":null},{"reference":{"otherSlice":2291042143385708565},"usedName":{"valueName":{"identifier":"unsafeTail"}},"qualification":"B"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":">>="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":4261797841410981906},"usedName":{"valueName":{"identifier":"unsafeHead"}},"qualification":"B"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">="}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<="}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"builtinModule":"GHC.Integer"},"usedName":{"typeName":{"identifier":"Integer"}},"qualification":null},{"reference":{"otherSlice":8642306666063513779},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":null},{"reference":{"builtinModule":"GHC.Prim"},"usedName":{"valueName":{"identifier":"seq"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"False"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"undefined"}},"qualification":null},{"reference":{"otherSlice":2109377013281436257},"usedName":{"valueName":{"identifier":"empty"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"toInteger"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"*"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"operator":"^"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null}],"fragment":["readInteger :: ByteString -> Maybe (Integer, ByteString)","readInteger as\n  | null as = Nothing\n  | otherwise =\n    case unsafeHead as of\n        '-' -> first (B.unsafeTail as) >>= \\ (n, bs) -> return (-n, bs)\n        '+' -> first (B.unsafeTail as)\n        _ -> first as\n  where first ps\n          | null ps = Nothing\n          | otherwise =\n            case B.unsafeHead ps of\n                w | w >= 48 && w <= 57 ->\n                    Just $ loop 1 (fromIntegral w - 48) [] (B.unsafeTail ps)\n                  | otherwise -> Nothing\n        \n        loop ::\n             Int -> Int -> [Integer] -> ByteString -> (Integer, ByteString)\n        loop a b c d | a `seq` b `seq` c `seq` d `seq` False = undefined\n        loop d acc ns ps\n          | null ps = combine d acc ns empty\n          | otherwise =\n            case B.unsafeHead ps of\n                w | w >= 48 && w <= 57 ->\n                    if d == 9 then\n                      loop 1 (fromIntegral w - 48) (toInteger acc : ns) (B.unsafeTail ps)\n                      else\n                      loop (d + 1) (10 * acc + (fromIntegral w - 48)) ns\n                        (B.unsafeTail ps)\n                  | otherwise -> combine d acc ns ps\n        combine _ acc [] ps = (toInteger acc, ps)\n        combine d acc ns ps\n          = ((10 ^ d * combine1 1000000000 ns + toInteger acc), ps)\n        combine1 _ [n] = n\n        combine1 b ns = combine1 (b * b) $ combine2 b ns\n        combine2 b (n : (m : ns))\n          = let t = m * b + n in t `seq` (t : combine2 b ns)\n        combine2 _ ns = ns"],"instances":[],"language":{"extensions":["MagicHash","UnboxedTuples","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}