{"sliceID":7059578874204518406,"uses":[{"reference":{"builtinModule":"Data.Data"},"usedName":{"typeName":{"identifier":"Data"}},"qualification":null},{"reference":{"otherSlice":7170945053634004430},"usedName":{"typeName":{"identifier":"Natural"}},"qualification":null},{"reference":{"builtinModule":"Data.Data"},"usedName":{"valueName":{"identifier":"toConstr"}},"qualification":null},{"reference":{"builtinModule":"Data.Data"},"usedName":{"valueName":{"identifier":"mkIntegralConstr"}},"qualification":null},{"reference":{"otherSlice":4347965446018580832},"usedName":{"valueName":{"identifier":"naturalType"}},"qualification":null},{"reference":{"builtinModule":"Data.Data"},"usedName":{"valueName":{"identifier":"gunfold"}},"qualification":null},{"reference":{"builtinModule":"Data.Data"},"usedName":{"valueName":{"identifier":"constrRep"}},"qualification":null},{"reference":{"builtinModule":"Data.Data"},"usedName":{"constructorName":{"identifier":"IntConstr"},"constructorTypeName":{"identifier":"ConstrRep"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"error"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"++"}},"qualification":null},{"reference":{"builtinModule":"GHC.Show"},"usedName":{"valueName":{"identifier":"show"}},"qualification":null},{"reference":{"builtinModule":"Data.Data"},"usedName":{"valueName":{"identifier":"dataTypeOf"}},"qualification":null}],"fragment":["instance Data Natural where\n        toConstr x = mkIntegralConstr naturalType x\n        gunfold _ z c\n          = case constrRep c of\n                (IntConstr x) -> z (fromIntegral x)\n                _ -> error $\n                       \"Data.Data.gunfold: Constructor \" ++\n                         show c ++ \" is not of type Natural\"\n        dataTypeOf _ = naturalType"],"instances":[],"language":{"extensions":["DeriveDataTypeable","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":true}}