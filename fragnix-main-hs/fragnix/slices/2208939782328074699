{"sliceID":2208939782328074699,"uses":[{"reference":{"otherSlice":8184865101111560075},"usedName":{"constructorName":{"identifier":"Parser"},"constructorTypeName":{"identifier":"Parser"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"otherSlice":122679094463524885},"usedName":{"valueName":{"identifier":"atBufferEnd"}},"qualification":null},{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"undefined"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"True"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":6973050610896521593},"usedName":{"constructorName":{"identifier":"Complete"},"constructorTypeName":{"identifier":"More"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"False"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":6585257321125035627},"usedName":{"valueName":{"identifier":"prompt"}},"qualification":null},{"reference":{"otherSlice":122679094463524885},"usedName":{"typeName":{"identifier":"Chunk"}},"qualification":null},{"reference":{"otherSlice":8184865101111560075},"usedName":{"typeName":{"identifier":"Parser"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null}],"fragment":["wantInput :: forall t . Chunk t => Parser t Bool","wantInput\n  = Parser $\n      \\ t pos more _lose succ ->\n        case () of\n            _ | pos < atBufferEnd (undefined :: t) t -> succ t pos more True\n              | more == Complete -> succ t pos more False\n              | otherwise ->\n                let lose' t' pos' more' = succ t' pos' more' False\n                    succ' t' pos' more' = succ t' pos' more' True\n                  in prompt t pos more lose' succ'"],"instances":[],"language":{"extensions":["BangPatterns","ScopedTypeVariables","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}