{"sliceID":3072291048867262365,"uses":[{"reference":{"otherSlice":2848038291749161027},"usedName":{"valueName":{"identifier":"revNat"}},"qualification":null},{"reference":{"builtinModule":"GHC.Prim"},"usedName":{"valueName":{"identifier":"seq"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"False"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"undefined"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":3865767339257544497},"usedName":{"valueName":{"identifier":"lowestBitMask"}},"qualification":null},{"reference":{"otherSlice":1005969937360791471},"usedName":{"valueName":{"identifier":"indexOfTheOnlyBit"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"identifier":"xor"}},"qualification":null},{"reference":{"builtinModule":"Prelude"},"usedName":{"valueName":{"operator":"$!"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"otherSlice":7042935054989464289},"usedName":{"typeName":{"identifier":"Nat"}},"qualification":null}],"fragment":["foldr'Bits :: Int -> (Int -> a -> a) -> a -> Nat -> a","foldr'Bits prefix f z bitmap = go (revNat bitmap) z\n  where go _ arg | arg `seq` False = undefined\n        go bm acc\n          | bm == 0 = acc\n          | otherwise =\n            case lowestBitMask bm of\n                bitmask -> bitmask `seq`\n                             case indexOfTheOnlyBit bitmask of\n                                 bi -> bi `seq`\n                                         go (bm `xor` bitmask) ((f $! (prefix + (64 - 1) - bi)) acc)"],"instances":[],"language":{"extensions":["MagicHash","BangPatterns","DeriveDataTypeable","StandaloneDeriving","TypeFamilies","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}