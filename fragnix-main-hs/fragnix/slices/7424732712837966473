{"sliceID":7424732712837966473,"uses":[{"reference":{"otherSlice":675696118971413715},"usedName":{"valueName":{"identifier":"null"}},"qualification":"S"},{"reference":{"otherSlice":6084955845854900422},"usedName":{"valueName":{"identifier":"prependCycle"}},"qualification":null},{"reference":{"otherSlice":6258463563638113276},"usedName":{"valueName":{"identifier":"length"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":3110453240036143100},"usedName":{"valueName":{"identifier":"lazyBreak"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"null"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"++"}},"qualification":null},{"reference":{"otherSlice":1601910010673324444},"usedName":{"valueName":{"identifier":"ldrop"}},"qualification":null},{"reference":{"otherSlice":6084955845854900422},"usedName":{"valueName":{"identifier":"substitution"}},"qualification":null},{"reference":{"otherSlice":7483143390726870398},"usedName":{"valueName":{"identifier":"fromChunks"}},"qualification":"L"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"otherSlice":9091181793480111601},"usedName":{"valueName":{"identifier":"toChunks"}},"qualification":"L"},{"reference":{"otherSlice":2771162775458819576},"usedName":{"valueName":{"identifier":"lazyRepl"}},"qualification":null},{"reference":{"otherSlice":6084955845854900422},"usedName":{"typeName":{"identifier":"Substitution"}},"qualification":null},{"reference":{"otherSlice":8642306666063513779},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"S"},{"reference":{"otherSlice":1699226608098321587},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"L"}],"fragment":["replaceAllL ::\n              Substitution rep =>\n              S.ByteString -> rep -> L.ByteString -> L.ByteString","replaceAllL pat\n  | S.null pat = \\ sub -> prependCycle sub\n  | S.length pat == 1 =\n    let breaker = lazyBreak pat\n        repl subst strs\n          | null strs = []\n          | otherwise =\n            case breaker strs of\n                (pre, mtch) -> pre ++\n                                 case mtch of\n                                     [] -> []\n                                     _ -> subst (repl subst (ldrop 1 mtch))\n      in\n      \\ sub ->\n        let repl1 = repl (substitution sub) in\n          L.fromChunks . repl1 . L.toChunks\n  | otherwise =\n    let repl = lazyRepl pat in\n      \\ sub ->\n        let repl1 = repl (substitution sub) in\n          L.fromChunks . repl1 . L.toChunks"],"instances":[],"language":{"extensions":["BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}