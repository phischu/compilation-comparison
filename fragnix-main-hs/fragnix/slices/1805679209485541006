{"sliceID":1805679209485541006,"uses":[{"reference":{"otherSlice":2921449568316915535},"usedName":{"typeName":{"identifier":"Parser"}},"qualification":null},{"reference":{"otherSlice":2241541392207318616},"usedName":{"typeName":{"identifier":"Text"}},"qualification":null},{"reference":{"otherSlice":8838403415977070196},"usedName":{"typeName":{"identifier":"Value"}},"qualification":null},{"reference":{"otherSlice":1013433531415570027},"usedName":{"typeName":{"identifier":"HashMap"}},"qualification":"H"},{"reference":{"otherSlice":8387695794661391539},"usedName":{"valueName":{"identifier":"skipSpace"}},"qualification":null},{"reference":{"otherSlice":6400111543258153609},"usedName":{"valueName":{"identifier":"peekWord8'"}},"qualification":"A"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":1602417609265774386},"usedName":{"valueName":{"identifier":"anyWord8"}},"qualification":"A"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":">>"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":3766399563319965728},"usedName":{"valueName":{"identifier":"empty"}},"qualification":"H"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"<*"}},"qualification":null},{"reference":{"otherSlice":2057293102837583483},"usedName":{"valueName":{"identifier":"char"}},"qualification":null},{"reference":{"otherSlice":8692510773354154002},"usedName":{"valueName":{"identifier":"satisfy"}},"qualification":"A"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"||"}},"qualification":null},{"reference":{"otherSlice":7601023910208745483},"usedName":{"valueName":{"identifier":"fromList"}},"qualification":"H"}],"fragment":["objectValues ::\n             Parser Text -> Parser Value -> Parser (H.HashMap Text Value)","objectValues str val\n  = do skipSpace\n       w <- A.peekWord8'\n       if w == 125 then A.anyWord8 >> return H.empty else loop []\n  where loop acc\n          = do k <- str <* skipSpace <* char ':'\n               v <- val <* skipSpace\n               ch <- A.satisfy $ \\ w -> w == 44 || w == 125\n               let acc' = (k, v) : acc\n               if ch == 44 then skipSpace >> loop acc' else\n                 return (H.fromList acc')"],"instances":[],"language":{"extensions":["BangPatterns","OverloadedStrings","MagicHash","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}