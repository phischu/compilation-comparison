{"sliceID":8639537974669726083,"uses":[{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"all"}},"qualification":null},{"reference":{"otherSlice":3826719218541102913},"usedName":{"valueName":{"identifier":"isPathSeparator"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"map"}},"qualification":null},{"reference":{"builtinModule":"GHC.Unicode"},"usedName":{"valueName":{"identifier":"toUpper"}},"qualification":null},{"reference":{"otherSlice":8148598980471912459},"usedName":{"valueName":{"identifier":"readDriveShareName"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"drop"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"take"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"++"}},"qualification":null},{"reference":{"otherSlice":2056912757638675108},"usedName":{"valueName":{"identifier":"readDriveLetter"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO"},"usedName":{"typeName":{"identifier":"FilePath"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null}],"fragment":["readDriveUNC :: FilePath -> Maybe (FilePath, FilePath)","readDriveUNC (s1 : (s2 : ('?' : (s3 : xs))))\n  | all isPathSeparator [s1, s2, s3] =\n    case map toUpper xs of\n        ('U' : ('N' : ('C' : (s4 : _)))) | isPathSeparator s4 ->\n                                           let (a, b) = readDriveShareName (drop 4 xs) in\n                                             Just (s1 : s2 : '?' : s3 : take 4 xs ++ a, b)\n        _ -> case readDriveLetter xs of\n                 Just (a, b) -> Just (s1 : s2 : '?' : s3 : a, b)\n                 Nothing -> Nothing\nreadDriveUNC _ = Nothing"],"instances":[],"language":{"extensions":["MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}