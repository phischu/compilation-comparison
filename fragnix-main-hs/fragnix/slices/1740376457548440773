{"sliceID":1740376457548440773,"uses":[{"reference":{"otherSlice":7781639745957293926},"usedName":{"typeName":{"identifier":"Binary"}},"qualification":null},{"reference":{"builtinModule":"GHC.Integer"},"usedName":{"typeName":{"identifier":"Integer"}},"qualification":null},{"reference":{"otherSlice":7781639745957293926},"usedName":{"valueName":{"identifier":"put"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">="}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<="}},"qualification":null},{"reference":{"otherSlice":536621545023243535},"usedName":{"valueName":{"identifier":"putWord8"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"otherSlice":9170554043688892970},"usedName":{"typeName":{"identifier":"SmallInt"}},"qualification":null},{"reference":{"builtinModule":"GHC.Enum"},"usedName":{"valueName":{"identifier":"minBound"}},"qualification":null},{"reference":{"builtinModule":"GHC.Enum"},"usedName":{"valueName":{"identifier":"maxBound"}},"qualification":null},{"reference":{"otherSlice":4264848242915060981},"usedName":{"valueName":{"identifier":"unroll"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"identifier":"abs"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"identifier":"signum"}},"qualification":null},{"reference":{"builtinModule":"GHC.Word"},"usedName":{"typeName":{"identifier":"Word8"}},"qualification":null},{"reference":{"otherSlice":7781639745957293926},"usedName":{"valueName":{"identifier":"get"}},"qualification":null},{"reference":{"otherSlice":2395809604474213102},"usedName":{"typeName":{"identifier":"Get"}},"qualification":null},{"reference":{"builtinModule":"Control.Monad"},"usedName":{"valueName":{"identifier":"liftM"}},"qualification":null},{"reference":{"otherSlice":941523377771757322},"usedName":{"valueName":{"identifier":"roll"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"Prelude"},"usedName":{"valueName":{"operator":"$!"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null}],"fragment":["instance Binary Integer where\n        {-# INLINE put #-}\n        put n\n          | n >= lo && n <= hi =\n            do putWord8 0\n               put (fromIntegral n :: SmallInt)\n          where lo = fromIntegral (minBound :: SmallInt) :: Integer\n                hi = fromIntegral (maxBound :: SmallInt) :: Integer\n        put n\n          = do putWord8 1\n               put sign\n               put (unroll (abs n))\n          where sign = fromIntegral (signum n) :: Word8\n        \n        {-# INLINE get #-}\n        get\n          = do tag <- get :: Get Word8\n               case tag of\n                   0 -> liftM fromIntegral (get :: Get SmallInt)\n                   _ -> do sign <- get\n                           bytes <- get\n                           let v = roll bytes\n                           return $! if sign == (1 :: Word8) then v else -v"],"instances":[],"language":{"extensions":["FlexibleContexts","DefaultSignatures","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":true}}