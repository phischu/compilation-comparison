{"sliceID":3536873682994394457,"uses":[{"reference":{"otherSlice":865262710259065165},"usedName":{"typeName":{"identifier":"FromJSON"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Char"}},"qualification":null},{"reference":{"otherSlice":865262710259065165},"usedName":{"valueName":{"identifier":"parseJSON"}},"qualification":null},{"reference":{"otherSlice":6737437050703029701},"usedName":{"valueName":{"identifier":"withText"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":2612517998323110946},"usedName":{"valueName":{"identifier":"compareLength"}},"qualification":"T"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"EQ"},"constructorTypeName":{"identifier":"Ordering"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"pure"}},"qualification":null},{"reference":{"otherSlice":2685106916174761360},"usedName":{"valueName":{"identifier":"head"}},"qualification":"T"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fail"}},"qualification":null},{"reference":{"otherSlice":865262710259065165},"usedName":{"valueName":{"identifier":"parseJSONList"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"otherSlice":2018106939656672438},"usedName":{"valueName":{"identifier":"unpack"}},"qualification":"T"}],"fragment":["instance FromJSON Char where\n        parseJSON\n          = withText \"Char\" $\n              \\ t ->\n                if T.compareLength t 1 == EQ then pure $ T.head t else\n                  fail \"Expected a string of length 1\"\n        \n        {-# INLINE parseJSON #-}\n        parseJSONList = withText \"String\" $ pure . T.unpack\n        \n        {-# INLINE parseJSONList #-}"],"instances":[],"language":{"extensions":["DataKinds","DefaultSignatures","FlexibleContexts","FlexibleInstances","GADTs","MultiParamTypeClasses","NamedFieldPuns","OverloadedStrings","RecordWildCards","ScopedTypeVariables","TypeOperators","TypeSynonymInstances","UndecidableInstances","ViewPatterns","PolyKinds","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":true}}