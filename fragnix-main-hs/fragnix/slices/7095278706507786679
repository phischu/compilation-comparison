{"sliceID":7095278706507786679,"uses":[{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"False"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":7235567377809295464},"usedName":{"valueName":{"identifier":"length"}},"qualification":"BS"},{"reference":{"otherSlice":5969207038666618599},"usedName":{"valueName":{"identifier":"encode"}},"qualification":"I"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"id"}},"qualification":null},{"reference":{"otherSlice":6584344409427398814},"usedName":{"valueName":{"identifier":"copyByteString"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"True"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"div"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"*"}},"qualification":null},{"reference":{"otherSlice":5577304759969524974},"usedName":{"valueName":{"identifier":"integerLength"}},"qualification":null},{"reference":{"otherSlice":6025023847004262209},"usedName":{"valueName":{"identifier":"wind"}},"qualification":null},{"reference":{"otherSlice":6485600607719668585},"usedName":{"valueName":{"identifier":"encode"}},"qualification":"Huffman"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"identifier":"negate"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":2615105681004092540},"usedName":{"valueName":{"identifier":"setH"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"otherSlice":8374632724376215179},"usedName":{"valueName":{"identifier":"shiftLastN"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":4010822550476529195},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":null},{"reference":{"otherSlice":8748167810724547885},"usedName":{"typeName":{"identifier":"WorkingBuffer"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null}],"fragment":["encodeString :: Bool -> ByteString -> WorkingBuffer -> IO ()","encodeString False bs wbuf\n  = do let !len = BS.length bs\n       I.encode wbuf id 7 len\n       copyByteString wbuf bs\nencodeString True bs wbuf\n  = do let !origLen = BS.length bs\n           !expectedLen = (origLen `div` 10) * 8\n           !expectedIntLen = integerLength expectedLen\n       wind wbuf expectedIntLen\n       len <- Huffman.encode wbuf bs\n       let !intLen = integerLength len\n       if origLen < len then\n         do wind wbuf (negate (expectedIntLen + len))\n            I.encode wbuf id 7 origLen\n            copyByteString wbuf bs\n         else\n         if intLen == expectedIntLen then\n           do wind wbuf (negate (expectedIntLen + len))\n              I.encode wbuf setH 7 len\n              wind wbuf len\n           else\n           do let !gap = intLen - expectedIntLen\n              shiftLastN wbuf gap len\n              wind wbuf (negate (intLen + len))\n              I.encode wbuf setH 7 len\n              wind wbuf len"],"instances":[],"language":{"extensions":["BangPatterns","RecordWildCards","OverloadedStrings","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}