{"sliceID":1088694603430557263,"uses":[{"reference":{"otherSlice":13410505313944458},"usedName":{"constructorName":{"identifier":"Nil"},"constructorTypeName":{"identifier":"IntMap"}},"qualification":null},{"reference":{"otherSlice":8640873662037493813},"usedName":{"constructorName":{"identifier":"Nada"},"constructorTypeName":{"identifier":"Stack"}},"qualification":null},{"reference":{"otherSlice":13410505313944458},"usedName":{"constructorName":{"identifier":"Tip"},"constructorTypeName":{"identifier":"IntMap"}},"qualification":null},{"reference":{"otherSlice":5746297709281868947},"usedName":{"valueName":{"identifier":"branchMask"}},"qualification":null},{"reference":{"otherSlice":879198285250991989},"usedName":{"typeName":{"identifier":"Key"}},"qualification":null},{"reference":{"otherSlice":5312550190697183096},"usedName":{"typeName":{"identifier":"Mask"}},"qualification":null},{"reference":{"otherSlice":6191317532360100524},"usedName":{"typeName":{"identifier":"Prefix"}},"qualification":null},{"reference":{"otherSlice":13410505313944458},"usedName":{"typeName":{"identifier":"IntMap"}},"qualification":null},{"reference":{"otherSlice":8640873662037493813},"usedName":{"typeName":{"identifier":"Stack"}},"qualification":null},{"reference":{"otherSlice":8640873662037493813},"usedName":{"constructorName":{"identifier":"Push"},"constructorTypeName":{"identifier":"Stack"}},"qualification":null},{"reference":{"otherSlice":9137921527376321367},"usedName":{"valueName":{"identifier":"mask"}},"qualification":null},{"reference":{"otherSlice":5445665798090920829},"usedName":{"valueName":{"identifier":"shorter"}},"qualification":null},{"reference":{"otherSlice":13410505313944458},"usedName":{"constructorName":{"identifier":"Bin"},"constructorTypeName":{"identifier":"IntMap"}},"qualification":null},{"reference":{"otherSlice":3388317860341888410},"usedName":{"valueName":{"identifier":"link"}},"qualification":null}],"fragment":["fromDistinctAscList :: [(Key, a)] -> IntMap a","fromDistinctAscList [] = Nil\nfromDistinctAscList (z0 : zs0) = work z0 zs0 Nada\n  where work (kx, !vx) [] stk = finish kx (Tip kx vx) stk\n        work (kx, !vx) (z@(kz, _) : zs) stk\n          = reduce z zs (branchMask kx kz) kx (Tip kx vx) stk\n        \n        reduce ::\n               (Key, a) ->\n                 [(Key, a)] -> Mask -> Prefix -> IntMap a -> Stack a -> IntMap a\n        reduce z zs _ px tx Nada = work z zs (Push px tx Nada)\n        reduce z zs m px tx stk@(Push py ty stk')\n          = let mxy = branchMask px py\n                pxy = mask px mxy\n              in\n              if shorter m mxy then reduce z zs m pxy (Bin pxy mxy ty tx) stk'\n                else work z zs (Push px tx stk)\n        finish _ t Nada = t\n        finish px tx (Push py ty stk) = finish p (link py ty px tx) stk\n          where m = branchMask px py\n                p = mask px m"],"instances":[],"language":{"extensions":["BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}