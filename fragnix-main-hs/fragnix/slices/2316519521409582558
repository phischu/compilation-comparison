{"sliceID":2316519521409582558,"uses":[{"reference":{"otherSlice":7202692338078551997},"usedName":{"valueName":{"identifier":"null"}},"qualification":"S"},{"reference":{"otherSlice":7235567377809295464},"usedName":{"valueName":{"identifier":"length"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"++"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":5746284862407516300},"usedName":{"valueName":{"identifier":"head"}},"qualification":"S"},{"reference":{"otherSlice":4464784005131150161},"usedName":{"valueName":{"identifier":"elemIndices"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"map"}},"qualification":null},{"reference":{"otherSlice":609154278291193738},"usedName":{"valueName":{"identifier":"automaton"}},"qualification":null},{"reference":{"otherSlice":7493882458078027726},"usedName":{"valueName":{"identifier":"unsafeIndex"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":3191844957948247487},"usedName":{"valueName":{"identifier":"unsafeAt"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"identifier":"shiftL"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":4010822550476529195},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Int"},"usedName":{"typeName":{"identifier":"Int64"}},"qualification":null}],"fragment":["lazySearcher :: Bool -> S.ByteString -> [S.ByteString] -> [Int64]","lazySearcher _ !pat\n  | S.null pat =\n    let zgo _ [] = []\n        zgo !prior (!(str : rest))\n          = let !l = S.length str\n                !prior' = prior + fromIntegral l\n              in [prior + fromIntegral i | i <- [1 .. l]] ++ zgo prior' rest\n      in (0 :) . zgo 0\n  | S.length pat == 1 =\n    let !w = S.head pat\n        ixes = S.elemIndices w\n        go _ [] = []\n        go !prior (!(str : rest))\n          = let !prior' = prior + fromIntegral (S.length str) in\n              map ((+ prior) . fromIntegral) (ixes str) ++ go prior' rest\n      in go 0\nlazySearcher !overlap pat = search 0 0\n  where !patLen = S.length pat\n        !auto = automaton pat\n        !p0 = unsafeIndex pat 0\n        !ams = if overlap then patLen else 0\n        search _ _ [] = []\n        search !prior st (!(str : rest)) = match st 0\n          where !strLen = S.length str\n                \n                {-# INLINE strAt #-}\n                \n                strAt :: Int -> Int\n                strAt i = fromIntegral (str `unsafeIndex` i)\n                match 0 !idx\n                  | idx == strLen = search (prior + fromIntegral strLen) 0 rest\n                  | unsafeIndex str idx == p0 = match 1 (idx + 1)\n                  | otherwise = match 0 (idx + 1)\n                match state idx\n                  | idx == strLen = search (prior + fromIntegral strLen) state rest\n                  | otherwise =\n                    let nstate = unsafeAt auto ((state `shiftL` 8) + strAt idx)\n                        !nxtIdx = idx + 1\n                      in\n                      if nstate == patLen then\n                        (prior + fromIntegral (nxtIdx - patLen)) : match ams nxtIdx else\n                        match nstate nxtIdx"],"instances":[],"language":{"extensions":["BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}