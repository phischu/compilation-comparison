{"sliceID":8107794940512611891,"uses":[{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"valueName":{"identifier":"fromMaybe"}},"qualification":null},{"reference":{"otherSlice":2109377013281436257},"usedName":{"valueName":{"identifier":"empty"}},"qualification":"B8"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"lookup"}},"qualification":null},{"reference":{"otherSlice":30758760526534613},"usedName":{"valueName":{"identifier":"requestHeaders"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":8642306666063513779},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"B8"},{"reference":{"otherSlice":8519534216426756697},"usedName":{"valueName":{"identifier":"pack"}},"qualification":"B8"},{"reference":{"otherSlice":2320156228526443373},"usedName":{"valueName":{"identifier":"isInfixOf"}},"qualification":"B8"},{"reference":{"builtinModule":"Control.Monad"},"usedName":{"valueName":{"identifier":"join"}},"qualification":null},{"reference":{"otherSlice":30758760526534613},"usedName":{"valueName":{"identifier":"queryString"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":8071896551731281397},"usedName":{"valueName":{"identifier":"changeVal"}},"qualification":null},{"reference":{"otherSlice":4388261176215324957},"usedName":{"constructorName":{"identifier":"ResponseBuilder"},"constructorTypeName":{"identifier":"Response"}},"qualification":null},{"reference":{"otherSlice":8222831303778711318},"usedName":{"valueName":{"identifier":"responseBuilder"}},"qualification":null},{"reference":{"otherSlice":4506736979529205858},"usedName":{"valueName":{"identifier":"copyByteString"}},"qualification":null},{"reference":{"builtinModule":"Data.Monoid"},"usedName":{"valueName":{"identifier":"mappend"}},"qualification":null},{"reference":{"otherSlice":4764808795772106119},"usedName":{"valueName":{"identifier":"fromChar"}},"qualification":null},{"reference":{"otherSlice":498737198033065716},"usedName":{"valueName":{"identifier":"responseToStream"}},"qualification":null},{"reference":{"otherSlice":7097082463823892789},"usedName":{"valueName":{"identifier":"isPrefixOf"}},"qualification":"S"},{"reference":{"otherSlice":5340415407179471851},"usedName":{"valueName":{"identifier":"responseStream"}},"qualification":null},{"reference":{"otherSlice":3389037324188664509},"usedName":{"typeName":{"identifier":"Middleware"}},"qualification":null}],"fragment":["jsonp :: Middleware","jsonp app env sendResponse\n  = do let accept\n             = fromMaybe B8.empty $ lookup \"Accept\" $ requestHeaders env\n       let callback :: Maybe B8.ByteString\n           callback\n             = if B8.pack \"text/javascript\" `B8.isInfixOf` accept then\n                 join $ lookup \"callback\" $ queryString env else Nothing\n       let env'\n             = case callback of\n                   Nothing -> env\n                   Just _ -> env{requestHeaders =\n                                   changeVal \"Accept\" \"application/json\" $ requestHeaders env}\n       app env' $\n         \\ res ->\n           case callback of\n               Nothing -> sendResponse res\n               Just c -> go c res\n  where go c r@(ResponseBuilder s hs b)\n          = sendResponse $\n              case checkJSON hs of\n                  Nothing -> r\n                  Just hs' -> responseBuilder s hs' $\n                                copyByteString c `mappend` fromChar '(' `mappend` b `mappend`\n                                  fromChar ')'\n        go c r\n          = case checkJSON hs of\n                Just hs' -> addCallback c s hs' wb\n                Nothing -> sendResponse r\n          where (s, hs, wb) = responseToStream r\n        checkJSON hs\n          = case lookup \"Content-Type\" hs of\n                Just x | B8.pack \"application/json\" `S.isPrefixOf` x ->\n                         Just $ fixHeaders hs\n                _ -> Nothing\n        fixHeaders = changeVal \"Content-Type\" \"text/javascript\"\n        addCallback cb s hs wb\n          = wb $\n              \\ body ->\n                sendResponse $\n                  responseStream s hs $\n                    \\ sendChunk flush ->\n                      do sendChunk $ copyByteString cb `mappend` fromChar '('\n                         body sendChunk flush\n                         sendChunk $ fromChar ')'"],"instances":[],"language":{"extensions":["OverloadedStrings","RankNTypes","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}