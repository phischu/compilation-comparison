{"sliceID":1300041588392803970,"uses":[{"reference":{"otherSlice":3138718835588144001},"usedName":{"valueName":{"identifier":"getEnvironmentPrim"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"map"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"otherSlice":981362415910470556},"usedName":{"valueName":{"identifier":"break"}},"qualification":"BC"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":6461930014593659351},"usedName":{"valueName":{"identifier":"head"}},"qualification":"BC"},{"reference":{"otherSlice":2562795520282429707},"usedName":{"valueName":{"identifier":"tail"}},"qualification":"B"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"error"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"++"}},"qualification":null},{"reference":{"otherSlice":463867205628501048},"usedName":{"valueName":{"identifier":"unpack"}},"qualification":"BC"},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"otherSlice":4010822550476529195},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":null}],"fragment":["getEnvironment :: IO [(ByteString, ByteString)]","getEnvironment\n  = do env <- getEnvironmentPrim\n       return $ map (dropEq . (BC.break ((==) '='))) env\n  where dropEq (x, y)\n          | BC.head y == '=' = (x, B.tail y)\n          | otherwise =\n            error $ \"getEnvironment: insane variable \" ++ BC.unpack x"],"instances":[],"language":{"extensions":["CApiFFI","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}