{"sliceID":2512693884846889600,"uses":[{"reference":{"otherSlice":456988961920531281},"usedName":{"typeName":{"identifier":"MArray"}},"qualification":null},{"reference":{"otherSlice":1133448477937393636},"usedName":{"typeName":{"identifier":"STUArray"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.ST"},"usedName":{"typeName":{"identifier":"ST"}},"qualification":null},{"reference":{"otherSlice":456988961920531281},"usedName":{"valueName":{"identifier":"getBounds"}},"qualification":null},{"reference":{"otherSlice":1133448477937393636},"usedName":{"constructorName":{"identifier":"STUArray"},"constructorTypeName":{"identifier":"STUArray"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":456988961920531281},"usedName":{"valueName":{"identifier":"getNumElements"}},"qualification":null},{"reference":{"otherSlice":456988961920531281},"usedName":{"valueName":{"identifier":"newArray"}},"qualification":null},{"reference":{"builtinModule":"GHC.ST"},"usedName":{"constructorName":{"identifier":"ST"},"constructorTypeName":{"identifier":"ST"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":3688379431863502467},"usedName":{"valueName":{"identifier":"safeRangeSize"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"I#"},"constructorTypeName":{"identifier":"Int"}},"qualification":null},{"reference":{"builtinModule":"GHC.Prim"},"usedName":{"valueName":{"identifier":"newByteArray#"}},"qualification":null},{"reference":{"otherSlice":5638353505748954909},"usedName":{"valueName":{"identifier":"bOOL_SCALE"}},"qualification":null},{"reference":{"otherSlice":5638353505748954909},"usedName":{"valueName":{"identifier":"bOOL_WORD_SCALE"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"valueName":{"identifier":"isTrue#"}},"qualification":null},{"reference":{"builtinModule":"GHC.Prim"},"usedName":{"valueName":{"operator":"==#"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Prim"},"usedName":{"valueName":{"identifier":"writeWordArray#"}},"qualification":null},{"reference":{"builtinModule":"GHC.Prim"},"usedName":{"valueName":{"operator":"+#"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"W#"},"constructorTypeName":{"identifier":"Word"}},"qualification":null},{"reference":{"builtinModule":"GHC.Enum"},"usedName":{"valueName":{"identifier":"maxBound"}},"qualification":null},{"reference":{"otherSlice":456988961920531281},"usedName":{"valueName":{"identifier":"unsafeNewArray_"}},"qualification":null},{"reference":{"otherSlice":6480228317336251951},"usedName":{"valueName":{"identifier":"unsafeNewArraySTUArray_"}},"qualification":null},{"reference":{"otherSlice":456988961920531281},"usedName":{"valueName":{"identifier":"newArray_"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"False"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":456988961920531281},"usedName":{"valueName":{"identifier":"unsafeRead"}},"qualification":null},{"reference":{"builtinModule":"GHC.Prim"},"usedName":{"valueName":{"identifier":"readWordArray#"}},"qualification":null},{"reference":{"otherSlice":5874108591182386180},"usedName":{"valueName":{"identifier":"bOOL_INDEX"}},"qualification":null},{"reference":{"builtinModule":"GHC.Prim"},"usedName":{"valueName":{"identifier":"and#"}},"qualification":null},{"reference":{"otherSlice":8609313159433084405},"usedName":{"valueName":{"identifier":"bOOL_BIT"}},"qualification":null},{"reference":{"builtinModule":"GHC.Prim"},"usedName":{"valueName":{"identifier":"neWord#"}},"qualification":null},{"reference":{"builtinModule":"GHC.Prim"},"usedName":{"valueName":{"identifier":"int2Word#"}},"qualification":null},{"reference":{"otherSlice":456988961920531281},"usedName":{"valueName":{"identifier":"unsafeWrite"}},"qualification":null},{"reference":{"builtinModule":"GHC.Prim"},"usedName":{"valueName":{"identifier":"or#"}},"qualification":null},{"reference":{"otherSlice":8609313159433084405},"usedName":{"valueName":{"identifier":"bOOL_NOT_BIT"}},"qualification":null}],"fragment":["instance MArray (STUArray s) Bool (ST s) where\n        {-# INLINE getBounds #-}\n        getBounds (STUArray l u _ _) = return (l, u)\n        \n        {-# INLINE getNumElements #-}\n        getNumElements (STUArray _ _ n _) = return n\n        \n        {-# INLINE newArray #-}\n        newArray (l, u) initialValue\n          = ST $\n              \\ s1# ->\n                case safeRangeSize (l, u) of\n                    n@(I# n#) -> case newByteArray# (bOOL_SCALE n#) s1# of\n                                     (# s2#, marr# #) -> case bOOL_WORD_SCALE n# of\n                                                             n'# -> let loop i# s3#\n                                                                          | isTrue# (i# ==# n'#) =\n                                                                            s3#\n                                                                          | otherwise =\n                                                                            case\n                                                                              writeWordArray# marr#\n                                                                                i#\n                                                                                e#\n                                                                                s3#\n                                                                              of\n                                                                                s4# -> loop\n                                                                                         (i# +# 1#)\n                                                                                         s4#\n                                                                      in\n                                                                      case loop 0# s2# of\n                                                                          s3# -> (# s3#,\n                                                                                    STUArray l u n\n                                                                                      marr# #)\n          where !(W# e#) = if initialValue then maxBound else 0\n        \n        {-# INLINE unsafeNewArray_ #-}\n        unsafeNewArray_ (l, u) = unsafeNewArraySTUArray_ (l, u) bOOL_SCALE\n        \n        {-# INLINE newArray_ #-}\n        newArray_ arrBounds = newArray arrBounds False\n        \n        {-# INLINE unsafeRead #-}\n        unsafeRead (STUArray _ _ _ marr#) (I# i#)\n          = ST $\n              \\ s1# ->\n                case readWordArray# marr# (bOOL_INDEX i#) s1# of\n                    (# s2#, e# #) -> (# s2#,\n                                        isTrue# ((e# `and#` bOOL_BIT i#) `neWord#` int2Word# 0#) ::\n                                          Bool #)\n        \n        {-# INLINE unsafeWrite #-}\n        unsafeWrite (STUArray _ _ _ marr#) (I# i#) e\n          = ST $\n              \\ s1# ->\n                case bOOL_INDEX i# of\n                    j# -> case readWordArray# marr# j# s1# of\n                              (# s2#, old# #) -> case\n                                                   if e then old# `or#` bOOL_BIT i# else\n                                                     old# `and#` bOOL_NOT_BIT i#\n                                                   of\n                                                     e# -> case writeWordArray# marr# j# e# s2# of\n                                                               s3# -> (# s3#, () #)"],"instances":[],"language":{"extensions":["BangPatterns","RankNTypes","MagicHash","UnboxedTuples","MultiParamTypeClasses","FlexibleInstances","FlexibleContexts","DeriveDataTypeable","UnliftedFFITypes","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":true}}