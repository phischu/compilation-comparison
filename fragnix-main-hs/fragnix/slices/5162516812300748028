{"sliceID":5162516812300748028,"uses":[{"reference":{"otherSlice":7281902249350019939},"usedName":{"typeName":{"identifier":"FromJSON"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"typeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":7281902249350019939},"usedName":{"valueName":{"identifier":"parseJSON"}},"qualification":null},{"reference":{"otherSlice":1669319695546572556},"usedName":{"constructorName":{"identifier":"Object"},"constructorTypeName":{"identifier":"Value"}},"qualification":null},{"reference":{"otherSlice":2303024117134025433},"usedName":{"valueName":{"identifier":"toList"}},"qualification":"H"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":358911445516033093},"usedName":{"valueName":{"identifier":"left"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Left"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"builtinModule":"Data.Functor"},"usedName":{"valueName":{"operator":"<$>"}},"qualification":null},{"reference":{"otherSlice":358911445516033093},"usedName":{"valueName":{"identifier":"right"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Right"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fail"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"++"}},"qualification":null}],"fragment":["instance (FromJSON a, FromJSON b) => FromJSON (Either a b) where\n        parseJSON (Object (H.toList -> [(key, value)]))\n          | key == left = Left <$> parseJSON value\n          | key == right = Right <$> parseJSON value\n        parseJSON _\n          = fail $\n              \"expected an object with a single property \" ++\n                \"where the property key should be either \" ++\n                  \"\\\"Left\\\" or \\\"Right\\\"\"\n        \n        {-# INLINE parseJSON #-}"],"instances":[],"language":{"extensions":["DeriveDataTypeable","FlexibleContexts","FlexibleInstances","GeneralizedNewtypeDeriving","IncoherentInstances","OverlappingInstances","OverloadedStrings","UndecidableInstances","ViewPatterns","DefaultSignatures","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":true}}