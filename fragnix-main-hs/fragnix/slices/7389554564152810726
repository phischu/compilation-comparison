{"sliceID":7389554564152810726,"uses":[{"reference":{"otherSlice":6971457567674446257},"usedName":{"valueName":{"identifier":"zipWithM"}},"qualification":null},{"reference":{"otherSlice":5566485397659921977},"usedName":{"valueName":{"identifier":"zip3"}},"qualification":null},{"reference":{"otherSlice":8099031004319445021},"usedName":{"valueName":{"identifier":"zip"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Monad"}},"qualification":null},{"reference":{"otherSlice":1254073128444822395},"usedName":{"typeName":{"identifier":"Stream"}},"qualification":null}],"fragment":["zipWith5M ::\n            Monad m =>\n            (a -> b -> c -> d -> e -> m f) ->\n              Stream m a ->\n                Stream m b -> Stream m c -> Stream m d -> Stream m e -> Stream m f","zipWith5M f sa sb sc sd se\n  = zipWithM (\\ (a, b, c) (d, e) -> f a b c d e) (zip3 sa sb sc)\n      (zip sd se)"],"instances":[],"language":{"extensions":["ExistentialQuantification","MultiParamTypeClasses","FlexibleInstances","Rank2Types","BangPatterns","KindSignatures","GADTs","ScopedTypeVariables","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}