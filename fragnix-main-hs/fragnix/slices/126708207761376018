{"sliceID":126708207761376018,"uses":[{"reference":{"builtinModule":"Control.Monad"},"usedName":{"valueName":{"identifier":"when"}},"qualification":null},{"reference":{"otherSlice":7592847395682257009},"usedName":{"valueName":{"identifier":"demandInput"}},"qualification":null},{"reference":{"builtinModule":"Control.Monad"},"usedName":{"valueName":{"operator":"=<<"}},"qualification":null},{"reference":{"otherSlice":3634065993124318011},"usedName":{"valueName":{"identifier":"endOfChunk"}},"qualification":null},{"reference":{"otherSlice":5559337524172503602},"usedName":{"valueName":{"identifier":"takeWhile"}},"qualification":"T"},{"reference":{"builtinModule":"Data.Functor"},"usedName":{"valueName":{"operator":"<$>"}},"qualification":null},{"reference":{"otherSlice":5638772619959052319},"usedName":{"valueName":{"identifier":"get"}},"qualification":null},{"reference":{"otherSlice":2162502551344372029},"usedName":{"valueName":{"identifier":"length"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fail"}},"qualification":null},{"reference":{"otherSlice":1404171709816023738},"usedName":{"valueName":{"identifier":"advance"}},"qualification":null},{"reference":{"otherSlice":2632834356068226756},"usedName":{"valueName":{"operator":"<>"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fmap"}},"qualification":null},{"reference":{"otherSlice":1655761226116046540},"usedName":{"valueName":{"identifier":"takeWhile"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Char"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":1318512042216165404},"usedName":{"typeName":{"identifier":"Parser"}},"qualification":null},{"reference":{"otherSlice":6742866475076404776},"usedName":{"typeName":{"identifier":"Text"}},"qualification":null}],"fragment":["takeWhile1 :: (Char -> Bool) -> Parser Text","takeWhile1 p\n  = do (`when` demandInput) =<< endOfChunk\n       h <- T.takeWhile p <$> get\n       let len = length h\n       when (len == 0) $ fail \"takeWhile1\"\n       advance len\n       eoc <- endOfChunk\n       if eoc then (h <>) `fmap` takeWhile p else return h"],"instances":[],"language":{"extensions":["BangPatterns","FlexibleInstances","GADTs","OverloadedStrings","Rank2Types","RecordWildCards","TypeFamilies","TypeSynonymInstances","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}