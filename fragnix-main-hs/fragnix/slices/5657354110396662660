{"sliceID":5657354110396662660,"uses":[{"reference":{"otherSlice":6247261920417293319},"usedName":{"constructorName":{"identifier":"Done"},"constructorTypeName":{"identifier":"Next"}},"qualification":"B"},{"reference":{"otherSlice":6632841070279347397},"usedName":{"constructorName":{"identifier":"Next"},"constructorTypeName":{"identifier":"Next"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":6247261920417293319},"usedName":{"constructorName":{"identifier":"More"},"constructorTypeName":{"identifier":"Next"}},"qualification":"B"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":9117606929373792949},"usedName":{"constructorName":{"identifier":"LOne"},"constructorTypeName":{"identifier":"Leftover"}},"qualification":null},{"reference":{"otherSlice":6247261920417293319},"usedName":{"constructorName":{"identifier":"Chunk"},"constructorTypeName":{"identifier":"Next"}},"qualification":"B"},{"reference":{"otherSlice":9117606929373792949},"usedName":{"constructorName":{"identifier":"LTwo"},"constructorTypeName":{"identifier":"Leftover"}},"qualification":null},{"reference":{"otherSlice":8422411450248709681},"usedName":{"typeName":{"identifier":"BytesFilled"}},"qualification":null},{"reference":{"otherSlice":6247261920417293319},"usedName":{"typeName":{"identifier":"Next"}},"qualification":"B"},{"reference":{"otherSlice":6632841070279347397},"usedName":{"typeName":{"identifier":"Next"}},"qualification":null},{"reference":{"builtinModule":"GHC.Ptr"},"usedName":{"valueName":{"identifier":"plusPtr"}},"qualification":null},{"reference":{"otherSlice":829999802279960389},"usedName":{"valueName":{"identifier":"frameHeaderLength"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"min"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"otherSlice":9117606929373792949},"usedName":{"constructorName":{"identifier":"LZero"},"constructorTypeName":{"identifier":"Leftover"}},"qualification":null},{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"error"}},"qualification":null},{"reference":{"otherSlice":7235567377809295464},"usedName":{"valueName":{"identifier":"length"}},"qualification":"BS"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<="}},"qualification":null},{"reference":{"otherSlice":6389867443957913839},"usedName":{"valueName":{"identifier":"copy"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":3681333600918143498},"usedName":{"valueName":{"identifier":"splitAt"}},"qualification":"BS"},{"reference":{"builtinModule":"Data.Functor"},"usedName":{"valueName":{"identifier":"void"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":9117606929373792949},"usedName":{"typeName":{"identifier":"Leftover"}},"qualification":null},{"reference":{"otherSlice":6632841070279347397},"usedName":{"typeName":{"identifier":"DynaNext"}},"qualification":null}],"fragment":["nextForBuilder :: BytesFilled -> B.Next -> Next","nextForBuilder len B.Done = Next len Nothing\nnextForBuilder len (B.More _ writer)\n  = Next len $ Just (fillBufBuilder (LOne writer))\nnextForBuilder len (B.Chunk bs writer)\n  = Next len $ Just (fillBufBuilder (LTwo bs writer))","fillBufBuilder :: Leftover -> DynaNext","fillBufBuilder leftover buf0 siz0 lim\n  = do let payloadBuf = buf0 `plusPtr` frameHeaderLength\n           room = min (siz0 - frameHeaderLength) lim\n       case leftover of\n           LZero -> error \"fillBufBuilder: LZero\"\n           LOne writer -> do (len, signal) <- writer payloadBuf room\n                             getNext len signal\n           LTwo bs writer | BS.length bs <= room ->\n                            do buf1 <- copy payloadBuf bs\n                               let len1 = BS.length bs\n                               (len2, signal) <- writer buf1 (room - len1)\n                               getNext (len1 + len2) signal\n                          | otherwise ->\n                            do let (bs1, bs2) = BS.splitAt room bs\n                               void $ copy payloadBuf bs1\n                               getNext room (B.Chunk bs2 writer)\n  where getNext l s = return $ nextForBuilder l s"],"instances":[],"language":{"extensions":["OverloadedStrings","BangPatterns","NamedFieldPuns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}