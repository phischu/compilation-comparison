{"sliceID":7526508591127148747,"uses":[{"reference":{"otherSlice":3258793649954523692},"usedName":{"valueName":{"identifier":"consume"}},"qualification":null},{"reference":{"otherSlice":6971457567674446257},"usedName":{"valueName":{"identifier":"zipWithM"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Monad"}},"qualification":null},{"reference":{"otherSlice":1254073128444822395},"usedName":{"typeName":{"identifier":"Stream"}},"qualification":null}],"fragment":["zipWithM_ ::\n            Monad m => (a -> b -> m c) -> Stream m a -> Stream m b -> m ()","zipWithM_ f sa sb = consume (zipWithM f sa sb)"],"instances":[],"language":{"extensions":["ExistentialQuantification","MultiParamTypeClasses","FlexibleInstances","Rank2Types","BangPatterns","KindSignatures","GADTs","ScopedTypeVariables","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}