{"sliceID":2429123858122695263,"uses":[{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"typeName":{"identifier":"Foldable"}},"qualification":null},{"reference":{"otherSlice":1673753023314990609},"usedName":{"typeName":{"identifier":"Node"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"foldMap"}},"qualification":null},{"reference":{"otherSlice":1673753023314990609},"usedName":{"constructorName":{"identifier":"Node2"},"constructorTypeName":{"identifier":"Node"}},"qualification":null},{"reference":{"otherSlice":3221098851026216459},"usedName":{"valueName":{"operator":"<>"}},"qualification":null},{"reference":{"otherSlice":1673753023314990609},"usedName":{"constructorName":{"identifier":"Node3"},"constructorTypeName":{"identifier":"Node"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"foldr"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"foldl"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"foldr'"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$!"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"foldl'"}},"qualification":null}],"fragment":["instance Foldable Node where\n        foldMap f (Node2 _ a b) = f a <> f b\n        foldMap f (Node3 _ a b c) = f a <> f b <> f c\n        foldr f z (Node2 _ a b) = a `f` (b `f` z)\n        foldr f z (Node3 _ a b c) = a `f` (b `f` (c `f` z))\n        foldl f z (Node2 _ a b) = (z `f` a) `f` b\n        foldl f z (Node3 _ a b c) = ((z `f` a) `f` b) `f` c\n        foldr' f z (Node2 _ a b) = f a $! f b z\n        foldr' f z (Node3 _ a b c) = f a $! f b $! f c z\n        foldl' f z (Node2 _ a b) = (f $! f z a) b\n        foldl' f z (Node3 _ a b c) = (f $! (f $! f z a) b) c"],"instances":[],"language":{"extensions":["BangPatterns","DeriveDataTypeable","StandaloneDeriving","FlexibleInstances","ScopedTypeVariables","DeriveGeneric","TypeFamilies","PatternSynonyms","ViewPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":true}}