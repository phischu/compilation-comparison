{"sliceID":8432548570636696345,"uses":[{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"String"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"Text.Read"},"usedName":{"valueName":{"identifier":"readMaybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"*"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null}],"fragment":["readTzOffset :: String -> Maybe Int","readTzOffset str\n  = let getSign '+' = Just 1\n        getSign '-' = Just (-1)\n        getSign _ = Nothing\n        calc s h1 h2 m1 m2\n          = do sign <- getSign s\n               h <- readMaybe [h1, h2]\n               m <- readMaybe [m1, m2]\n               return $ sign * (60 * h + m)\n      in\n      case str of\n          (s : (h1 : (h2 : (':' : (m1 : (m2 : [])))))) -> calc s h1 h2 m1 m2\n          (s : (h1 : (h2 : (m1 : (m2 : []))))) -> calc s h1 h2 m1 m2\n          _ -> Nothing"],"instances":[],"language":{"extensions":["Rank2Types","DeriveDataTypeable","StandaloneDeriving","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}