{"sliceID":8318554114313559413,"uses":[{"reference":{"otherSlice":5031807646873895210},"usedName":{"typeName":{"identifier":"FixedPrim"}},"qualification":null},{"reference":{"builtinModule":"GHC.Word"},"usedName":{"typeName":{"identifier":"Word64"}},"qualification":null},{"reference":{"builtinModule":"GHC.Float"},"usedName":{"typeName":{"identifier":"Double"}},"qualification":null},{"reference":{"otherSlice":6348188483498471190},"usedName":{"valueName":{"identifier":"size"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"Foreign.Storable"},"usedName":{"valueName":{"identifier":"sizeOf"}},"qualification":null},{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"undefined"}},"qualification":null},{"reference":{"builtinModule":"GHC.Float"},"usedName":{"typeName":{"identifier":"Float"}},"qualification":null},{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"error"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":8269532628530687664},"usedName":{"valueName":{"identifier":"fixedPrim"}},"qualification":null},{"reference":{"builtinModule":"Foreign.Storable"},"usedName":{"valueName":{"identifier":"poke"}},"qualification":null},{"reference":{"builtinModule":"GHC.Ptr"},"usedName":{"valueName":{"identifier":"castPtr"}},"qualification":null},{"reference":{"builtinModule":"Foreign.Storable"},"usedName":{"valueName":{"identifier":"peek"}},"qualification":null},{"reference":{"otherSlice":8055287230693574226},"usedName":{"valueName":{"identifier":"runF"}},"qualification":null}],"fragment":["encodeDoubleViaWord64F :: FixedPrim Word64 -> FixedPrim Double","encodeDoubleViaWord64F w64fe\n  | size w64fe < sizeOf (undefined :: Float) =\n    error $ \"encodeDoubleViaWord64F: encoding not wide enough\"\n  | otherwise =\n    fixedPrim (size w64fe) $\n      \\ x op ->\n        do poke (castPtr op) x\n           x' <- peek (castPtr op)\n           runF w64fe x' op"],"instances":[],"language":{"extensions":["ScopedTypeVariables","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}