{"sliceID":1271299795874529140,"uses":[{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":5290961166819491409},"usedName":{"valueName":{"identifier":"coefficient"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">="}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"||"}},"qualification":null},{"reference":{"otherSlice":5290961166819491409},"usedName":{"valueName":{"identifier":"base10Exponent"}},"qualification":null},{"reference":{"otherSlice":8003043339633159353},"usedName":{"valueName":{"identifier":"normalize"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">"}},"qualification":null},{"reference":{"otherSlice":286957341866390812},"usedName":{"valueName":{"identifier":"limit"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"otherSlice":2665660221835130053},"usedName":{"valueName":{"identifier":"integerLog10'"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"max"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"identifier":"abs"}},"qualification":null},{"reference":{"builtinModule":"GHC.Integer.GMP.Internals"},"usedName":{"typeName":{"identifier":"Integer"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"identifier":"fromInteger"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"toInteger"}},"qualification":null},{"reference":{"builtinModule":"GHC.Enum"},"usedName":{"valueName":{"identifier":"minBound"}},"qualification":null},{"reference":{"builtinModule":"GHC.Enum"},"usedName":{"valueName":{"identifier":"maxBound"}},"qualification":null},{"reference":{"otherSlice":4033876615325159371},"usedName":{"valueName":{"identifier":"toIntegral"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"typeName":{"identifier":"Integral"}},"qualification":null},{"reference":{"builtinModule":"GHC.Enum"},"usedName":{"typeName":{"identifier":"Bounded"}},"qualification":null},{"reference":{"otherSlice":5290961166819491409},"usedName":{"typeName":{"identifier":"Scientific"}},"qualification":null}],"fragment":["toBoundedInteger ::\n                 forall i . (Integral i, Bounded i) => Scientific -> Maybe i","toBoundedInteger s\n  | c == 0 = fromIntegerBounded 0\n  | integral =\n    if dangerouslyBig then Nothing else fromIntegerBounded n\n  | otherwise = Nothing\n  where c = coefficient s\n        integral = e >= 0 || e' >= 0\n        e = base10Exponent s\n        e' = base10Exponent s'\n        s' = normalize s\n        dangerouslyBig\n          = e > limit &&\n              e > integerLog10' (max (abs iMinBound) (abs iMaxBound))\n        \n        fromIntegerBounded :: Integer -> Maybe i\n        fromIntegerBounded i\n          | i < iMinBound || i > iMaxBound = Nothing\n          | otherwise = Just $ fromInteger i\n        iMinBound = toInteger (minBound :: i)\n        iMaxBound = toInteger (maxBound :: i)\n        \n        n :: Integer\n        n = toIntegral s'"],"instances":[],"language":{"extensions":["DeriveDataTypeable","BangPatterns","ScopedTypeVariables","UnboxedTuples","PatternGuards","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll"],"isInstance":false}}