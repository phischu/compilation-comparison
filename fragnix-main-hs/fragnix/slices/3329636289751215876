{"sliceID":3329636289751215876,"uses":[{"reference":{"otherSlice":3004867841528755180},"usedName":{"valueName":{"identifier":"unsafeNew"}},"qualification":null},{"reference":{"otherSlice":4255984935807346951},"usedName":{"valueName":{"identifier":"foldM"}},"qualification":"MBundle"},{"reference":{"otherSlice":6402119587946108601},"usedName":{"valueName":{"identifier":"length"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":2686125781807725101},"usedName":{"valueName":{"identifier":"checkSlice"}},"qualification":"Ck"},{"reference":{"otherSlice":4956884951746098628},"usedName":{"constructorName":{"identifier":"Internal"},"constructorTypeName":{"identifier":"Checks"}},"qualification":"Ck"},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"otherSlice":9056219066746679510},"usedName":{"valueName":{"identifier":"unsafeSlice"}},"qualification":null},{"reference":{"otherSlice":5990252611792456364},"usedName":{"valueName":{"identifier":"unsafePrepend1"}},"qualification":null},{"reference":{"otherSlice":3326759671840124085},"usedName":{"typeName":{"identifier":"PrimMonad"}},"qualification":null},{"reference":{"otherSlice":4641953017354057066},"usedName":{"typeName":{"identifier":"MVector"}},"qualification":null},{"reference":{"otherSlice":1801160994859441906},"usedName":{"typeName":{"identifier":"MBundle"}},"qualification":null},{"reference":{"otherSlice":3326759671840124085},"usedName":{"typeName":{"identifier":"PrimState"}},"qualification":null}],"fragment":["munstreamRUnknown ::\n                    (PrimMonad m, MVector v a) =>\n                    MBundle m u a -> m (v (PrimState m) a)","munstreamRUnknown s\n  = do v <- unsafeNew 0\n       (v', i) <- MBundle.foldM put (v, 0) s\n       let n = length v'\n       return $\n         ((Ck.checkSlice \"Data/Vector/Generic/Mutable.hs\" 488) Ck.Internal)\n           \"unstreamRUnknown\"\n           i\n           (n - i)\n           n\n           $ unsafeSlice i (n - i) v'\n  where {-# INLINE [0] put #-}\n        put (v, i) x = unsafePrepend1 v i x"],"instances":[],"language":{"extensions":["MultiParamTypeClasses","FlexibleContexts","BangPatterns","TypeFamilies","ScopedTypeVariables","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}