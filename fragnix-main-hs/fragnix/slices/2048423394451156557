{"sliceID":2048423394451156557,"uses":[{"reference":{"otherSlice":6742866475076404776},"usedName":{"constructorName":{"identifier":"Text"},"constructorTypeName":{"identifier":"Text"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<="}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"||"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"otherSlice":2253672583834626002},"usedName":{"valueName":{"identifier":"unsafeIndex"}},"qualification":"A"},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">="}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"operator":".|."}},"qualification":null},{"reference":{"otherSlice":1666505852054931028},"usedName":{"constructorName":{"operator":":*"},"constructorTypeName":{"identifier":"T"}},"qualification":null},{"reference":{"otherSlice":4463961207685254290},"usedName":{"valueName":{"identifier":"shiftL"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"operator":".&."}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"True"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"/="}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"False"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":6742866475076404776},"usedName":{"typeName":{"identifier":"Text"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null}],"fragment":["indices :: Text -> Text -> [Int]","indices _needle@(Text narr noff nlen)\n  _haystack@(Text harr hoff hlen)\n  | nlen == 1 = scanOne (nindex 0)\n  | nlen <= 0 || ldiff < 0 = []\n  | otherwise = scan 0\n  where ldiff = hlen - nlen\n        nlast = nlen - 1\n        z = nindex nlast\n        nindex k = A.unsafeIndex narr (noff + k)\n        hindex k = A.unsafeIndex harr (hoff + k)\n        hindex' k\n          | k == hlen = 0\n          | otherwise = A.unsafeIndex harr (hoff + k)\n        buildTable !i !msk !skp\n          | i >= nlast = (msk .|. swizzle z) :* skp\n          | otherwise = buildTable (i + 1) (msk .|. swizzle c) skp'\n          where c = nindex i\n                skp'\n                  | c == z = nlen - i - 2\n                  | otherwise = skp\n        swizzle k = 1 `shiftL` (fromIntegral k .&. 63)\n        scan !i\n          | i > ldiff = []\n          | c == z && candidateMatch 0 = i : scan (i + nlen)\n          | otherwise = scan (i + delta)\n          where c = hindex (i + nlast)\n                candidateMatch !j\n                  | j >= nlast = True\n                  | hindex (i + j) /= nindex j = False\n                  | otherwise = candidateMatch (j + 1)\n                delta\n                  | nextInPattern = nlen + 1\n                  | c == z = skip + 1\n                  | otherwise = 1\n                  where nextInPattern = mask .&. swizzle (hindex' (i + nlen)) == 0\n                !(mask :* skip) = buildTable 0 0 (nlen - 2)\n        scanOne c = loop 0\n          where loop !i\n                  | i >= hlen = []\n                  | hindex i == c = i : loop (i + 1)\n                  | otherwise = loop (i + 1)"],"instances":[],"language":{"extensions":["BangPatterns","ScopedTypeVariables","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}