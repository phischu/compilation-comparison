{"sliceID":441577479731513451,"uses":[{"reference":{"otherSlice":8434830524291201891},"usedName":{"valueName":{"identifier":"control"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"Control.Exception.Base"},"usedName":{"valueName":{"identifier":"catchJust"}},"qualification":"E"},{"reference":{"otherSlice":2946060544503603071},"usedName":{"typeName":{"identifier":"MonadBaseControl"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"builtinModule":"GHC.Exception"},"usedName":{"typeName":{"identifier":"Exception"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null}],"fragment":["catchJust ::\n            (MonadBaseControl IO m, Exception e) =>\n            (e -> Maybe b) -> m a -> (b -> m a) -> m a","catchJust p a handler\n  = control $\n      \\ runInIO -> E.catchJust p (runInIO a) (\\ e -> runInIO (handler e))"],"instances":[],"language":{"extensions":["NoImplicitPrelude","ExistentialQuantification","FlexibleContexts","RankNTypes","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}