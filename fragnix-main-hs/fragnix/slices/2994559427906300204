{"sliceID":2994559427906300204,"uses":[{"reference":{"otherSlice":7375684867847713962},"usedName":{"valueName":{"identifier":"break"}},"qualification":"S"},{"reference":{"otherSlice":7422468344224083282},"usedName":{"valueName":{"identifier":"isSpace"}},"qualification":null},{"reference":{"otherSlice":7636465670018728026},"usedName":{"valueName":{"identifier":"map"}},"qualification":"S"},{"reference":{"otherSlice":917942214217815671},"usedName":{"valueName":{"identifier":"toLower"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":7334742665858401074},"usedName":{"valueName":{"identifier":"dropWhile"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":8671489072648937101},"usedName":{"valueName":{"identifier":"decodeLenient"}},"qualification":null},{"reference":{"otherSlice":1106995799470909182},"usedName":{"valueName":{"identifier":"_colon"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"builtinModule":"Data.Tuple"},"usedName":{"valueName":{"identifier":"snd"}},"qualification":null},{"reference":{"builtinModule":"Data.Functor"},"usedName":{"valueName":{"operator":"<$>"}},"qualification":null},{"reference":{"otherSlice":5797786865840180786},"usedName":{"valueName":{"identifier":"uncons"}},"qualification":"S"},{"reference":{"otherSlice":4010822550476529195},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null}],"fragment":["extractBasicAuth :: ByteString -> Maybe (ByteString, ByteString)","extractBasicAuth bs\n  = let (x, y) = S.break isSpace bs in\n      if S.map toLower x == \"basic\" then extract $ S.dropWhile isSpace y\n        else Nothing\n  where extract encoded\n          = let raw = decodeLenient encoded\n                (username, password') = S.break (== _colon) raw\n              in ((username,) . snd) <$> S.uncons password'"],"instances":[],"language":{"extensions":["OverloadedStrings","RecordWildCards","TupleSections","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}