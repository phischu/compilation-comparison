{"sliceID":9150815174073407384,"uses":[{"reference":{"otherSlice":8192790692419119010},"usedName":{"valueName":{"identifier":"ensure"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":1404171709816023738},"usedName":{"valueName":{"identifier":"advance"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":">>"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fail"}},"qualification":null},{"reference":{"otherSlice":3696497047475397211},"usedName":{"valueName":{"identifier":"length"}},"qualification":"T"},{"reference":{"otherSlice":4289651736675196844},"usedName":{"valueName":{"identifier":"map"}},"qualification":"T"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"ord"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<="}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"builtinModule":"GHC.Char"},"usedName":{"valueName":{"identifier":"chr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":6742866475076404776},"usedName":{"typeName":{"identifier":"Text"}},"qualification":null},{"reference":{"otherSlice":1318512042216165404},"usedName":{"typeName":{"identifier":"Parser"}},"qualification":null}],"fragment":["asciiCI :: Text -> Parser Text","asciiCI input\n  = do (k, t) <- ensure n\n       if asciiToLower t == s then advance k >> return t else\n         fail \"asciiCI\"\n  where n = T.length input\n        s = asciiToLower input\n        asciiToLower = T.map f\n          where offset = ord 'a' - ord 'A'\n                f c\n                  | 'A' <= c && c <= 'Z' = chr (ord c + offset)\n                  | otherwise = c"],"instances":[],"language":{"extensions":["BangPatterns","FlexibleInstances","GADTs","OverloadedStrings","Rank2Types","RecordWildCards","TypeFamilies","TypeSynonymInstances","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}