{"sliceID":6431003587946699872,"uses":[{"reference":{"otherSlice":5940119708189850525},"usedName":{"valueName":{"identifier":"parse"}},"qualification":"L"},{"reference":{"otherSlice":8328778925864587238},"usedName":{"constructorName":{"identifier":"Done"},"constructorTypeName":{"identifier":"Result"}},"qualification":"L"},{"reference":{"otherSlice":3898309308774721313},"usedName":{"constructorName":{"identifier":"Success"},"constructorTypeName":{"identifier":"Result"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Right"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":3898309308774721313},"usedName":{"constructorName":{"identifier":"Error"},"constructorTypeName":{"identifier":"Result"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Left"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":8328778925864587238},"usedName":{"constructorName":{"identifier":"Fail"},"constructorTypeName":{"identifier":"Result"}},"qualification":"L"},{"reference":{"otherSlice":2385146024156182908},"usedName":{"typeName":{"identifier":"Parser"}},"qualification":null},{"reference":{"otherSlice":1669319695546572556},"usedName":{"typeName":{"identifier":"Value"}},"qualification":null},{"reference":{"otherSlice":3898309308774721313},"usedName":{"typeName":{"identifier":"Result"}},"qualification":null},{"reference":{"otherSlice":1699226608098321587},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"L"},{"reference":{"builtinModule":"Data.Either"},"usedName":{"typeName":{"identifier":"Either"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"String"}},"qualification":null}],"fragment":["eitherDecodeWith ::\n                 Parser Value ->\n                   (Value -> Result a) -> L.ByteString -> Either String a","eitherDecodeWith p to s\n  = case L.parse p s of\n        L.Done _ v -> case to v of\n                          Success a -> Right a\n                          Error msg -> Left msg\n        L.Fail _ _ msg -> Left msg"],"instances":[],"language":{"extensions":["BangPatterns","OverloadedStrings","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}