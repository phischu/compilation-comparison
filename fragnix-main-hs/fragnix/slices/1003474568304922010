{"sliceID":1003474568304922010,"uses":[{"reference":{"otherSlice":2186011155846212713},"usedName":{"constructorName":{"identifier":"Stream"},"constructorTypeName":{"identifier":"Stream"}},"qualification":null},{"reference":{"otherSlice":899429663293461015},"usedName":{"constructorName":{"identifier":"Done"},"constructorTypeName":{"identifier":"Step"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"EQ"},"constructorTypeName":{"identifier":"Ordering"}},"qualification":null},{"reference":{"otherSlice":899429663293461015},"usedName":{"constructorName":{"identifier":"Skip"},"constructorTypeName":{"identifier":"Step"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"LT"},"constructorTypeName":{"identifier":"Ordering"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"GT"},"constructorTypeName":{"identifier":"Ordering"}},"qualification":null},{"reference":{"otherSlice":899429663293461015},"usedName":{"constructorName":{"identifier":"Yield"},"constructorTypeName":{"identifier":"Step"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"compare"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"typeName":{"identifier":"Ord"}},"qualification":null},{"reference":{"otherSlice":2186011155846212713},"usedName":{"typeName":{"identifier":"Stream"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Ordering"}},"qualification":null}],"fragment":["cmp :: (Ord a) => Stream a -> Stream a -> Ordering","cmp (Stream next1 s1 _) (Stream next2 s2 _)\n  = loop (next1 s1) (next2 s2)\n  where loop Done Done = EQ\n        loop (Skip s1') (Skip s2') = loop (next1 s1') (next2 s2')\n        loop (Skip s1') x2 = loop (next1 s1') x2\n        loop x1 (Skip s2') = loop x1 (next2 s2')\n        loop Done _ = LT\n        loop _ Done = GT\n        loop (Yield x1 s1') (Yield x2 s2')\n          = case compare x1 x2 of\n                EQ -> loop (next1 s1') (next2 s2')\n                other -> other"],"instances":[],"language":{"extensions":["BangPatterns","ExistentialQuantification","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}