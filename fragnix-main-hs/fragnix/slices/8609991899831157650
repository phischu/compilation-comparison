{"sliceID":8609991899831157650,"uses":[{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":3260672852151311788},"usedName":{"constructorName":{"identifier":"Node"},"constructorTypeName":{"identifier":"Tree"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Monad"}},"qualification":null},{"reference":{"otherSlice":3260672852151311788},"usedName":{"typeName":{"identifier":"Tree"}},"qualification":null},{"reference":{"builtinModule":"Data.Traversable"},"usedName":{"valueName":{"identifier":"mapM"}},"qualification":"Prelude"},{"reference":{"otherSlice":3260672852151311788},"usedName":{"typeName":{"identifier":"Forest"}},"qualification":null}],"fragment":["unfoldTreeM :: Monad m => (b -> m (a, [b])) -> b -> m (Tree a)","unfoldTreeM f b\n  = do (a, bs) <- f b\n       ts <- unfoldForestM f bs\n       return (Node a ts)","unfoldForestM ::\n                Monad m => (b -> m (a, [b])) -> [b] -> m (Forest a)","unfoldForestM f = Prelude.mapM (unfoldTreeM f)"],"instances":[],"language":{"extensions":["DeriveDataTypeable","StandaloneDeriving","DeriveGeneric","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}