{"sliceID":6766200785044374997,"uses":[{"reference":{"builtinModule":"Control.Monad"},"usedName":{"valueName":{"identifier":"when"}},"qualification":null},{"reference":{"otherSlice":7592847395682257009},"usedName":{"valueName":{"identifier":"demandInput"}},"qualification":null},{"reference":{"builtinModule":"Control.Monad"},"usedName":{"valueName":{"operator":"=<<"}},"qualification":null},{"reference":{"otherSlice":2897937556227271740},"usedName":{"valueName":{"identifier":"endOfChunk"}},"qualification":null},{"reference":{"otherSlice":7112072859998831005},"usedName":{"valueName":{"identifier":"takeWhile"}},"qualification":"B8"},{"reference":{"builtinModule":"Data.Functor"},"usedName":{"valueName":{"operator":"<$>"}},"qualification":null},{"reference":{"otherSlice":8330253145869307845},"usedName":{"valueName":{"identifier":"get"}},"qualification":null},{"reference":{"otherSlice":6258463563638113276},"usedName":{"valueName":{"identifier":"length"}},"qualification":"B"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fail"}},"qualification":null},{"reference":{"otherSlice":3057677465774450882},"usedName":{"valueName":{"identifier":"advance"}},"qualification":null},{"reference":{"otherSlice":2632834356068226756},"usedName":{"valueName":{"operator":"<>"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fmap"}},"qualification":null},{"reference":{"otherSlice":2159602749077879927},"usedName":{"valueName":{"identifier":"takeWhile"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Word"},"usedName":{"typeName":{"identifier":"Word8"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":2385146024156182908},"usedName":{"typeName":{"identifier":"Parser"}},"qualification":null},{"reference":{"otherSlice":8642306666063513779},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":null}],"fragment":["takeWhile1 :: (Word8 -> Bool) -> Parser ByteString","takeWhile1 p\n  = do (`when` demandInput) =<< endOfChunk\n       s <- B8.takeWhile p <$> get\n       let len = B.length s\n       if len == 0 then fail \"takeWhile1\" else\n         do advance len\n            eoc <- endOfChunk\n            if eoc then (s <>) `fmap` takeWhile p else return s"],"instances":[],"language":{"extensions":["BangPatterns","GADTs","OverloadedStrings","RecordWildCards","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}