{"sliceID":1437747632155752681,"uses":[{"reference":{"builtinModule":"GHC.Show"},"usedName":{"typeName":{"identifier":"Show"}},"qualification":null},{"reference":{"otherSlice":254499232804780161},"usedName":{"typeName":{"identifier":"IResult"}},"qualification":null},{"reference":{"builtinModule":"GHC.Show"},"usedName":{"valueName":{"identifier":"showsPrec"}},"qualification":null},{"reference":{"builtinModule":"GHC.Show"},"usedName":{"valueName":{"identifier":"showParen"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":254499232804780161},"usedName":{"constructorName":{"identifier":"Fail"},"constructorTypeName":{"identifier":"IResult"}},"qualification":null},{"reference":{"builtinModule":"GHC.Show"},"usedName":{"valueName":{"identifier":"showString"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"otherSlice":254499232804780161},"usedName":{"constructorName":{"identifier":"Partial"},"constructorTypeName":{"identifier":"IResult"}},"qualification":null},{"reference":{"otherSlice":254499232804780161},"usedName":{"constructorName":{"identifier":"Done"},"constructorTypeName":{"identifier":"IResult"}},"qualification":null},{"reference":{"builtinModule":"GHC.Show"},"usedName":{"typeName":{"identifier":"ShowS"}},"qualification":null},{"reference":{"builtinModule":"GHC.Show"},"usedName":{"valueName":{"identifier":"showChar"}},"qualification":null}],"fragment":["instance (Show i, Show r) => Show (IResult i r) where\n        showsPrec d ir\n          = showParen (d > 10) $\n              case ir of\n                  (Fail t stk msg) -> showString \"Fail\" . f t . f stk . f msg\n                  (Partial _) -> showString \"Partial _\"\n                  (Done t r) -> showString \"Done\" . f t . f r\n          where f :: Show a => a -> ShowS\n                f x = showChar ' ' . showsPrec 11 x"],"instances":[],"language":{"extensions":["BangPatterns","GeneralizedNewtypeDeriving","OverloadedStrings","Rank2Types","RecordWildCards","TypeFamilies","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":true}}