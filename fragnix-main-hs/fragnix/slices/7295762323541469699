{"sliceID":7295762323541469699,"uses":[{"reference":{"otherSlice":8184865101111560075},"usedName":{"constructorName":{"identifier":"Parser"},"constructorTypeName":{"identifier":"Parser"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":122679094463524885},"usedName":{"valueName":{"identifier":"bufferElemAt"}},"qualification":null},{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"undefined"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":4809642949802317202},"usedName":{"constructorName":{"identifier":"Pos"},"constructorTypeName":{"identifier":"Pos"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":4298861754094119075},"usedName":{"valueName":{"identifier":"satisfySuspended"}},"qualification":null},{"reference":{"otherSlice":122679094463524885},"usedName":{"typeName":{"identifier":"Chunk"}},"qualification":null},{"reference":{"otherSlice":122679094463524885},"usedName":{"typeName":{"identifier":"ChunkElem"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":8184865101111560075},"usedName":{"typeName":{"identifier":"Parser"}},"qualification":null}],"fragment":["satisfyElem ::\n            forall t . Chunk t =>\n              (ChunkElem t -> Bool) -> Parser t (ChunkElem t)","satisfyElem p\n  = Parser $\n      \\ t pos more lose succ ->\n        case bufferElemAt (undefined :: t) pos t of\n            Just (e, l) | p e -> succ t (pos + Pos l) more e\n                        | otherwise -> lose t pos more [] \"satisfyElem\"\n            Nothing -> satisfySuspended p t pos more lose succ"],"instances":[],"language":{"extensions":["BangPatterns","ScopedTypeVariables","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}