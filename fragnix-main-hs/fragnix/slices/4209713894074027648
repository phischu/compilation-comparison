{"sliceID":4209713894074027648,"uses":[{"reference":{"otherSlice":6468298682039186647},"usedName":{"valueName":{"identifier":"reifyConTys"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"length"}},"qualification":null},{"reference":{"otherSlice":5300934711519751499},"usedName":{"valueName":{"identifier":"newNameList"}},"qualification":null},{"reference":{"otherSlice":3198347555409976524},"usedName":{"valueName":{"identifier":"dispatchToJSON"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"zip"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":8378255758575303678},"usedName":{"valueName":{"identifier":"unsafeNew"}},"qualification":"VM"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"otherSlice":6362249976441870390},"usedName":{"valueName":{"identifier":"unsafeWrite"}},"qualification":"VM"},{"reference":{"builtinModule":"GHC.Integer.GMP.Internals"},"usedName":{"typeName":{"identifier":"Integer"}},"qualification":null},{"reference":{"otherSlice":8838403415977070196},"usedName":{"constructorName":{"identifier":"Array"},"constructorTypeName":{"identifier":"Value"}},"qualification":null},{"reference":{"otherSlice":1496639302618739049},"usedName":{"valueName":{"identifier":"create"}},"qualification":"V"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"++"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"map"}},"qualification":null},{"reference":{"otherSlice":1846059807510772275},"usedName":{"valueName":{"identifier":"sumToValue"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"null"}},"qualification":null},{"reference":{"otherSlice":4512247588159674237},"usedName":{"valueName":{"identifier":"unwrapUnaryRecords"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"not"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"True"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":684351644151123126},"usedName":{"valueName":{"identifier":"object"}},"qualification":"A"},{"reference":{"otherSlice":4512247588159674237},"usedName":{"valueName":{"identifier":"omitNothingFields"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"zip3"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"valueName":{"identifier":"catMaybes"}},"qualification":null},{"reference":{"builtinModule":"Data.List"},"usedName":{"valueName":{"identifier":"partition"}},"qualification":null},{"reference":{"otherSlice":4760538052842005726},"usedName":{"valueName":{"identifier":"isMaybe"}},"qualification":null},{"reference":{"otherSlice":2275500416606494709},"usedName":{"valueName":{"identifier":"keyValuePairWith"}},"qualification":null},{"reference":{"builtinModule":"Data.Functor"},"usedName":{"valueName":{"operator":"<$>"}},"qualification":null},{"reference":{"otherSlice":5420555374589246121},"usedName":{"valueName":{"identifier":"pack"}},"qualification":"T"},{"reference":{"otherSlice":7408368847678525969},"usedName":{"valueName":{"identifier":"fieldLabelExp"}},"qualification":null},{"reference":{"otherSlice":4512247588159674237},"usedName":{"valueName":{"identifier":"sumEncoding"}},"qualification":null},{"reference":{"otherSlice":2490827399793063090},"usedName":{"constructorName":{"identifier":"TwoElemArray"},"constructorTypeName":{"identifier":"SumEncoding"}},"qualification":null},{"reference":{"otherSlice":5441981233283326435},"usedName":{"valueName":{"identifier":"toJSON"}},"qualification":null},{"reference":{"otherSlice":2881255245096305207},"usedName":{"valueName":{"identifier":"conStr"}},"qualification":null},{"reference":{"otherSlice":2490827399793063090},"usedName":{"constructorName":{"identifier":"TaggedObject"},"constructorTypeName":{"identifier":"SumEncoding"}},"qualification":null},{"reference":{"otherSlice":2490827399793063090},"usedName":{"valueName":{"identifier":"tagFieldName"}},"qualification":null},{"reference":{"otherSlice":5221193408454853520},"usedName":{"valueName":{"operator":".="}},"qualification":null},{"reference":{"otherSlice":2490827399793063090},"usedName":{"constructorName":{"identifier":"ObjectWithSingleField"},"constructorTypeName":{"identifier":"SumEncoding"}},"qualification":null},{"reference":{"otherSlice":4936942242889787898},"usedName":{"valueName":{"identifier":"conTxt"}},"qualification":null},{"reference":{"otherSlice":2490827399793063090},"usedName":{"constructorName":{"identifier":"UntaggedValue"},"constructorTypeName":{"identifier":"SumEncoding"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"False"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"head"}},"qualification":null},{"reference":{"otherSlice":3790782889836978137},"usedName":{"typeName":{"identifier":"JSONClass"}},"qualification":null},{"reference":{"otherSlice":4512247588159674237},"usedName":{"typeName":{"identifier":"Options"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null}],"fragment":["argsToValue ::\n            JSONClass -> [(Name, Name)] -> Options -> Bool -> Con -> Q Match","argsToValue jc tjs opts multiCons (NormalC conName ts)\n  = do (argTys, tvMap) <- reifyConTys jc tjs conName\n       let len = length ts\n       args <- newNameList \"arg\" len\n       js <- case\n               [dispatchToJSON jc conName tvMap argTy `appE` varE arg |\n                (arg, argTy) <- zip args argTys]\n               of\n                 [e] -> return e\n                 es -> do mv <- newName \"mv\"\n                          let newMV\n                                = bindS (varP mv)\n                                    ([| VM.unsafeNew |] `appE` litE (integerL $ fromIntegral len))\n                              stmts\n                                = [noBindS $\n                                     [| VM.unsafeWrite |] `appE` varE mv `appE` litE (integerL ix)\n                                       `appE` e\n                                   | (ix, e) <- zip [(0 :: Integer) ..] es]\n                              ret = noBindS $ [| return |] `appE` varE mv\n                          return $\n                            [| Array |] `appE`\n                              (varE 'V.create `appE` doE (newMV : stmts ++ [ret]))\n       match (conP conName $ map varP args)\n         (normalB $ sumToValue opts multiCons (null ts) conName js)\n         []\nargsToValue jc tjs opts multiCons (RecC conName ts)\n  = case (unwrapUnaryRecords opts, not multiCons, ts) of\n        (True, True, [(_, st, ty)]) -> argsToValue jc tjs opts multiCons\n                                         (NormalC conName [(st, ty)])\n        _ -> do (argTys, tvMap) <- reifyConTys jc tjs conName\n                args <- newNameList \"arg\" $ length ts\n                let exp = [| A.object |] `appE` pairs\n                    pairs\n                      | omitNothingFields opts =\n                        infixApp maybeFields [| (++) |] restFields\n                      | otherwise = listE $ map toPair argCons\n                    argCons = zip3 args argTys ts\n                    maybeFields = [| catMaybes |] `appE` listE (map maybeToPair maybes)\n                    restFields = listE $ map toPair rest\n                    (maybes, rest) = partition isMaybe argCons\n                    maybeToPair (arg, argTy, (field, _, _))\n                      = infixApp\n                          ([| keyValuePairWith |] `appE`\n                             dispatchToJSON jc conName tvMap argTy\n                             `appE` toFieldName field)\n                          [| (<$>) |]\n                          (varE arg)\n                    toPair (arg, argTy, (field, _, _))\n                      = [| keyValuePairWith |] `appE`\n                          dispatchToJSON jc conName tvMap argTy\n                          `appE` toFieldName field\n                          `appE` varE arg\n                    toFieldName field = [| T.pack |] `appE` fieldLabelExp opts field\n                match (conP conName $ map varP args)\n                  (normalB $\n                     if multiCons then\n                       case sumEncoding opts of\n                           TwoElemArray -> [| toJSON |] `appE` tupE [conStr opts conName, exp]\n                           TaggedObject{tagFieldName} -> [| A.object |] `appE`\n                                                           infixApp\n                                                             (infixApp [| T.pack tagFieldName |]\n                                                                [| (.=) |]\n                                                                (conStr opts conName))\n                                                             [| (:) |]\n                                                             pairs\n                           ObjectWithSingleField -> [| A.object |] `appE`\n                                                      listE\n                                                        [infixApp (conTxt opts conName) [| (.=) |]\n                                                           exp]\n                           UntaggedValue -> exp\n                       else exp)\n                  []\nargsToValue jc tjs opts multiCons (InfixC _ conName _)\n  = do ([alTy, arTy], tvMap) <- reifyConTys jc tjs conName\n       al <- newName \"argL\"\n       ar <- newName \"argR\"\n       match (infixP (varP al) conName (varP ar))\n         (normalB $\n            sumToValue opts multiCons False conName $\n              [| toJSON |] `appE`\n                listE\n                  [dispatchToJSON jc conName tvMap aTy `appE` varE a |\n                   (a, aTy) <- [(al, alTy), (ar, arTy)]])\n         []\nargsToValue jc tjs opts multiCons (ForallC _ _ con)\n  = argsToValue jc tjs opts multiCons con\nargsToValue jc tjs opts multiCons (GadtC conNames ts _)\n  = argsToValue jc tjs opts multiCons $ NormalC (head conNames) ts\nargsToValue jc tjs opts multiCons (RecGadtC conNames ts _)\n  = argsToValue jc tjs opts multiCons $ RecC (head conNames) ts"],"instances":[],"language":{"extensions":["BangPatterns","FlexibleInstances","NamedFieldPuns","NoImplicitPrelude","UndecidableInstances","TemplateHaskellQuotes","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards","TemplateHaskell"],"isInstance":false}}