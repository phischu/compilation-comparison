{"sliceID":7539044929494392735,"uses":[{"reference":{"otherSlice":8818741453000450561},"usedName":{"typeName":{"identifier":"Unbox"}},"qualification":null},{"reference":{"otherSlice":4641953017354057066},"usedName":{"typeName":{"identifier":"MVector"}},"qualification":"M"},{"reference":{"otherSlice":7751570579972356864},"usedName":{"typeName":{"identifier":"MVector"}},"qualification":null},{"reference":{"builtinModule":"Data.Complex"},"usedName":{"typeName":{"identifier":"Complex"}},"qualification":null},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicLength"}},"qualification":"M"},{"reference":{"otherSlice":7751570579972356864},"usedName":{"constructorName":{"identifier":"MV_Complex"},"constructorTypeName":{"identifier":"MVector"}},"qualification":null},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicUnsafeSlice"}},"qualification":"M"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicOverlaps"}},"qualification":"M"},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicUnsafeNew"}},"qualification":"M"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"liftM"}},"qualification":null},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicInitialize"}},"qualification":"M"},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicUnsafeReplicate"}},"qualification":"M"},{"reference":{"builtinModule":"Data.Complex"},"usedName":{"constructorName":{"operator":":+"},"constructorTypeName":{"identifier":"Complex"}},"qualification":null},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicUnsafeRead"}},"qualification":"M"},{"reference":{"builtinModule":"Data.Tuple"},"usedName":{"valueName":{"identifier":"uncurry"}},"qualification":null},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicUnsafeWrite"}},"qualification":"M"},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicClear"}},"qualification":"M"},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicSet"}},"qualification":"M"},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicUnsafeCopy"}},"qualification":"M"},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicUnsafeMove"}},"qualification":"M"},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicUnsafeGrow"}},"qualification":"M"}],"fragment":["instance (Unbox a) => M.MVector MVector (Complex a) where\n        {-# INLINE basicLength #-}\n        \n        {-# INLINE basicUnsafeSlice #-}\n        \n        {-# INLINE basicOverlaps #-}\n        \n        {-# INLINE basicUnsafeNew #-}\n        \n        {-# INLINE basicInitialize #-}\n        \n        {-# INLINE basicUnsafeReplicate #-}\n        \n        {-# INLINE basicUnsafeRead #-}\n        \n        {-# INLINE basicUnsafeWrite #-}\n        \n        {-# INLINE basicClear #-}\n        \n        {-# INLINE basicSet #-}\n        \n        {-# INLINE basicUnsafeCopy #-}\n        \n        {-# INLINE basicUnsafeGrow #-}\n        basicLength (MV_Complex v) = M.basicLength v\n        basicUnsafeSlice i n (MV_Complex v)\n          = MV_Complex $ M.basicUnsafeSlice i n v\n        basicOverlaps (MV_Complex v1) (MV_Complex v2)\n          = M.basicOverlaps v1 v2\n        basicUnsafeNew n = MV_Complex `liftM` M.basicUnsafeNew n\n        basicInitialize (MV_Complex v) = M.basicInitialize v\n        basicUnsafeReplicate n (x :+ y)\n          = MV_Complex `liftM` M.basicUnsafeReplicate n (x, y)\n        basicUnsafeRead (MV_Complex v) i\n          = uncurry (:+) `liftM` M.basicUnsafeRead v i\n        basicUnsafeWrite (MV_Complex v) i (x :+ y)\n          = M.basicUnsafeWrite v i (x, y)\n        basicClear (MV_Complex v) = M.basicClear v\n        basicSet (MV_Complex v) (x :+ y) = M.basicSet v (x, y)\n        basicUnsafeCopy (MV_Complex v1) (MV_Complex v2)\n          = M.basicUnsafeCopy v1 v2\n        basicUnsafeMove (MV_Complex v1) (MV_Complex v2)\n          = M.basicUnsafeMove v1 v2\n        basicUnsafeGrow (MV_Complex v) n\n          = MV_Complex `liftM` M.basicUnsafeGrow v n"],"instances":[],"language":{"extensions":["BangPatterns","MultiParamTypeClasses","TypeFamilies","FlexibleContexts","DeriveDataTypeable","StandaloneDeriving","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":true}}