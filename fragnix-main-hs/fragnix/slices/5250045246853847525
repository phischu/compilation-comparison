{"sliceID":5250045246853847525,"uses":[{"reference":{"otherSlice":7483143390726870398},"usedName":{"valueName":{"identifier":"fromChunks"}},"qualification":"L"},{"reference":{"builtinModule":"Data.Functor"},"usedName":{"valueName":{"operator":"<$>"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"otherSlice":6258463563638113276},"usedName":{"valueName":{"identifier":"length"}},"qualification":"B"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">="}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Right"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":3674330957874520992},"usedName":{"valueName":{"identifier":"splitAt"}},"qualification":"B"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Left"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":5057618384796216480},"usedName":{"valueName":{"identifier":"get"}},"qualification":null},{"reference":{"otherSlice":2537403508577114982},"usedName":{"valueName":{"identifier":"put"}},"qualification":null},{"reference":{"otherSlice":2109377013281436257},"usedName":{"valueName":{"identifier":"empty"}},"qualification":"B"},{"reference":{"otherSlice":7439085034522577432},"usedName":{"valueName":{"identifier":"demandInput"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fmap"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Int"},"usedName":{"typeName":{"identifier":"Int64"}},"qualification":null},{"reference":{"otherSlice":2395809604474213102},"usedName":{"typeName":{"identifier":"Get"}},"qualification":null},{"reference":{"otherSlice":1699226608098321587},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"L"}],"fragment":["getLazyByteString :: Int64 -> Get L.ByteString","getLazyByteString n0 = L.fromChunks <$> go n0\n  where consume n str\n          | fromIntegral (B.length str) >= n =\n            Right (B.splitAt (fromIntegral n) str)\n          | otherwise = Left (fromIntegral (B.length str))\n        go n\n          = do str <- get\n               case consume n str of\n                   Left used -> do put B.empty\n                                   demandInput\n                                   fmap (str :) (go (n - used))\n                   Right (want, rest) -> do put rest\n                                            return [want]"],"instances":[],"language":{"extensions":["RankNTypes","MagicHash","BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}