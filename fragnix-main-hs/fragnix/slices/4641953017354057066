{"sliceID":4641953017354057066,"uses":[{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":3326759671840124085},"usedName":{"typeName":{"identifier":"PrimMonad"}},"qualification":null},{"reference":{"otherSlice":3326759671840124085},"usedName":{"typeName":{"identifier":"PrimState"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"*"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null}],"fragment":["class MVector v a where\n        basicLength :: v s a -> Int\n        \n        basicUnsafeSlice :: Int -> Int -> v s a -> v s a\n        \n        basicOverlaps :: v s a -> v s a -> Bool\n        \n        basicUnsafeNew :: PrimMonad m => Int -> m (v (PrimState m) a)\n        \n        basicInitialize :: PrimMonad m => v (PrimState m) a -> m ()\n        \n        basicUnsafeReplicate ::\n                               PrimMonad m => Int -> a -> m (v (PrimState m) a)\n        \n        basicUnsafeRead :: PrimMonad m => v (PrimState m) a -> Int -> m a\n        \n        basicUnsafeWrite ::\n                           PrimMonad m => v (PrimState m) a -> Int -> a -> m ()\n        \n        basicClear :: PrimMonad m => v (PrimState m) a -> m ()\n        \n        basicSet :: PrimMonad m => v (PrimState m) a -> a -> m ()\n        \n        basicUnsafeCopy ::\n                          PrimMonad m => v (PrimState m) a -> v (PrimState m) a -> m ()\n        \n        basicUnsafeMove ::\n                          PrimMonad m => v (PrimState m) a -> v (PrimState m) a -> m ()\n        \n        basicUnsafeGrow ::\n                          PrimMonad m => v (PrimState m) a -> Int -> m (v (PrimState m) a)\n        \n        {-# INLINE basicUnsafeReplicate #-}\n        basicUnsafeReplicate n x\n          = do v <- basicUnsafeNew n\n               basicSet v x\n               return v\n        \n        {-# INLINE basicClear #-}\n        basicClear _ = return ()\n        \n        {-# INLINE basicSet #-}\n        basicSet !v x\n          | n == 0 = return ()\n          | otherwise =\n            do basicUnsafeWrite v 0 x\n               do_set 1\n          where !n = basicLength v\n                do_set i\n                  | 2 * i < n =\n                    do basicUnsafeCopy (basicUnsafeSlice i i v)\n                         (basicUnsafeSlice 0 i v)\n                       do_set (2 * i)\n                  | otherwise =\n                    basicUnsafeCopy (basicUnsafeSlice i (n - i) v)\n                      (basicUnsafeSlice 0 (n - i) v)\n        \n        {-# INLINE basicUnsafeCopy #-}\n        basicUnsafeCopy !dst !src = do_copy 0\n          where !n = basicLength src\n                do_copy i\n                  | i < n =\n                    do x <- basicUnsafeRead src i\n                       basicUnsafeWrite dst i x\n                       do_copy (i + 1)\n                  | otherwise = return ()\n        \n        {-# INLINE basicUnsafeMove #-}\n        basicUnsafeMove !dst !src\n          | basicOverlaps dst src =\n            do srcCopy <- basicUnsafeNew (basicLength src)\n               basicUnsafeCopy srcCopy src\n               basicUnsafeCopy dst srcCopy\n          | otherwise = basicUnsafeCopy dst src\n        \n        {-# INLINE basicUnsafeGrow #-}\n        basicUnsafeGrow v by\n          = do v' <- basicUnsafeNew (n + by)\n               basicUnsafeCopy (basicUnsafeSlice 0 n v') v\n               return v'\n          where n = basicLength v"],"instances":[{"instanceID":8617401166756095581,"instancePart":"OfClass"},{"instanceID":8030287204500372130,"instancePart":"OfClass"},{"instanceID":5635169578741251020,"instancePart":"OfClass"},{"instanceID":6180085604535112508,"instancePart":"OfClass"},{"instanceID":7587573615250928213,"instancePart":"OfClass"},{"instanceID":9157072024571841245,"instancePart":"OfClass"},{"instanceID":5296428119983378538,"instancePart":"OfClass"},{"instanceID":4436654459127400575,"instancePart":"OfClass"},{"instanceID":7721233508848059334,"instancePart":"OfClass"},{"instanceID":3995225882822588859,"instancePart":"OfClass"},{"instanceID":1415534360414303837,"instancePart":"OfClass"},{"instanceID":5491493023168649824,"instancePart":"OfClass"},{"instanceID":3433204014451064374,"instancePart":"OfClass"},{"instanceID":6362602682712152113,"instancePart":"OfClass"},{"instanceID":6887693967901740337,"instancePart":"OfClass"},{"instanceID":7192229283202772201,"instancePart":"OfClass"},{"instanceID":7539044929494392735,"instancePart":"OfClass"},{"instanceID":4932253374405025221,"instancePart":"OfClass"},{"instanceID":4326289686411975228,"instancePart":"OfClass"},{"instanceID":356721782312536759,"instancePart":"OfClass"},{"instanceID":1562171035165048534,"instancePart":"OfClass"},{"instanceID":1028931259498864325,"instancePart":"OfClass"},{"instanceID":2699307833251076611,"instancePart":"OfClass"},{"instanceID":7246838505764125945,"instancePart":"OfClass"}],"language":{"extensions":["MultiParamTypeClasses","BangPatterns","TypeFamilies","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}