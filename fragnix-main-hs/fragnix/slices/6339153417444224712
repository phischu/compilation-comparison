{"sliceID":6339153417444224712,"uses":[{"reference":{"otherSlice":7781639745957293926},"usedName":{"typeName":{"identifier":"Binary"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Char"}},"qualification":null},{"reference":{"otherSlice":7781639745957293926},"usedName":{"valueName":{"identifier":"put"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<="}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"builtinModule":"GHC.Word"},"usedName":{"typeName":{"identifier":"Word8"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"operator":".|."}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"error"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"ord"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"operator":".&."}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"identifier":"shiftR"}},"qualification":null},{"reference":{"otherSlice":7781639745957293926},"usedName":{"valueName":{"identifier":"get"}},"qualification":null},{"reference":{"builtinModule":"Control.Monad"},"usedName":{"valueName":{"identifier":"liftM"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"flip"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"identifier":"shiftL"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"identifier":"xor"}},"qualification":null},{"reference":{"builtinModule":"Prelude"},"usedName":{"valueName":{"operator":"$!"}},"qualification":null},{"reference":{"builtinModule":"GHC.Char"},"usedName":{"valueName":{"identifier":"chr"}},"qualification":null}],"fragment":["instance Binary Char where\n        put a\n          | c <= 127 = put (fromIntegral c :: Word8)\n          | c <= 2047 =\n            do put (192 .|. y)\n               put (128 .|. z)\n          | c <= 65535 =\n            do put (224 .|. x)\n               put (128 .|. y)\n               put (128 .|. z)\n          | c <= 1114111 =\n            do put (240 .|. w)\n               put (128 .|. x)\n               put (128 .|. y)\n               put (128 .|. z)\n          | otherwise = error \"Not a valid Unicode code point\"\n          where c = ord a\n                \n                z, y, x, w :: Word8\n                z = fromIntegral (c .&. 63)\n                y = fromIntegral (shiftR c 6 .&. 63)\n                x = fromIntegral (shiftR c 12 .&. 63)\n                w = fromIntegral (shiftR c 18 .&. 7)\n        get\n          = do let getByte = liftM (fromIntegral :: Word8 -> Int) get\n                   shiftL6 = flip shiftL 6 :: Int -> Int\n               w <- getByte\n               r <- case () of\n                        _ | w < 128 -> return w\n                          | w < 224 ->\n                            do x <- liftM (xor 128) getByte\n                               return (x .|. shiftL6 (xor 192 w))\n                          | w < 240 ->\n                            do x <- liftM (xor 128) getByte\n                               y <- liftM (xor 128) getByte\n                               return (y .|. shiftL6 (x .|. shiftL6 (xor 224 w)))\n                          | otherwise ->\n                            do x <- liftM (xor 128) getByte\n                               y <- liftM (xor 128) getByte\n                               z <- liftM (xor 128) getByte\n                               return (z .|. shiftL6 (y .|. shiftL6 (x .|. shiftL6 (xor 240 w))))\n               return $! chr r"],"instances":[],"language":{"extensions":["FlexibleContexts","DefaultSignatures","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":true}}