{"sliceID":1173046406878794716,"uses":[{"reference":{"builtinModule":"Data.Either"},"usedName":{"typeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":201949249242916638},"usedName":{"typeName":{"identifier":"Except"}},"qualification":null},{"reference":{"otherSlice":4927389009147171331},"usedName":{"valueName":{"identifier":"mapExceptT"}},"qualification":null},{"reference":{"builtinModule":"Data.Functor.Identity"},"usedName":{"constructorName":{"identifier":"Identity"},"constructorTypeName":{"identifier":"Identity"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"builtinModule":"Data.Functor.Identity"},"usedName":{"valueName":{"identifier":"runIdentity"}},"qualification":null}],"fragment":["mapExcept ::\n          (Either e a -> Either e' b) -> Except e a -> Except e' b","mapExcept f = mapExceptT (Identity . f . runIdentity)"],"instances":[],"language":{"extensions":["AutoDeriveTypeable","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}