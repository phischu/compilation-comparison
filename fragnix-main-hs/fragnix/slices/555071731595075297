{"sliceID":555071731595075297,"uses":[{"reference":{"otherSlice":7459617743278403755},"usedName":{"valueName":{"identifier":"empty"}},"qualification":"B"},{"reference":{"otherSlice":4010822550476529195},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"B"},{"reference":{"otherSlice":7126746090334860369},"usedName":{"typeName":{"identifier":"CodePoint"}},"qualification":null},{"reference":{"otherSlice":2608118954418127553},"usedName":{"typeName":{"identifier":"DecoderState"}},"qualification":null},{"reference":{"otherSlice":2109238313023267639},"usedName":{"typeName":{"identifier":"DecodeResult"}},"qualification":null},{"reference":{"otherSlice":7202692338078551997},"usedName":{"valueName":{"identifier":"null"}},"qualification":"B"},{"reference":{"otherSlice":2109238313023267639},"usedName":{"constructorName":{"identifier":"DecodeResultSuccess"},"constructorTypeName":{"identifier":"DecodeResult"}},"qualification":null},{"reference":{"otherSlice":4524776170727728111},"usedName":{"valueName":{"identifier":"empty"}},"qualification":"T"},{"reference":{"otherSlice":2109238313023267639},"usedName":{"constructorName":{"identifier":"DecodeResultFailure"},"constructorTypeName":{"identifier":"DecodeResult"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":4010822550476529195},"usedName":{"constructorName":{"identifier":"PS"},"constructorTypeName":{"identifier":"ByteString"}},"qualification":null},{"reference":{"builtinModule":"GHC.ST"},"usedName":{"valueName":{"identifier":"runST"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO"},"usedName":{"valueName":{"identifier":"unsafeIOToST"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"=<<"}},"qualification":null},{"reference":{"otherSlice":5202209142239390005},"usedName":{"valueName":{"identifier":"new"}},"qualification":"A"},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":7847819776717226819},"usedName":{"typeName":{"identifier":"MArray"}},"qualification":"A"},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"builtinModule":"Foreign.ForeignPtr"},"usedName":{"valueName":{"identifier":"withForeignPtr"}},"qualification":null},{"reference":{"builtinModule":"Foreign.Marshal.Utils"},"usedName":{"valueName":{"identifier":"with"}},"qualification":null},{"reference":{"builtinModule":"Foreign.C.Types"},"usedName":{"typeName":{"identifier":"CSize"}},"qualification":null},{"reference":{"builtinModule":"GHC.Ptr"},"usedName":{"valueName":{"identifier":"nullPtr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Ptr"},"usedName":{"valueName":{"identifier":"plusPtr"}},"qualification":null},{"reference":{"builtinModule":"Foreign.Storable"},"usedName":{"valueName":{"identifier":"poke"}},"qualification":null},{"reference":{"otherSlice":6529518873971531648},"usedName":{"valueName":{"identifier":"c_decode_utf8_with_state"}},"qualification":null},{"reference":{"otherSlice":7847819776717226819},"usedName":{"valueName":{"identifier":"maBA"}},"qualification":"A"},{"reference":{"builtinModule":"Foreign.Storable"},"usedName":{"valueName":{"identifier":"peek"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO"},"usedName":{"valueName":{"identifier":"unsafeSTToIO"}},"qualification":null},{"reference":{"otherSlice":2599347847448508561},"usedName":{"valueName":{"identifier":"unsafeFreeze"}},"qualification":"A"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$!"}},"qualification":null},{"reference":{"otherSlice":8422374095318209233},"usedName":{"valueName":{"identifier":"text"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"builtinModule":"GHC.Ptr"},"usedName":{"valueName":{"identifier":"minusPtr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"not"}},"qualification":null},{"reference":{"otherSlice":1423595995722349223},"usedName":{"valueName":{"identifier":"null"}},"qualification":"T"},{"reference":{"otherSlice":188135503957969977},"usedName":{"valueName":{"identifier":"unsafeDrop"}},"qualification":"B"},{"reference":{"otherSlice":6987230544343436129},"usedName":{"valueName":{"identifier":"append"}},"qualification":"B"},{"reference":{"builtinModule":"GHC.Prim"},"usedName":{"valueName":{"identifier":"seq"}},"qualification":null}],"fragment":["decodeUtf8 :: B.ByteString -> DecodeResult","decodeUtf8 = decodeChunk B.empty 0 0\n  where decodeChunkCheck ::\n                         B.ByteString ->\n                           CodePoint -> DecoderState -> B.ByteString -> DecodeResult\n        decodeChunkCheck bsOld codepoint state bs\n          | B.null bs =\n            if B.null bsOld then DecodeResultSuccess T.empty decodeUtf8 else\n              DecodeResultFailure T.empty bsOld\n          | otherwise = decodeChunk bsOld codepoint state bs\n        \n        decodeChunk ::\n                    B.ByteString ->\n                      CodePoint -> DecoderState -> B.ByteString -> DecodeResult\n        decodeChunk bsOld codepoint0 state0 bs@(PS fp off len)\n          = runST $ (unsafeIOToST . decodeChunkToBuffer) =<< A.new (len + 1)\n          where decodeChunkToBuffer :: A.MArray s -> IO DecodeResult\n                decodeChunkToBuffer dest\n                  = withForeignPtr fp $\n                      \\ ptr ->\n                        with (0 :: CSize) $\n                          \\ destOffPtr ->\n                            with codepoint0 $\n                              \\ codepointPtr ->\n                                with state0 $\n                                  \\ statePtr ->\n                                    with nullPtr $\n                                      \\ curPtrPtr ->\n                                        let end = ptr `plusPtr` (off + len)\n                                            loop curPtr\n                                              = do poke curPtrPtr curPtr\n                                                   _ <- c_decode_utf8_with_state (A.maBA dest)\n                                                          destOffPtr\n                                                          curPtrPtr\n                                                          end\n                                                          codepointPtr\n                                                          statePtr\n                                                   state <- peek statePtr\n                                                   n <- peek destOffPtr\n                                                   chunkText <- unsafeSTToIO $\n                                                                  do arr <- A.unsafeFreeze dest\n                                                                     return $!\n                                                                       text arr 0 (fromIntegral n)\n                                                   lastPtr <- peek curPtrPtr\n                                                   let left = lastPtr `minusPtr` curPtr\n                                                       unused\n                                                         | not $ T.null chunkText =\n                                                           B.unsafeDrop left bs\n                                                         | B.null bsOld = bs\n                                                         | otherwise = B.append bsOld bs\n                                                   case unused `seq` state of\n                                                       12 -> return $!\n                                                               DecodeResultFailure chunkText unused\n                                                       _ -> do codepoint <- peek codepointPtr\n                                                               return $!\n                                                                 DecodeResultSuccess chunkText $!\n                                                                   decodeChunkCheck unused codepoint\n                                                                     state\n                                          in loop (ptr `plusPtr` off)"],"instances":[],"language":{"extensions":["BangPatterns","ForeignFunctionInterface","GeneralizedNewtypeDeriving","MagicHash","Rank2Types","UnliftedFFITypes","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}