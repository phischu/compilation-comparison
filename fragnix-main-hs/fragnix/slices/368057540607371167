{"sliceID":368057540607371167,"uses":[{"reference":{"otherSlice":2103754850612341338},"usedName":{"constructorName":{"identifier":"EmptyT"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"otherSlice":2103754850612341338},"usedName":{"constructorName":{"identifier":"Single"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"otherSlice":2103754850612341338},"usedName":{"constructorName":{"identifier":"Deep"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"otherSlice":3709404780400571810},"usedName":{"valueName":{"identifier":"updateDigit"}},"qualification":null},{"reference":{"otherSlice":1456146997416341410},"usedName":{"valueName":{"identifier":"adjustTree"}},"qualification":null},{"reference":{"otherSlice":8884597007449213449},"usedName":{"valueName":{"identifier":"updateNode"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":2658389187921074114},"usedName":{"valueName":{"identifier":"size"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":3555949835188142327},"usedName":{"typeName":{"identifier":"Elem"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"otherSlice":2103754850612341338},"usedName":{"typeName":{"identifier":"FingerTree"}},"qualification":null}],"fragment":["updateTree ::\n           Elem a -> Int -> FingerTree (Elem a) -> FingerTree (Elem a)","updateTree _ !_ EmptyT = EmptyT\nupdateTree v _i (Single _) = Single v\nupdateTree v i (Deep s pr m sf)\n  | i < spr = Deep s (updateDigit v i pr) m sf\n  | i < spm =\n    let !m' = adjustTree (updateNode v) (i - spr) m in Deep s pr m' sf\n  | otherwise = Deep s pr m (updateDigit v (i - spm) sf)\n  where spr = size pr\n        spm = spr + size m"],"instances":[],"language":{"extensions":["BangPatterns","DeriveDataTypeable","StandaloneDeriving","FlexibleInstances","ScopedTypeVariables","DeriveGeneric","TypeFamilies","PatternSynonyms","ViewPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}