{"sliceID":1442112398648689634,"uses":[{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":2530620850181640805},"usedName":{"valueName":{"identifier":"breakOn"}},"qualification":"Search"},{"reference":{"otherSlice":675696118971413715},"usedName":{"valueName":{"identifier":"null"}},"qualification":"S"},{"reference":{"otherSlice":6258463563638113276},"usedName":{"valueName":{"identifier":"length"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":1975004662051247232},"usedName":{"constructorName":{"identifier":"FoundBound"},"constructorTypeName":{"identifier":"Bound"}},"qualification":null},{"reference":{"otherSlice":6985366053944096403},"usedName":{"valueName":{"identifier":"drop"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"max"}},"qualification":null},{"reference":{"otherSlice":1975004662051247232},"usedName":{"constructorName":{"identifier":"NoBound"},"constructorTypeName":{"identifier":"Bound"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">"}},"qualification":null},{"reference":{"otherSlice":1975004662051247232},"usedName":{"constructorName":{"identifier":"PartialBound"},"constructorTypeName":{"identifier":"Bound"}},"qualification":null},{"reference":{"otherSlice":3093287715237579077},"usedName":{"valueName":{"identifier":"take"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"False"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":6441923229829217147},"usedName":{"valueName":{"identifier":"index"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"True"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":8642306666063513779},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"S"},{"reference":{"otherSlice":1975004662051247232},"usedName":{"typeName":{"identifier":"Bound"}},"qualification":null}],"fragment":["findBound :: S.ByteString -> S.ByteString -> Bound","findBound b bs = handleBreak $ Search.breakOn b bs\n  where handleBreak (h, t)\n          | S.null t = go [lowBound .. S.length bs - 1]\n          | otherwise = FoundBound h $ S.drop (S.length b) t\n        lowBound = max 0 $ S.length bs - S.length b\n        go [] = NoBound\n        go (i : is)\n          | mismatch [0 .. S.length b - 1] [i .. S.length bs - 1] = go is\n          | otherwise =\n            let endI = i + S.length b in\n              if endI > S.length bs then PartialBound else\n                FoundBound (S.take i bs) (S.drop endI bs)\n        mismatch [] _ = False\n        mismatch _ [] = False\n        mismatch (x : xs) (y : ys)\n          | S.index b x == S.index bs y = mismatch xs ys\n          | otherwise = True"],"instances":[],"language":{"extensions":["OverloadedStrings","ExistentialQuantification","PatternGuards","TypeFamilies","RankNTypes","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll"],"isInstance":false}}