{"sliceID":2888093465631560178,"uses":[{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fail"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"++"}},"qualification":null},{"reference":{"builtinModule":"GHC.Show"},"usedName":{"valueName":{"identifier":"show"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"flip"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"find"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"any"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"otherSlice":8681288739400273612},"usedName":{"valueName":{"identifier":"getConName"}},"qualification":null},{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"error"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"String"}},"qualification":null}],"fragment":["withType ::\n         Name ->\n           (Name -> Cxt -> [TyVarBndr] -> [Con] -> Maybe [Type] -> Q a) -> Q a","withType name f\n  = do info <- reify name\n       case info of\n           TyConI dec -> case dec of\n                             DataD ctxt _ tvbs _ cons _ -> f name ctxt tvbs cons Nothing\n                             NewtypeD ctxt _ tvbs _ con _ -> f name ctxt tvbs [con] Nothing\n                             other -> fail $ ns ++ \"Unsupported type: \" ++ show other\n           DataConI _ _ parentName -> do parentInfo <- reify parentName\n                                         case parentInfo of\n                                             FamilyI (DataFamilyD _ tvbs _) decs -> let instDec\n                                                                                          = flip\n                                                                                              find\n                                                                                              decs\n                                                                                              $\n                                                                                              \\ dec\n                                                                                                ->\n                                                                                                case\n                                                                                                  dec\n                                                                                                  of\n                                                                                                    DataInstD\n                                                                                                      _\n                                                                                                      _\n                                                                                                      _\n                                                                                                      _\n                                                                                                      cons\n                                                                                                      _ -> any\n                                                                                                             ((name ==)\n                                                                                                                .\n                                                                                                                getConName)\n                                                                                                             cons\n                                                                                                    NewtypeInstD\n                                                                                                      _\n                                                                                                      _\n                                                                                                      _\n                                                                                                      _\n                                                                                                      con\n                                                                                                      _ -> name\n                                                                                                             ==\n                                                                                                             getConName\n                                                                                                               con\n                                                                                                    _ -> error\n                                                                                                           $\n                                                                                                           ns\n                                                                                                             ++\n                                                                                                             \"Must be a data or newtype instance.\"\n                                                                                      in\n                                                                                      case instDec\n                                                                                        of\n                                                                                          Just\n                                                                                            (DataInstD\n                                                                                               ctxt\n                                                                                               _\n                                                                                               instTys\n                                                                                               _\n                                                                                               cons\n                                                                                               _) -> f parentName\n                                                                                                       ctxt\n                                                                                                       tvbs\n                                                                                                       cons\n                                                                                                       $\n                                                                                                       Just\n                                                                                                         instTys\n                                                                                          Just\n                                                                                            (NewtypeInstD\n                                                                                               ctxt\n                                                                                               _\n                                                                                               instTys\n                                                                                               _ con\n                                                                                               _) -> f parentName\n                                                                                                       ctxt\n                                                                                                       tvbs\n                                                                                                       [con]\n                                                                                                       $\n                                                                                                       Just\n                                                                                                         instTys\n                                                                                          _ -> fail\n                                                                                                 $\n                                                                                                 ns\n                                                                                                   ++\n                                                                                                   \"Could not find data or newtype instance constructor.\"\n                                             _ -> fail $\n                                                    ns ++\n                                                      \"Data constructor \" ++\n                                                        show name ++\n                                                          \" is not from a data family instance constructor.\"\n           FamilyI DataFamilyD{} _ -> fail $\n                                        ns ++\n                                          \"Cannot use a data family name. Use a data family instance constructor instead.\"\n           _ -> fail $\n                  ns ++\n                    \"I need the name of a plain data type constructor, \" ++\n                      \"or a data family instance constructor.\"\n  where ns :: String\n        ns = \"Data.Aeson.TH.withType: \""],"instances":[],"language":{"extensions":["BangPatterns","FlexibleInstances","NamedFieldPuns","NoImplicitPrelude","UndecidableInstances","TemplateHaskellQuotes","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards","TemplateHaskell"],"isInstance":false}}