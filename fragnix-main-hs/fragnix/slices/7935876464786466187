{"sliceID":7935876464786466187,"uses":[{"reference":{"otherSlice":3004867841528755180},"usedName":{"valueName":{"identifier":"unsafeNew"}},"qualification":null},{"reference":{"otherSlice":2351267302275200250},"usedName":{"valueName":{"identifier":"foldlM"}},"qualification":"Stream"},{"reference":{"otherSlice":593498834273944631},"usedName":{"valueName":{"identifier":"chunks"}},"qualification":"MBundle"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":2686125781807725101},"usedName":{"valueName":{"identifier":"checkSlice"}},"qualification":"Ck"},{"reference":{"otherSlice":4956884951746098628},"usedName":{"constructorName":{"identifier":"Internal"},"constructorTypeName":{"identifier":"Checks"}},"qualification":"Ck"},{"reference":{"otherSlice":6402119587946108601},"usedName":{"valueName":{"identifier":"length"}},"qualification":null},{"reference":{"otherSlice":9056219066746679510},"usedName":{"valueName":{"identifier":"unsafeSlice"}},"qualification":null},{"reference":{"otherSlice":6147061234059741725},"usedName":{"constructorName":{"identifier":"Chunk"},"constructorTypeName":{"identifier":"Chunk"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicLength"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"otherSlice":6095655523706744988},"usedName":{"valueName":{"identifier":"unsafeGrow"}},"qualification":null},{"reference":{"otherSlice":5199450268788043208},"usedName":{"valueName":{"identifier":"delay_inline"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"max"}},"qualification":null},{"reference":{"otherSlice":7459853087046681430},"usedName":{"valueName":{"identifier":"enlarge_delta"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicUnsafeSlice"}},"qualification":null},{"reference":{"otherSlice":3326759671840124085},"usedName":{"typeName":{"identifier":"PrimMonad"}},"qualification":null},{"reference":{"otherSlice":8572689894313737623},"usedName":{"typeName":{"identifier":"Vector"}},"qualification":"V"},{"reference":{"otherSlice":1801160994859441906},"usedName":{"typeName":{"identifier":"MBundle"}},"qualification":null},{"reference":{"otherSlice":251190476694700392},"usedName":{"typeName":{"identifier":"Mutable"}},"qualification":"V"},{"reference":{"otherSlice":3326759671840124085},"usedName":{"typeName":{"identifier":"PrimState"}},"qualification":null}],"fragment":["vmunstreamUnknown ::\n                    (PrimMonad m, V.Vector v a) =>\n                    MBundle m v a -> m (V.Mutable v (PrimState m) a)","vmunstreamUnknown s\n  = do v <- unsafeNew 0\n       (v', n) <- Stream.foldlM copyChunk (v, 0) (MBundle.chunks s)\n       return $\n         ((Ck.checkSlice \"Data/Vector/Generic/Mutable.hs\" 428) Ck.Internal)\n           \"munstreamUnknown\"\n           0\n           n\n           (length v')\n           $ unsafeSlice 0 n v'\n  where {-# INLINE [0] copyChunk #-}\n        copyChunk (v, i) (Chunk n f)\n          = do let j = i + n\n               v' <- if basicLength v < j then\n                       unsafeGrow v\n                         (delay_inline max (enlarge_delta v) (j - basicLength v))\n                       else return v\n               ((Ck.checkSlice \"Data/Vector/Generic/Mutable.hs\" 438) Ck.Internal)\n                 \"munstreamUnknown.copyChunk\"\n                 i\n                 n\n                 (length v')\n                 $ f (basicUnsafeSlice i n v')\n               return (v', j)"],"instances":[],"language":{"extensions":["MultiParamTypeClasses","FlexibleContexts","BangPatterns","TypeFamilies","ScopedTypeVariables","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}