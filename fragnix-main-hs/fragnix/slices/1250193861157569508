{"sliceID":1250193861157569508,"uses":[{"reference":{"builtinModule":"System.IO.Error"},"usedName":{"valueName":{"identifier":"catchIOError"}},"qualification":null},{"reference":{"builtinModule":"GHC.Exception"},"usedName":{"valueName":{"identifier":"throw"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"System.IO.Error"},"usedName":{"valueName":{"identifier":"ioeSetLocation"}},"qualification":null},{"reference":{"builtinModule":"Control.Exception.Base"},"usedName":{"valueName":{"identifier":"bracket"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Handle.FD"},"usedName":{"valueName":{"identifier":"openBinaryFile"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.IOMode"},"usedName":{"constructorName":{"identifier":"ReadMode"},"constructorTypeName":{"identifier":"IOMode"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Handle"},"usedName":{"valueName":{"identifier":"hClose"}},"qualification":null},{"reference":{"builtinModule":"Control.Exception.Base"},"usedName":{"valueName":{"identifier":"bracketOnError"}},"qualification":null},{"reference":{"builtinModule":"Foreign.Marshal.Alloc"},"usedName":{"valueName":{"identifier":"allocaBytes"}},"qualification":null},{"reference":{"otherSlice":5897849110831216850},"usedName":{"valueName":{"identifier":"copyPermissions"}},"qualification":null},{"reference":{"otherSlice":7134339478978281289},"usedName":{"valueName":{"identifier":"renameFile"}},"qualification":null},{"reference":{"builtinModule":"System.IO"},"usedName":{"valueName":{"identifier":"openBinaryTempFile"}},"qualification":null},{"reference":{"otherSlice":7083721189836194806},"usedName":{"valueName":{"identifier":"takeDirectory"}},"qualification":null},{"reference":{"otherSlice":7446628164996750809},"usedName":{"valueName":{"identifier":"removeFile"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Handle.Text"},"usedName":{"valueName":{"identifier":"hGetBuf"}},"qualification":null},{"reference":{"builtinModule":"Control.Monad"},"usedName":{"valueName":{"identifier":"when"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Handle.Text"},"usedName":{"valueName":{"identifier":"hPutBuf"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO"},"usedName":{"typeName":{"identifier":"FilePath"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null}],"fragment":["copyFile :: FilePath -> FilePath -> IO ()","copyFile fromFPath toFPath\n  = copy `catchIOError`\n      (\\ exc -> throw $ ioeSetLocation exc \"copyFile\")\n  where copy\n          = bracket (openBinaryFile fromFPath ReadMode) hClose $\n              \\ hFrom ->\n                bracketOnError openTmp cleanTmp $\n                  \\ (tmpFPath, hTmp) ->\n                    do allocaBytes bufferSize $ copyContents hFrom hTmp\n                       hClose hTmp\n                       ignoreIOExceptions $ copyPermissions fromFPath tmpFPath\n                       renameFile tmpFPath toFPath\n        openTmp\n          = openBinaryTempFile (takeDirectory toFPath) \".copyFile.tmp\"\n        cleanTmp (tmpFPath, hTmp)\n          = do ignoreIOExceptions $ hClose hTmp\n               ignoreIOExceptions $ removeFile tmpFPath\n        bufferSize = 1024\n        copyContents hFrom hTo buffer\n          = do count <- hGetBuf hFrom buffer bufferSize\n               when (count > 0) $\n                 do hPutBuf hTo buffer count\n                    copyContents hFrom hTo buffer\n        ignoreIOExceptions io = io `catchIOError` (\\ _ -> return ())"],"instances":[],"language":{"extensions":["NondecreasingIndentation","MultiParamTypeClasses","ExplicitForAll","PatternGuards"],"isInstance":false}}