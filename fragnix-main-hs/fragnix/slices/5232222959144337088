{"sliceID":5232222959144337088,"uses":[{"reference":{"otherSlice":9208044541903137161},"usedName":{"constructorName":{"identifier":"Seq"},"constructorTypeName":{"identifier":"Seq"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":3555949835188142327},"usedName":{"constructorName":{"identifier":"Elem"},"constructorTypeName":{"identifier":"Elem"}},"qualification":null},{"reference":{"otherSlice":3555949835188142327},"usedName":{"typeName":{"identifier":"Elem"}},"qualification":null},{"reference":{"otherSlice":2103754850612341338},"usedName":{"typeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"otherSlice":2103754850612341338},"usedName":{"constructorName":{"identifier":"EmptyT"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"otherSlice":2103754850612341338},"usedName":{"constructorName":{"identifier":"Single"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"otherSlice":2103754850612341338},"usedName":{"constructorName":{"identifier":"Deep"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"otherSlice":2658389187921074114},"usedName":{"valueName":{"identifier":"size"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"otherSlice":1673753023314990609},"usedName":{"typeName":{"identifier":"Node"}},"qualification":null},{"reference":{"otherSlice":2658389187921074114},"usedName":{"typeName":{"identifier":"Sized"}},"qualification":null},{"reference":{"otherSlice":6856618864151171204},"usedName":{"typeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"otherSlice":6856618864151171204},"usedName":{"constructorName":{"identifier":"One"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"otherSlice":6856618864151171204},"usedName":{"constructorName":{"identifier":"Two"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"otherSlice":6856618864151171204},"usedName":{"constructorName":{"identifier":"Three"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"otherSlice":6856618864151171204},"usedName":{"constructorName":{"identifier":"Four"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":1673753023314990609},"usedName":{"constructorName":{"identifier":"Node2"},"constructorTypeName":{"identifier":"Node"}},"qualification":null},{"reference":{"otherSlice":1673753023314990609},"usedName":{"constructorName":{"identifier":"Node3"},"constructorTypeName":{"identifier":"Node"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"otherSlice":9208044541903137161},"usedName":{"typeName":{"identifier":"Seq"}},"qualification":null}],"fragment":["splitMap ::\n         forall s a' b' .\n           (Int -> s -> (s, s)) -> (s -> a' -> b') -> s -> Seq a' -> Seq b'","splitMap splt f0 s0 (Seq xs0)\n  = Seq $ splitMapTreeE (\\ s' (Elem a) -> Elem (f0 s' a)) s0 xs0\n  where {-# INLINE splitMapTreeE #-}\n        \n        splitMapTreeE ::\n                      (s -> Elem y -> b) -> s -> FingerTree (Elem y) -> FingerTree b\n        splitMapTreeE _ _ EmptyT = EmptyT\n        splitMapTreeE f s (Single xs) = Single $ f s xs\n        splitMapTreeE f s (Deep n pr m sf)\n          = Deep n (splitMapDigit f prs pr)\n              (splitMapTreeN (\\ eta1 eta2 -> splitMapNode f eta1 eta2) ms m)\n              (splitMapDigit f sfs sf)\n          where !spr = size pr\n                !sm = n - spr - size sf\n                (prs, r) = splt spr s\n                (ms, sfs) = splt sm r\n        \n        splitMapTreeN ::\n                      (s -> Node a -> b) -> s -> FingerTree (Node a) -> FingerTree b\n        splitMapTreeN _ _ EmptyT = EmptyT\n        splitMapTreeN f s (Single xs) = Single $ f s xs\n        splitMapTreeN f s (Deep n pr m sf)\n          = Deep n (splitMapDigit f prs pr)\n              (splitMapTreeN (\\ eta1 eta2 -> splitMapNode f eta1 eta2) ms m)\n              (splitMapDigit f sfs sf)\n          where (prs, r) = splt (size pr) s\n                (ms, sfs) = splt (size m) r\n        \n        {-# INLINE splitMapDigit #-}\n        \n        splitMapDigit ::\n                        Sized a => (s -> a -> b) -> s -> Digit a -> Digit b\n        splitMapDigit f s (One a) = One (f s a)\n        splitMapDigit f s (Two a b) = Two (f first a) (f second b)\n          where (first, second) = splt (size a) s\n        splitMapDigit f s (Three a b c)\n          = Three (f first a) (f second b) (f third c)\n          where (first, r) = splt (size a) s\n                (second, third) = splt (size b) r\n        splitMapDigit f s (Four a b c d)\n          = Four (f first a) (f second b) (f third c) (f fourth d)\n          where (first, s') = splt (size a) s\n                (middle, fourth) = splt (size b + size c) s'\n                (second, third) = splt (size b) middle\n        \n        {-# INLINE splitMapNode #-}\n        \n        splitMapNode :: Sized a => (s -> a -> b) -> s -> Node a -> Node b\n        splitMapNode f s (Node2 ns a b) = Node2 ns (f first a) (f second b)\n          where (first, second) = splt (size a) s\n        splitMapNode f s (Node3 ns a b c)\n          = Node3 ns (f first a) (f second b) (f third c)\n          where (first, r) = splt (size a) s\n                (second, third) = splt (size b) r"],"instances":[],"language":{"extensions":["BangPatterns","DeriveDataTypeable","StandaloneDeriving","FlexibleInstances","ScopedTypeVariables","DeriveGeneric","TypeFamilies","PatternSynonyms","ViewPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}