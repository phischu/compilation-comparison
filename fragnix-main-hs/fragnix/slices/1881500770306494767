{"sliceID":1881500770306494767,"uses":[{"reference":{"otherSlice":284481157781237912},"usedName":{"typeName":{"identifier":"TypeSubst"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"map"}},"qualification":null},{"reference":{"otherSlice":6276720371911720776},"usedName":{"valueName":{"identifier":"fromList"}},"qualification":"M"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"zip"}},"qualification":null}],"fragment":["mkSubst :: [TyVarBndr] -> [Type] -> TypeSubst","mkSubst vs ts\n  = let vs' = map un vs\n        un (PlainTV v) = v\n        un (KindedTV v _) = v\n      in M.fromList $ zip vs' ts"],"instances":[],"language":{"extensions":["BangPatterns","FlexibleInstances","NamedFieldPuns","NoImplicitPrelude","UndecidableInstances","TemplateHaskellQuotes","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards","TemplateHaskell"],"isInstance":false}}