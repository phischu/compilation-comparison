{"sliceID":5124080972829461961,"uses":[{"reference":{"builtinModule":"Text.Read"},"usedName":{"valueName":{"identifier":"reads"}},"qualification":null},{"reference":{"otherSlice":7310166704595832661},"usedName":{"valueName":{"identifier":"unpack"}},"qualification":"T"},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Right"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Left"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"builtinModule":"GHC.Read"},"usedName":{"typeName":{"identifier":"Read"}},"qualification":null},{"reference":{"otherSlice":3835980439088584228},"usedName":{"typeName":{"identifier":"Text"}},"qualification":"T"},{"reference":{"builtinModule":"Data.Either"},"usedName":{"typeName":{"identifier":"Either"}},"qualification":null}],"fragment":["readEither :: Read a => T.Text -> Either T.Text a","readEither t\n  = case [x | (x, \"\") <- reads (T.unpack t)] of\n        [x] -> Right x\n        [] -> Left \"readEither: no parse\"\n        _ -> Left \"readEither: ambiguous parse\""],"instances":[],"language":{"extensions":["OverloadedStrings","RankNTypes","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}