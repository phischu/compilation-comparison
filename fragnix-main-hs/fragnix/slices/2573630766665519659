{"sliceID":2573630766665519659,"uses":[{"reference":{"otherSlice":9137146633777790671},"usedName":{"valueName":{"identifier":"getEnvironmentPrim"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"map"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"otherSlice":991728766313626578},"usedName":{"valueName":{"identifier":"break"}},"qualification":"BC"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":3200788070270342183},"usedName":{"valueName":{"identifier":"head"}},"qualification":"BC"},{"reference":{"otherSlice":2825887607782949625},"usedName":{"valueName":{"identifier":"tail"}},"qualification":"B"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"error"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"++"}},"qualification":null},{"reference":{"otherSlice":1940791894936628658},"usedName":{"valueName":{"identifier":"unpack"}},"qualification":"BC"},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"otherSlice":8642306666063513779},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":null}],"fragment":["getEnvironment :: IO [(ByteString, ByteString)]","getEnvironment\n  = do env <- getEnvironmentPrim\n       return $ map (dropEq . (BC.break ((==) '='))) env\n  where dropEq (x, y)\n          | BC.head y == '=' = (x, B.tail y)\n          | otherwise =\n            error $ \"getEnvironment: insane variable \" ++ BC.unpack x"],"instances":[],"language":{"extensions":["MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}