{"sliceID":7032207208369559689,"uses":[{"reference":{"otherSlice":5876841121207984499},"usedName":{"valueName":{"identifier":"zipWithM"}},"qualification":null},{"reference":{"otherSlice":2142091887820707375},"usedName":{"valueName":{"identifier":"zip3"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Monad"}},"qualification":null},{"reference":{"otherSlice":9209112058599157037},"usedName":{"typeName":{"identifier":"Stream"}},"qualification":null}],"fragment":["zipWith6M ::\n            Monad m =>\n            (a -> b -> c -> d -> e -> f -> m g) ->\n              Stream m a ->\n                Stream m b ->\n                  Stream m c -> Stream m d -> Stream m e -> Stream m f -> Stream m g","zipWith6M fn sa sb sc sd se sf\n  = zipWithM (\\ (a, b, c) (d, e, f) -> fn a b c d e f)\n      (zip3 sa sb sc)\n      (zip3 sd se sf)"],"instances":[],"language":{"extensions":["DeriveDataTypeable","ExistentialQuantification","Rank2Types","BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}