{"sliceID":6468298682039186647,"uses":[{"reference":{"otherSlice":3790782889836978137},"usedName":{"typeName":{"identifier":"JSONClass"}},"qualification":null},{"reference":{"otherSlice":9113544377361668434},"usedName":{"typeName":{"identifier":"TyVarMap"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fmap"}},"qualification":null},{"reference":{"otherSlice":6272234915714362184},"usedName":{"valueName":{"identifier":"uncurryTy"}},"qualification":null},{"reference":{"otherSlice":5641749074508611076},"usedName":{"valueName":{"identifier":"expandSyn"}},"qualification":null},{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"error"}},"qualification":null},{"reference":{"builtinModule":"Data.List.NonEmpty"},"usedName":{"valueName":{"identifier":"splitAt"}},"qualification":"NE"},{"reference":{"builtinModule":"Data.List.NonEmpty"},"usedName":{"valueName":{"identifier":"length"}},"qualification":"NE"},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"otherSlice":3516407524677664167},"usedName":{"valueName":{"identifier":"unapplyTy"}},"qualification":null},{"reference":{"otherSlice":4299504902901625159},"usedName":{"valueName":{"identifier":"arityInt"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"map"}},"qualification":null},{"reference":{"otherSlice":8496505818723453563},"usedName":{"valueName":{"identifier":"varTToNameMaybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"Data.List.NonEmpty"},"usedName":{"valueName":{"identifier":"drop"}},"qualification":"NE"},{"reference":{"otherSlice":6276720371911720776},"usedName":{"valueName":{"identifier":"fromList"}},"qualification":"M"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"valueName":{"identifier":"catMaybes"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"zipWith"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"any"}},"qualification":null},{"reference":{"otherSlice":4079894071508297803},"usedName":{"valueName":{"identifier":"predMentionsName"}},"qualification":null},{"reference":{"otherSlice":7179715165257321418},"usedName":{"valueName":{"identifier":"keys"}},"qualification":"M"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"||"}},"qualification":null},{"reference":{"otherSlice":4563332205826600063},"usedName":{"valueName":{"identifier":"size"}},"qualification":"M"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"not"}},"qualification":null},{"reference":{"otherSlice":7964775568114123156},"usedName":{"valueName":{"identifier":"allowExQuant"}},"qualification":null},{"reference":{"otherSlice":5908142131152728817},"usedName":{"valueName":{"identifier":"existentialContextError"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null}],"fragment":["reifyConTys ::\n            JSONClass -> [(Name, Name)] -> Name -> Q ([Type], TyVarMap)","reifyConTys jc tpjs conName\n  = do info <- reify conName\n       (ctxt, uncTy) <- case info of\n                            DataConI _ ty _ -> fmap uncurryTy (expandSyn ty)\n                            _ -> error \"Must be a data constructor\"\n       let (argTys, [resTy]) = NE.splitAt (NE.length uncTy - 1) uncTy\n           unapResTy = unapplyTy resTy\n           jArity = arityInt jc\n           mbTvNames\n             = map varTToNameMaybe $\n                 NE.drop (NE.length unapResTy - jArity) unapResTy\n           tvMap\n             = M.fromList . catMaybes $\n                 zipWith\n                   (\\ mbTvName tpj -> fmap (\\ tvName -> (tvName, tpj)) mbTvName)\n                   mbTvNames\n                   tpjs\n       if\n         (any (`predMentionsName` M.keys tvMap) ctxt ||\n            M.size tvMap < jArity)\n           && not (allowExQuant jc)\n         then existentialContextError conName else return (argTys, tvMap)"],"instances":[],"language":{"extensions":["BangPatterns","FlexibleInstances","NamedFieldPuns","NoImplicitPrelude","UndecidableInstances","TemplateHaskellQuotes","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards","TemplateHaskell"],"isInstance":false}}