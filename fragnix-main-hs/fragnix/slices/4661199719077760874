{"sliceID":4661199719077760874,"uses":[{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"when"}},"qualification":null},{"reference":{"otherSlice":6735251430614770144},"usedName":{"valueName":{"identifier":"demandInput"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"=<<"}},"qualification":null},{"reference":{"otherSlice":9192781548564093332},"usedName":{"valueName":{"identifier":"endOfChunk"}},"qualification":null},{"reference":{"otherSlice":8920435067653639686},"usedName":{"valueName":{"identifier":"takeWhile"}},"qualification":"B8"},{"reference":{"builtinModule":"Data.Functor"},"usedName":{"valueName":{"operator":"<$>"}},"qualification":null},{"reference":{"otherSlice":6319358220054646503},"usedName":{"valueName":{"identifier":"get"}},"qualification":null},{"reference":{"otherSlice":7235567377809295464},"usedName":{"valueName":{"identifier":"length"}},"qualification":"B"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fail"}},"qualification":null},{"reference":{"otherSlice":890389109853823418},"usedName":{"valueName":{"identifier":"advance"}},"qualification":null},{"reference":{"otherSlice":6673799853642296087},"usedName":{"valueName":{"identifier":"takeWhileAcc"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Word"},"usedName":{"typeName":{"identifier":"Word8"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":2921449568316915535},"usedName":{"typeName":{"identifier":"Parser"}},"qualification":null},{"reference":{"otherSlice":4010822550476529195},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":null}],"fragment":["takeWhile1 :: (Word8 -> Bool) -> Parser ByteString","takeWhile1 p\n  = do (`when` demandInput) =<< endOfChunk\n       s <- B8.takeWhile p <$> get\n       let len = B.length s\n       if len == 0 then fail \"takeWhile1\" else\n         do advance len\n            eoc <- endOfChunk\n            if eoc then takeWhileAcc p [s] else return s"],"instances":[],"language":{"extensions":["BangPatterns","GADTs","OverloadedStrings","RankNTypes","RecordWildCards","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}