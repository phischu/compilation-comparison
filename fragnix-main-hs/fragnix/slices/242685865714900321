{"sliceID":242685865714900321,"uses":[{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"take"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"reverse"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"scanl1"}},"qualification":null},{"reference":{"otherSlice":6164979808804701095},"usedName":{"valueName":{"operator":"</>"}},"qualification":null},{"reference":{"otherSlice":1957258392721347358},"usedName":{"valueName":{"identifier":"splitDirectories"}},"qualification":null},{"reference":{"otherSlice":8241406984127582067},"usedName":{"valueName":{"identifier":"normalise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Exception"},"usedName":{"valueName":{"identifier":"throw"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO"},"usedName":{"typeName":{"identifier":"FilePath"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Exception"},"usedName":{"typeName":{"identifier":"IOException"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"builtinModule":"Control.Exception.Base"},"usedName":{"valueName":{"identifier":"try"}},"qualification":"E"},{"reference":{"otherSlice":1544214945813774176},"usedName":{"valueName":{"identifier":"createDirectory"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"typeName":{"identifier":"Either"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Right"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Left"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"builtinModule":"System.IO.Error"},"usedName":{"valueName":{"identifier":"isDoesNotExistError"}},"qualification":null},{"reference":{"builtinModule":"System.IO.Error"},"usedName":{"valueName":{"identifier":"isAlreadyExistsError"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"||"}},"qualification":null},{"reference":{"builtinModule":"System.IO.Error"},"usedName":{"valueName":{"identifier":"isPermissionError"}},"qualification":null},{"reference":{"otherSlice":6836050608569789360},"usedName":{"valueName":{"identifier":"getFileStatus"}},"qualification":"Posix"},{"reference":{"otherSlice":7282079899922185033},"usedName":{"valueName":{"identifier":"isDirectory"}},"qualification":"Posix"},{"reference":{"builtinModule":"Control.Exception.Base"},"usedName":{"valueName":{"identifier":"catch"}},"qualification":"E"},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null}],"fragment":["createDirectoryIfMissing :: Bool -> FilePath -> IO ()","createDirectoryIfMissing create_parents path0\n  | create_parents = createDirs (parents path0)\n  | otherwise = createDirs (take 1 (parents path0))\n  where parents\n          = reverse . scanl1 (</>) . splitDirectories . normalise\n        createDirs [] = return ()\n        createDirs (dir : []) = createDir dir throw\n        createDirs (dir : dirs)\n          = createDir dir $\n              \\ _ ->\n                do createDirs dirs\n                   createDir dir throw\n        \n        createDir :: FilePath -> (IOException -> IO ()) -> IO ()\n        createDir dir notExistHandler\n          = do r <- E.try $ createDirectory dir\n               case (r :: Either IOException ()) of\n                   Right () -> return ()\n                   Left e | isDoesNotExistError e -> notExistHandler e\n                          | isAlreadyExistsError e || isPermissionError e ->\n                            (do stat <- Posix.getFileStatus dir\n                                if Posix.isDirectory stat then return () else throw e)\n                              `E.catch` ((\\ _ -> return ()) :: IOException -> IO ())\n                          | otherwise -> throw e"],"instances":[],"language":{"extensions":["NondecreasingIndentation","MultiParamTypeClasses","ExplicitForAll","PatternGuards"],"isInstance":false}}