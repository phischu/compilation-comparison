{"sliceID":2620369792327920584,"uses":[{"reference":{"otherSlice":7352349056474573366},"usedName":{"valueName":{"identifier":"hash"}},"qualification":null},{"reference":{"otherSlice":1013433531415570027},"usedName":{"constructorName":{"identifier":"Empty"},"constructorTypeName":{"identifier":"HashMap"}},"qualification":null},{"reference":{"otherSlice":1013433531415570027},"usedName":{"constructorName":{"identifier":"Leaf"},"constructorTypeName":{"identifier":"HashMap"}},"qualification":null},{"reference":{"otherSlice":9205917895425065335},"usedName":{"constructorName":{"identifier":"L"},"constructorTypeName":{"identifier":"Leaf"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":1013433531415570027},"usedName":{"constructorName":{"identifier":"BitmapIndexed"},"constructorTypeName":{"identifier":"HashMap"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"operator":".&."}},"qualification":null},{"reference":{"otherSlice":7169929954465792251},"usedName":{"valueName":{"identifier":"index"}},"qualification":"A"},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":5699939631341628310},"usedName":{"valueName":{"identifier":"bitsPerSubkey"}},"qualification":null},{"reference":{"otherSlice":7574141262701362909},"usedName":{"valueName":{"identifier":"ptrEq"}},"qualification":null},{"reference":{"otherSlice":209150371396664684},"usedName":{"valueName":{"identifier":"length"}},"qualification":"A"},{"reference":{"otherSlice":8400113761170890972},"usedName":{"valueName":{"identifier":"isLeafOrCollision"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"identifier":"complement"}},"qualification":null},{"reference":{"otherSlice":939750879483555386},"usedName":{"valueName":{"identifier":"delete"}},"qualification":"A"},{"reference":{"otherSlice":6823621386513732780},"usedName":{"valueName":{"identifier":"update"}},"qualification":"A"},{"reference":{"otherSlice":7149195466254759117},"usedName":{"valueName":{"identifier":"mask"}},"qualification":null},{"reference":{"otherSlice":1653876775134029804},"usedName":{"valueName":{"identifier":"sparseIndex"}},"qualification":null},{"reference":{"otherSlice":1013433531415570027},"usedName":{"constructorName":{"identifier":"Full"},"constructorTypeName":{"identifier":"HashMap"}},"qualification":null},{"reference":{"otherSlice":1678537813338300756},"usedName":{"valueName":{"identifier":"fullNodeMask"}},"qualification":null},{"reference":{"otherSlice":2062893055141454594},"usedName":{"valueName":{"identifier":"unsafeShiftL"}},"qualification":null},{"reference":{"otherSlice":3166271543971936421},"usedName":{"valueName":{"identifier":"index"}},"qualification":null},{"reference":{"otherSlice":1013433531415570027},"usedName":{"constructorName":{"identifier":"Collision"},"constructorTypeName":{"identifier":"HashMap"}},"qualification":null},{"reference":{"otherSlice":7968099882268410069},"usedName":{"valueName":{"identifier":"indexOf"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"typeName":{"identifier":"Eq"}},"qualification":null},{"reference":{"otherSlice":2051332017860334620},"usedName":{"typeName":{"identifier":"Hashable"}},"qualification":null},{"reference":{"otherSlice":1013433531415570027},"usedName":{"typeName":{"identifier":"HashMap"}},"qualification":null}],"fragment":["delete :: (Eq k, Hashable k) => k -> HashMap k v -> HashMap k v","delete k0 m0 = go h0 k0 0 m0\n  where h0 = hash k0\n        go !_ !_ !_ Empty = Empty\n        go h k _ t@(Leaf hy (L ky _))\n          | hy == h && ky == k = Empty\n          | otherwise = t\n        go h k s t@(BitmapIndexed b ary)\n          | b .&. m == 0 = t\n          | otherwise =\n            let !st = A.index ary i\n                !st' = go h k (s + bitsPerSubkey) st\n              in\n              if st' `ptrEq` st then t else\n                case st' of\n                    Empty | A.length ary == 1 -> Empty\n                          | A.length ary == 2 ->\n                            case (i, A.index ary 0, A.index ary 1) of\n                                (0, _, l) | isLeafOrCollision l -> l\n                                (1, l, _) | isLeafOrCollision l -> l\n                                _ -> bIndexed\n                          | otherwise -> bIndexed\n                      where bIndexed\n                              = BitmapIndexed (b .&. complement m) (A.delete ary i)\n                    l | isLeafOrCollision l && A.length ary == 1 -> l\n                    _ -> BitmapIndexed b (A.update ary i st')\n          where m = mask h s\n                i = sparseIndex b m\n        go h k s t@(Full ary)\n          = let !st = A.index ary i\n                !st' = go h k (s + bitsPerSubkey) st\n              in\n              if st' `ptrEq` st then t else\n                case st' of\n                    Empty -> let ary' = A.delete ary i\n                                 bm = fullNodeMask .&. complement (1 `unsafeShiftL` i)\n                               in BitmapIndexed bm ary'\n                    _ -> Full (A.update ary i st')\n          where i = index h s\n        go h k _ t@(Collision hy v)\n          | h == hy =\n            case indexOf k v of\n                Just i | A.length v == 2 ->\n                         if i == 0 then Leaf h (A.index v 1) else Leaf h (A.index v 0)\n                       | otherwise -> Collision h (A.delete v i)\n                Nothing -> t\n          | otherwise = t"],"instances":[],"language":{"extensions":["BangPatterns","DeriveDataTypeable","MagicHash","ScopedTypeVariables","PatternGuards","RoleAnnotations","TypeFamilies","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll"],"isInstance":false}}