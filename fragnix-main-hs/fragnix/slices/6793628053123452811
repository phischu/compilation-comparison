{"sliceID":6793628053123452811,"uses":[{"reference":{"otherSlice":1285600184885925655},"usedName":{"typeName":{"identifier":"FrameHeader"}},"qualification":null},{"reference":{"otherSlice":4010822550476529195},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":null},{"reference":{"otherSlice":8661256068812973938},"usedName":{"typeName":{"identifier":"FramePayload"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"typeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":3799123115806425041},"usedName":{"typeName":{"identifier":"HTTP2Error"}},"qualification":null},{"reference":{"otherSlice":1285600184885925655},"usedName":{"constructorName":{"identifier":"FrameHeader"},"constructorTypeName":{"identifier":"FrameHeader"}},"qualification":null},{"reference":{"otherSlice":1285600184885925655},"usedName":{"valueName":{"identifier":"flags"}},"qualification":null},{"reference":{"otherSlice":1285600184885925655},"usedName":{"valueName":{"identifier":"payloadLength"}},"qualification":null},{"reference":{"otherSlice":1285600184885925655},"usedName":{"valueName":{"identifier":"streamId"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":5797786865840180786},"usedName":{"valueName":{"identifier":"uncons"}},"qualification":"BS"},{"reference":{"otherSlice":4290242822756873418},"usedName":{"valueName":{"identifier":"intFromWord8"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Left"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":3799123115806425041},"usedName":{"constructorName":{"identifier":"ConnectionError"},"constructorTypeName":{"identifier":"HTTP2Error"}},"qualification":null},{"reference":{"otherSlice":5005511013097534442},"usedName":{"constructorName":{"identifier":"ProtocolError"},"constructorTypeName":{"identifier":"ErrorCodeId"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Right"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"otherSlice":380767506459821795},"usedName":{"valueName":{"identifier":"take"}},"qualification":"BS"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":7439992619278611034},"usedName":{"valueName":{"identifier":"testPadded"}},"qualification":null}],"fragment":["decodeWithPadding ::\n                  FrameHeader ->\n                    ByteString ->\n                      (ByteString -> FramePayload) -> Either HTTP2Error FramePayload","decodeWithPadding FrameHeader{..} bs body\n  | padded =\n    let Just (w8, rest) = BS.uncons bs\n        padlen = intFromWord8 w8\n        bodylen = payloadLength - padlen - 1\n      in\n      if bodylen < 0 then\n        Left $ ConnectionError ProtocolError \"padding is not enough\" else\n        Right . body $ BS.take bodylen rest\n  | otherwise = Right $ body bs\n  where padded = testPadded flags"],"instances":[],"language":{"extensions":["TupleSections","BangPatterns","RecordWildCards","OverloadedStrings","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}