{"sliceID":1685143193914711663,"uses":[{"reference":{"otherSlice":5975743923145988771},"usedName":{"valueName":{"identifier":"toPair"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":1270656924308839628},"usedName":{"constructorName":{"identifier":"NothingS"},"constructorTypeName":{"identifier":"MaybeS"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"typeName":{"identifier":"Ord"}},"qualification":null},{"reference":{"otherSlice":4136673170685477501},"usedName":{"typeName":{"identifier":"Map"}},"qualification":null},{"reference":{"otherSlice":810357295242607906},"usedName":{"typeName":{"identifier":"StrictPair"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":4136673170685477501},"usedName":{"constructorName":{"identifier":"Bin"},"constructorTypeName":{"identifier":"Map"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"compare"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"LT"},"constructorTypeName":{"identifier":"Ordering"}},"qualification":null},{"reference":{"otherSlice":7715005988931933672},"usedName":{"valueName":{"identifier":"lookup"}},"qualification":null},{"reference":{"otherSlice":810357295242607906},"usedName":{"constructorName":{"operator":":*:"},"constructorTypeName":{"identifier":"StrictPair"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"EQ"},"constructorTypeName":{"identifier":"Ordering"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"GT"},"constructorTypeName":{"identifier":"Ordering"}},"qualification":null},{"reference":{"otherSlice":4136673170685477501},"usedName":{"constructorName":{"identifier":"Tip"},"constructorTypeName":{"identifier":"Map"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":1270656924308839628},"usedName":{"constructorName":{"identifier":"JustS"},"constructorTypeName":{"identifier":"MaybeS"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">="}},"qualification":null},{"reference":{"otherSlice":1270656924308839628},"usedName":{"typeName":{"identifier":"MaybeS"}},"qualification":null}],"fragment":["trimLookupLo ::\n               Ord k => k -> MaybeS k -> Map k a -> (Maybe a, Map k a)","trimLookupLo lk0 mhk0 t0 = toPair $ go lk0 mhk0 t0\n  where go lk NothingS t = greater lk t\n          where greater ::\n                          Ord k => k -> Map k a -> StrictPair (Maybe a) (Map k a)\n                greater lo t'@(Bin _ kx x l r)\n                  = case compare lo kx of\n                        LT -> lookup lo l :*: t'\n                        EQ -> (Just x :*: r)\n                        GT -> greater lo r\n                greater _ Tip = (Nothing :*: Tip)\n        go lk (JustS hk) t = middle lk hk t\n          where middle ::\n                         Ord k => k -> k -> Map k a -> StrictPair (Maybe a) (Map k a)\n                middle lo hi t'@(Bin _ kx x l r)\n                  = case compare lo kx of\n                        LT | kx < hi -> lookup lo l :*: t'\n                           | otherwise -> middle lo hi l\n                        EQ -> Just x :*: lesser hi r\n                        GT -> middle lo hi r\n                middle _ _ Tip = (Nothing :*: Tip)\n                \n                lesser :: Ord k => k -> Map k a -> Map k a\n                lesser hi (Bin _ k _ l _) | k >= hi = lesser hi l\n                lesser _ t' = t'"],"instances":[],"language":{"extensions":["DeriveDataTypeable","StandaloneDeriving","RoleAnnotations","TypeFamilies","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}