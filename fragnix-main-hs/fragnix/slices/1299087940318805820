{"sliceID":1299087940318805820,"uses":[{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"error"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"++"}},"qualification":null},{"reference":{"otherSlice":5859475402547060278},"usedName":{"valueName":{"identifier":"parseArgs"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Right"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":5961014460351920517},"usedName":{"valueName":{"identifier":"allNullaryToStringTag"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"all"}},"qualification":null},{"reference":{"otherSlice":1632293083861128092},"usedName":{"valueName":{"identifier":"isNullary"}},"qualification":null},{"reference":{"otherSlice":1669319695546572556},"usedName":{"constructorName":{"identifier":"String"},"constructorTypeName":{"identifier":"Value"}},"qualification":null},{"reference":{"builtinModule":"Control.Monad"},"usedName":{"valueName":{"identifier":"liftM2"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":400033489728798890},"usedName":{"valueName":{"identifier":"pack"}},"qualification":"T"},{"reference":{"otherSlice":2146728857227339680},"usedName":{"valueName":{"identifier":"conStringE"}},"qualification":null},{"reference":{"builtinModule":"Control.Applicative"},"usedName":{"valueName":{"identifier":"pure"}},"qualification":null},{"reference":{"otherSlice":2460945805699770086},"usedName":{"valueName":{"identifier":"getConName"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":5354023588085018718},"usedName":{"valueName":{"identifier":"noMatchFail"}},"qualification":null},{"reference":{"builtinModule":"GHC.Show"},"usedName":{"valueName":{"identifier":"show"}},"qualification":null},{"reference":{"otherSlice":212440380998441966},"usedName":{"valueName":{"identifier":"unpack"}},"qualification":"T"},{"reference":{"otherSlice":3719527261485027462},"usedName":{"valueName":{"identifier":"noStringFail"}},"qualification":null},{"reference":{"otherSlice":2747590863466909181},"usedName":{"valueName":{"identifier":"valueConName"}},"qualification":null},{"reference":{"otherSlice":5961014460351920517},"usedName":{"valueName":{"identifier":"sumEncoding"}},"qualification":null},{"reference":{"otherSlice":5152478156045782397},"usedName":{"constructorName":{"identifier":"TaggedObject"},"constructorTypeName":{"identifier":"SumEncoding"}},"qualification":null},{"reference":{"otherSlice":5152478156045782397},"usedName":{"valueName":{"identifier":"tagFieldName"}},"qualification":null},{"reference":{"otherSlice":5152478156045782397},"usedName":{"valueName":{"identifier":"contentsFieldName"}},"qualification":null},{"reference":{"otherSlice":5152478156045782397},"usedName":{"constructorName":{"identifier":"ObjectWithSingleField"},"constructorTypeName":{"identifier":"SumEncoding"}},"qualification":null},{"reference":{"otherSlice":5152478156045782397},"usedName":{"constructorName":{"identifier":"TwoElemArray"},"constructorTypeName":{"identifier":"SumEncoding"}},"qualification":null},{"reference":{"otherSlice":1669319695546572556},"usedName":{"constructorName":{"identifier":"Array"},"constructorTypeName":{"identifier":"Value"}},"qualification":null},{"reference":{"otherSlice":6708001900488435128},"usedName":{"valueName":{"identifier":"length"}},"qualification":"V"},{"reference":{"otherSlice":1335649795085657725},"usedName":{"valueName":{"identifier":"not2ElemArray"}},"qualification":null},{"reference":{"otherSlice":9170505240105121222},"usedName":{"valueName":{"identifier":"noArrayFail"}},"qualification":null},{"reference":{"otherSlice":1669319695546572556},"usedName":{"constructorName":{"identifier":"Object"},"constructorTypeName":{"identifier":"Value"}},"qualification":null},{"reference":{"otherSlice":7673222652900055646},"usedName":{"valueName":{"identifier":"noObjectFail"}},"qualification":null},{"reference":{"otherSlice":3095543664592725148},"usedName":{"valueName":{"operator":".:"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Left"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":970913613298366491},"usedName":{"valueName":{"identifier":"conNotFoundFailTaggedObject"}},"qualification":null},{"reference":{"otherSlice":2494651675846515900},"usedName":{"valueName":{"identifier":"unsafeIndex"}},"qualification":"V"},{"reference":{"otherSlice":4442576147540072712},"usedName":{"valueName":{"identifier":"conNotFoundFail2ElemArray"}},"qualification":null},{"reference":{"otherSlice":4182239377433776789},"usedName":{"valueName":{"identifier":"firstElemNoStringFail"}},"qualification":null},{"reference":{"otherSlice":2303024117134025433},"usedName":{"valueName":{"identifier":"toList"}},"qualification":"H"},{"reference":{"otherSlice":488233659531302045},"usedName":{"valueName":{"identifier":"conNotFoundFailObjectSingleField"}},"qualification":null},{"reference":{"otherSlice":8026976209556767528},"usedName":{"valueName":{"identifier":"wrongPairCountFail"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"length"}},"qualification":null},{"reference":{"otherSlice":3908621989813554521},"usedName":{"valueName":{"identifier":"conNameExp"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"map"}},"qualification":null},{"reference":{"otherSlice":5961014460351920517},"usedName":{"valueName":{"identifier":"constructorTagModifier"}},"qualification":null},{"reference":{"otherSlice":5961014460351920517},"usedName":{"typeName":{"identifier":"Options"}},"qualification":null}],"fragment":["consFromJSON :: Name -> Options -> [Con] -> Q Exp","consFromJSON _ _ []\n  = error $\n      \"Data.Aeson.TH.consFromJSON: \" ++ \"Not a single constructor given!\"\nconsFromJSON tName opts [con]\n  = do value <- newName \"value\"\n       lam1E (varP value) (parseArgs tName opts con (Right value))\nconsFromJSON tName opts cons\n  = do value <- newName \"value\"\n       lam1E (varP value) $\n         caseE (varE value) $\n           if allNullaryToStringTag opts && all isNullary cons then\n             allNullaryMatches else mixedMatches\n  where allNullaryMatches\n          = [do txt <- newName \"txt\"\n                match (conP 'String [varP txt])\n                  (guardedB $\n                     [liftM2 (,)\n                        (normalG $\n                           infixApp (varE txt) [| (==) |]\n                             ([| T.pack |] `appE` conStringE opts conName))\n                        ([| pure |] `appE` conE conName)\n                      | con <- cons, let conName = getConName con]\n                       ++\n                       [liftM2 (,) (normalG [| otherwise |])\n                          ([| noMatchFail |] `appE` (litE $ stringL $ show tName) `appE`\n                             ([| T.unpack |] `appE` varE txt))])\n                  [],\n             do other <- newName \"other\"\n                match (varP other)\n                  (normalB $\n                     [| noStringFail |] `appE` (litE $ stringL $ show tName) `appE`\n                       ([| valueConName |] `appE` varE other))\n                  []]\n        mixedMatches\n          = case sumEncoding opts of\n                TaggedObject{tagFieldName, contentsFieldName} -> parseObject $\n                                                                   parseTaggedObject tagFieldName\n                                                                     contentsFieldName\n                ObjectWithSingleField -> parseObject $ parseObjectWithSingleField\n                TwoElemArray -> [do arr <- newName \"array\"\n                                    match (conP 'Array [varP arr])\n                                      (guardedB $\n                                         [liftM2 (,)\n                                            (normalG $\n                                               infixApp ([| V.length |] `appE` varE arr) [| (==) |]\n                                                 (litE $ integerL 2))\n                                            (parse2ElemArray arr),\n                                          liftM2 (,) (normalG [| otherwise |])\n                                            (([| not2ElemArray |] `appE`\n                                                (litE $ stringL $ show tName)\n                                                `appE` ([| V.length |] `appE` varE arr)))])\n                                      [],\n                                 do other <- newName \"other\"\n                                    match (varP other)\n                                      (normalB $\n                                         [| noArrayFail |] `appE` (litE $ stringL $ show tName)\n                                           `appE` ([| valueConName |] `appE` varE other))\n                                      []]\n        parseObject f\n          = [do obj <- newName \"obj\"\n                match (conP 'Object [varP obj]) (normalB $ f obj) [],\n             do other <- newName \"other\"\n                match (varP other)\n                  (normalB $\n                     [| noObjectFail |] `appE` (litE $ stringL $ show tName) `appE`\n                       ([| valueConName |] `appE` varE other))\n                  []]\n        parseTaggedObject typFieldName valFieldName obj\n          = do conKey <- newName \"conKey\"\n               doE\n                 [bindS (varP conKey)\n                    (infixApp (varE obj) [| (.:) |]\n                       ([| T.pack |] `appE` stringE typFieldName)),\n                  noBindS $\n                    parseContents conKey (Left (valFieldName, obj))\n                      'conNotFoundFailTaggedObject]\n        parse2ElemArray arr\n          = do conKey <- newName \"conKey\"\n               conVal <- newName \"conVal\"\n               let letIx n ix\n                     = valD (varP n)\n                         (normalB\n                            ([| V.unsafeIndex |] `appE` varE arr `appE` litE (integerL ix)))\n                         []\n               letE [letIx conKey 0, letIx conVal 1]\n                 (caseE (varE conKey)\n                    [do txt <- newName \"txt\"\n                        match (conP 'String [varP txt])\n                          (normalB $\n                             parseContents txt (Right conVal) 'conNotFoundFail2ElemArray)\n                          [],\n                     do other <- newName \"other\"\n                        match (varP other)\n                          (normalB $\n                             [| firstElemNoStringFail |] `appE` (litE $ stringL $ show tName)\n                               `appE` ([| valueConName |] `appE` varE other))\n                          []])\n        parseObjectWithSingleField obj\n          = do conKey <- newName \"conKey\"\n               conVal <- newName \"conVal\"\n               caseE ([| H.toList |] `appE` varE obj)\n                 [match (listP [tupP [varP conKey, varP conVal]])\n                    (normalB $\n                       parseContents conKey (Right conVal)\n                         'conNotFoundFailObjectSingleField)\n                    [],\n                  do other <- newName \"other\"\n                     match (varP other)\n                       (normalB $\n                          [| wrongPairCountFail |] `appE` (litE $ stringL $ show tName)\n                            `appE` ([| show . length |] `appE` varE other))\n                       []]\n        parseContents conKey contents errorFun\n          = caseE (varE conKey)\n              [match wildP\n                 (guardedB $\n                    [do g <- normalG $\n                               infixApp (varE conKey) [| (==) |]\n                                 ([| T.pack |] `appE` conNameExp opts con)\n                        e <- parseArgs tName opts con contents\n                        return (g, e)\n                     | con <- cons]\n                      ++\n                      [liftM2 (,) (normalG [| otherwise |])\n                         (varE errorFun `appE` (litE $ stringL $ show tName) `appE`\n                            listE\n                              (map\n                                 (litE .\n                                    stringL . constructorTagModifier opts . nameBase . getConName)\n                                 cons)\n                            `appE` ([| T.unpack |] `appE` varE conKey))])\n                 []]"],"instances":[],"language":{"extensions":["FlexibleInstances","IncoherentInstances","NamedFieldPuns","NoImplicitPrelude","OverlappingInstances","TemplateHaskell","UndecidableInstances","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}