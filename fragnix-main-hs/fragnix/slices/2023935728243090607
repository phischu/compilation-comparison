{"sliceID":2023935728243090607,"uses":[{"reference":{"otherSlice":3867849288792351978},"usedName":{"valueName":{"identifier":"unsafeNew"}},"qualification":null},{"reference":{"otherSlice":2014407489289358317},"usedName":{"valueName":{"identifier":"foldM"}},"qualification":"MStream"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":7455058673344695308},"usedName":{"valueName":{"identifier":"checkSlice"}},"qualification":"Ck"},{"reference":{"otherSlice":4579156144394400265},"usedName":{"constructorName":{"identifier":"Internal"},"constructorTypeName":{"identifier":"Checks"}},"qualification":"Ck"},{"reference":{"otherSlice":3867849288792351978},"usedName":{"valueName":{"identifier":"length"}},"qualification":null},{"reference":{"otherSlice":3538790270360548723},"usedName":{"valueName":{"identifier":"unsafeSlice"}},"qualification":null},{"reference":{"otherSlice":2027147290182338639},"usedName":{"valueName":{"identifier":"unsafeAppend1"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":3377634759521931512},"usedName":{"typeName":{"identifier":"PrimMonad"}},"qualification":null},{"reference":{"otherSlice":3867849288792351978},"usedName":{"typeName":{"identifier":"MVector"}},"qualification":null},{"reference":{"otherSlice":8034191425845892708},"usedName":{"typeName":{"identifier":"MStream"}},"qualification":null},{"reference":{"otherSlice":3377634759521931512},"usedName":{"typeName":{"identifier":"PrimState"}},"qualification":null}],"fragment":["munstreamUnknown ::\n                   (PrimMonad m, MVector v a) => MStream m a -> m (v (PrimState m) a)","munstreamUnknown s\n  = do v <- unsafeNew 0\n       (v', n) <- MStream.foldM put (v, 0) s\n       return $\n         ((Ck.checkSlice \"Data/Vector/Generic/Mutable.hs\" 349) Ck.Internal)\n           \"munstreamUnknown\"\n           0\n           n\n           (length v')\n           $ unsafeSlice 0 n v'\n  where {-# INLINE [0] put #-}\n        put (v, i) x\n          = do v' <- unsafeAppend1 v i x\n               return (v', i + 1)"],"instances":[],"language":{"extensions":["DeriveDataTypeable","MultiParamTypeClasses","BangPatterns","ScopedTypeVariables","TypeFamilies","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}