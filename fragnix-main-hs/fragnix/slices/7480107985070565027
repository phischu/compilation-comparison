{"sliceID":7480107985070565027,"uses":[{"reference":{"builtinModule":"GHC.IO.Handle.Types"},"usedName":{"typeName":{"identifier":"Handle"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Handle"},"usedName":{"valueName":{"identifier":"hGetBuffering"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Handle.Types"},"usedName":{"constructorName":{"identifier":"BlockBuffering"},"constructorTypeName":{"identifier":"BufferMode"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"Control.Exception.Base"},"usedName":{"valueName":{"identifier":"catch"}},"qualification":"E"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"liftM2"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Handle"},"usedName":{"valueName":{"identifier":"hFileSize"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Handle"},"usedName":{"valueName":{"identifier":"hTell"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Exception"},"usedName":{"typeName":{"identifier":"IOException"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Exception"},"usedName":{"valueName":{"identifier":"ioe_type"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Exception"},"usedName":{"constructorName":{"identifier":"InappropriateType"},"constructorTypeName":{"identifier":"IOErrorType"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO"},"usedName":{"valueName":{"identifier":"throwIO"}},"qualification":"E"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"when"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Handle"},"usedName":{"valueName":{"identifier":"hSetBuffering"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null}],"fragment":["chooseGoodBuffering :: Handle -> IO ()","chooseGoodBuffering h\n  = do bufMode <- hGetBuffering h\n       case bufMode of\n           BlockBuffering Nothing -> do d <- E.catch\n                                               (liftM2 (-) (hFileSize h) (hTell h))\n                                               $\n                                               \\ (e :: IOException) ->\n                                                 if ioe_type e == InappropriateType then\n                                                   return 16384 else E.throwIO e\n                                        when (d > 0) .\n                                          hSetBuffering h . BlockBuffering . Just . fromIntegral\n                                          $ d\n           _ -> return ()"],"instances":[],"language":{"extensions":["BangPatterns","RecordWildCards","ScopedTypeVariables","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}