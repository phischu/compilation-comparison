{"sliceID":1846059807510772275,"uses":[{"reference":{"otherSlice":4512247588159674237},"usedName":{"valueName":{"identifier":"sumEncoding"}},"qualification":null},{"reference":{"otherSlice":2490827399793063090},"usedName":{"constructorName":{"identifier":"TwoElemArray"},"constructorTypeName":{"identifier":"SumEncoding"}},"qualification":null},{"reference":{"otherSlice":8838403415977070196},"usedName":{"constructorName":{"identifier":"Array"},"constructorTypeName":{"identifier":"Value"}},"qualification":null},{"reference":{"otherSlice":654341454143475551},"usedName":{"valueName":{"identifier":"fromList"}},"qualification":"V"},{"reference":{"otherSlice":2881255245096305207},"usedName":{"valueName":{"identifier":"conStr"}},"qualification":null},{"reference":{"otherSlice":2490827399793063090},"usedName":{"constructorName":{"identifier":"TaggedObject"},"constructorTypeName":{"identifier":"SumEncoding"}},"qualification":null},{"reference":{"otherSlice":2490827399793063090},"usedName":{"valueName":{"identifier":"tagFieldName"}},"qualification":null},{"reference":{"otherSlice":2490827399793063090},"usedName":{"valueName":{"identifier":"contentsFieldName"}},"qualification":null},{"reference":{"otherSlice":5420555374589246121},"usedName":{"valueName":{"identifier":"pack"}},"qualification":"T"},{"reference":{"otherSlice":5221193408454853520},"usedName":{"valueName":{"operator":".="}},"qualification":null},{"reference":{"otherSlice":684351644151123126},"usedName":{"valueName":{"identifier":"object"}},"qualification":"A"},{"reference":{"otherSlice":2490827399793063090},"usedName":{"constructorName":{"identifier":"ObjectWithSingleField"},"constructorTypeName":{"identifier":"SumEncoding"}},"qualification":null},{"reference":{"otherSlice":4936942242889787898},"usedName":{"valueName":{"identifier":"conTxt"}},"qualification":null},{"reference":{"otherSlice":2490827399793063090},"usedName":{"constructorName":{"identifier":"UntaggedValue"},"constructorTypeName":{"identifier":"SumEncoding"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":4512247588159674237},"usedName":{"typeName":{"identifier":"Options"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null}],"fragment":["sumToValue :: Options -> Bool -> Bool -> Name -> Q Exp -> Q Exp","sumToValue opts multiCons nullary conName exp\n  | multiCons =\n    case sumEncoding opts of\n        TwoElemArray -> [| Array |] `appE`\n                          ([| V.fromList |] `appE` listE [conStr opts conName, exp])\n        TaggedObject{tagFieldName, contentsFieldName} -> let tag\n                                                               = infixApp [| T.pack tagFieldName |]\n                                                                   [| (.=) |]\n                                                                   (conStr opts conName)\n                                                             contents\n                                                               = infixApp\n                                                                   [| T.pack contentsFieldName |]\n                                                                   [| (.=) |]\n                                                                   exp\n                                                           in\n                                                           [| A.object |] `appE`\n                                                             listE\n                                                               (if nullary then [tag] else\n                                                                  [tag, contents])\n        ObjectWithSingleField -> [| A.object |] `appE`\n                                   listE [infixApp (conTxt opts conName) [| (.=) |] exp]\n        UntaggedValue | nullary -> conStr opts conName\n        UntaggedValue -> exp\n  | otherwise = exp"],"instances":[],"language":{"extensions":["BangPatterns","FlexibleInstances","NamedFieldPuns","NoImplicitPrelude","UndecidableInstances","TemplateHaskellQuotes","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards","TemplateHaskell"],"isInstance":false}}