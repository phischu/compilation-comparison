{"sliceID":3268093302394198716,"uses":[{"reference":{"otherSlice":2392723070956752342},"usedName":{"typeName":{"identifier":"Unbox"}},"qualification":null},{"reference":{"otherSlice":3867849288792351978},"usedName":{"typeName":{"identifier":"MVector"}},"qualification":"M"},{"reference":{"otherSlice":2757734702229692550},"usedName":{"typeName":{"identifier":"MVector"}},"qualification":null},{"reference":{"otherSlice":3867849288792351978},"usedName":{"valueName":{"identifier":"basicLength"}},"qualification":"M"},{"reference":{"otherSlice":2757734702229692550},"usedName":{"constructorName":{"identifier":"MV_2"},"constructorTypeName":{"identifier":"MVector"}},"qualification":null},{"reference":{"otherSlice":3867849288792351978},"usedName":{"valueName":{"identifier":"basicUnsafeSlice"}},"qualification":"M"},{"reference":{"otherSlice":3867849288792351978},"usedName":{"valueName":{"identifier":"basicOverlaps"}},"qualification":"M"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"||"}},"qualification":null},{"reference":{"otherSlice":3867849288792351978},"usedName":{"valueName":{"identifier":"basicUnsafeNew"}},"qualification":"M"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":3867849288792351978},"usedName":{"valueName":{"identifier":"basicUnsafeReplicate"}},"qualification":"M"},{"reference":{"otherSlice":3867849288792351978},"usedName":{"valueName":{"identifier":"basicUnsafeRead"}},"qualification":"M"},{"reference":{"otherSlice":3867849288792351978},"usedName":{"valueName":{"identifier":"basicUnsafeWrite"}},"qualification":"M"},{"reference":{"otherSlice":3867849288792351978},"usedName":{"valueName":{"identifier":"basicClear"}},"qualification":"M"},{"reference":{"otherSlice":3867849288792351978},"usedName":{"valueName":{"identifier":"basicSet"}},"qualification":"M"},{"reference":{"otherSlice":3867849288792351978},"usedName":{"valueName":{"identifier":"basicUnsafeCopy"}},"qualification":"M"},{"reference":{"otherSlice":3867849288792351978},"usedName":{"valueName":{"identifier":"basicUnsafeMove"}},"qualification":"M"},{"reference":{"otherSlice":3867849288792351978},"usedName":{"valueName":{"identifier":"basicUnsafeGrow"}},"qualification":"M"},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null}],"fragment":["instance (Unbox a, Unbox b) => M.MVector MVector (a, b) where\n        {-# INLINE basicLength #-}\n        basicLength (MV_2 n_ as bs) = n_\n        \n        {-# INLINE basicUnsafeSlice #-}\n        basicUnsafeSlice i_ m_ (MV_2 n_ as bs)\n          = MV_2 m_ (M.basicUnsafeSlice i_ m_ as)\n              (M.basicUnsafeSlice i_ m_ bs)\n        \n        {-# INLINE basicOverlaps #-}\n        basicOverlaps (MV_2 n_1 as1 bs1) (MV_2 n_2 as2 bs2)\n          = M.basicOverlaps as1 as2 || M.basicOverlaps bs1 bs2\n        \n        {-# INLINE basicUnsafeNew #-}\n        basicUnsafeNew n_\n          = do as <- M.basicUnsafeNew n_\n               bs <- M.basicUnsafeNew n_\n               return $ MV_2 n_ as bs\n        \n        {-# INLINE basicUnsafeReplicate #-}\n        basicUnsafeReplicate n_ (a, b)\n          = do as <- M.basicUnsafeReplicate n_ a\n               bs <- M.basicUnsafeReplicate n_ b\n               return $ MV_2 n_ as bs\n        \n        {-# INLINE basicUnsafeRead #-}\n        basicUnsafeRead (MV_2 n_ as bs) i_\n          = do a <- M.basicUnsafeRead as i_\n               b <- M.basicUnsafeRead bs i_\n               return (a, b)\n        \n        {-# INLINE basicUnsafeWrite #-}\n        basicUnsafeWrite (MV_2 n_ as bs) i_ (a, b)\n          = do M.basicUnsafeWrite as i_ a\n               M.basicUnsafeWrite bs i_ b\n        \n        {-# INLINE basicClear #-}\n        basicClear (MV_2 n_ as bs)\n          = do M.basicClear as\n               M.basicClear bs\n        \n        {-# INLINE basicSet #-}\n        basicSet (MV_2 n_ as bs) (a, b)\n          = do M.basicSet as a\n               M.basicSet bs b\n        \n        {-# INLINE basicUnsafeCopy #-}\n        basicUnsafeCopy (MV_2 n_1 as1 bs1) (MV_2 n_2 as2 bs2)\n          = do M.basicUnsafeCopy as1 as2\n               M.basicUnsafeCopy bs1 bs2\n        \n        {-# INLINE basicUnsafeMove #-}\n        basicUnsafeMove (MV_2 n_1 as1 bs1) (MV_2 n_2 as2 bs2)\n          = do M.basicUnsafeMove as1 as2\n               M.basicUnsafeMove bs1 bs2\n        \n        {-# INLINE basicUnsafeGrow #-}\n        basicUnsafeGrow (MV_2 n_ as bs) m_\n          = do as' <- M.basicUnsafeGrow as m_\n               bs' <- M.basicUnsafeGrow bs m_\n               return $ MV_2 (m_ + n_) as' bs'"],"instances":[],"language":{"extensions":["DeriveDataTypeable","BangPatterns","MultiParamTypeClasses","TypeFamilies","FlexibleContexts","StandaloneDeriving","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":true}}