{"sliceID":4420026129890575426,"uses":[{"reference":{"otherSlice":3217680123089390278},"usedName":{"valueName":{"identifier":"isPosix"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"map"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"valueName":{"identifier":"isJust"}},"qualification":null},{"reference":{"otherSlice":8066169234687915431},"usedName":{"valueName":{"identifier":"readDriveShare"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"all"}},"qualification":null},{"reference":{"otherSlice":7018349161896175961},"usedName":{"valueName":{"identifier":"isPathSeparator"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"take"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"++"}},"qualification":null},{"reference":{"otherSlice":429191354961839790},"usedName":{"valueName":{"identifier":"readDriveUNC"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"not"}},"qualification":null},{"reference":{"otherSlice":7790298422851975495},"usedName":{"valueName":{"identifier":"hasTrailingPathSeparator"}},"qualification":null},{"reference":{"otherSlice":6938928625833616054},"usedName":{"valueName":{"identifier":"pathSeparator"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":2188440631764389818},"usedName":{"valueName":{"identifier":"joinDrive"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":7230202966877292553},"usedName":{"valueName":{"identifier":"splitDrive"}},"qualification":null},{"reference":{"otherSlice":7976147738025658056},"usedName":{"valueName":{"identifier":"isBadCharacter"}},"qualification":null},{"reference":{"otherSlice":6826432418101837134},"usedName":{"valueName":{"identifier":"joinPath"}},"qualification":null},{"reference":{"otherSlice":1623132091314915825},"usedName":{"valueName":{"identifier":"splitPath"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"break"}},"qualification":null},{"reference":{"builtinModule":"GHC.Unicode"},"usedName":{"valueName":{"identifier":"toUpper"}},"qualification":null},{"reference":{"otherSlice":4887610044472919515},"usedName":{"valueName":{"identifier":"dropWhileEnd"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"elem"}},"qualification":null},{"reference":{"otherSlice":8376345622969381167},"usedName":{"valueName":{"identifier":"badElements"}},"qualification":null},{"reference":{"otherSlice":7461142606507062548},"usedName":{"valueName":{"operator":"<.>"}},"qualification":null},{"reference":{"otherSlice":4056854166658082597},"usedName":{"valueName":{"identifier":"splitExtensions"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO"},"usedName":{"typeName":{"identifier":"FilePath"}},"qualification":null}],"fragment":["makeValid :: FilePath -> FilePath","makeValid \"\" = \"_\"\nmakeValid path\n  | isPosix = map (\\ x -> if x == '\\NUL' then '_' else x) path\n  | isJust (readDriveShare drv) && all isPathSeparator drv =\n    take 2 drv ++ \"drive\"\n  | isJust (readDriveUNC drv) && not (hasTrailingPathSeparator drv) =\n    makeValid (drv ++ [pathSeparator] ++ pth)\n  | otherwise = joinDrive drv $ validElements $ validChars pth\n  where (drv, pth) = splitDrive path\n        validChars = map f\n        f x = if isBadCharacter x then '_' else x\n        validElements x = joinPath $ map g $ splitPath x\n        g x = h a ++ b\n          where (a, b) = break isPathSeparator x\n        h x\n          = if map toUpper (dropWhileEnd (== ' ') a) `elem` badElements then\n              a ++ \"_\" <.> b else x\n          where (a, b) = splitExtensions x"],"instances":[],"language":{"extensions":["PatternGuards","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll"],"isInstance":false}}