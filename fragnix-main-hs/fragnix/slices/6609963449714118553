{"sliceID":6609963449714118553,"uses":[{"reference":{"otherSlice":745317720056689458},"usedName":{"valueName":{"identifier":"builder"}},"qualification":"B"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"max"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":592477549928462751},"usedName":{"valueName":{"identifier":"sizeBound"}},"qualification":"BP"},{"reference":{"otherSlice":6742866475076404776},"usedName":{"constructorName":{"identifier":"Text"},"constructorTypeName":{"identifier":"Text"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":3038462019849922282},"usedName":{"constructorName":{"identifier":"BufferRange"},"constructorTypeName":{"identifier":"BufferRange"}},"qualification":"B"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">="}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"min"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":2309006110701472119},"usedName":{"valueName":{"identifier":"bufferFull"}},"qualification":"B"},{"reference":{"builtinModule":"GHC.Ptr"},"usedName":{"valueName":{"identifier":"minusPtr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"div"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"otherSlice":2253672583834626002},"usedName":{"valueName":{"identifier":"unsafeIndex"}},"qualification":"A"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<="}},"qualification":null},{"reference":{"otherSlice":6670216626389620141},"usedName":{"valueName":{"identifier":"runB"}},"qualification":"BP"},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":">>="}},"qualification":null},{"reference":{"otherSlice":4463961207685254290},"usedName":{"valueName":{"identifier":"shiftR"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"operator":".&."}},"qualification":null},{"reference":{"builtinModule":"GHC.Ptr"},"usedName":{"valueName":{"identifier":"plusPtr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"otherSlice":1071295638341592846},"usedName":{"valueName":{"identifier":"ord"}},"qualification":null},{"reference":{"otherSlice":5042014588424398546},"usedName":{"valueName":{"identifier":"chr2"}},"qualification":"U16"},{"reference":{"builtinModule":"Foreign.Storable"},"usedName":{"valueName":{"identifier":"poke"}},"qualification":null},{"reference":{"builtinModule":"GHC.Word"},"usedName":{"typeName":{"identifier":"Word8"}},"qualification":null},{"reference":{"otherSlice":2317942471882700773},"usedName":{"typeName":{"identifier":"BoundedPrim"}},"qualification":"BP"},{"reference":{"otherSlice":6742866475076404776},"usedName":{"typeName":{"identifier":"Text"}},"qualification":null},{"reference":{"otherSlice":5953179400377615708},"usedName":{"typeName":{"identifier":"Builder"}},"qualification":"B"}],"fragment":["encodeUtf8BuilderEscaped ::\n                         BP.BoundedPrim Word8 -> Text -> B.Builder","encodeUtf8BuilderEscaped be = \\ txt -> B.builder (mkBuildstep txt)\n  where bound = max 4 $ BP.sizeBound be\n        mkBuildstep (Text arr off len) !k = outerLoop off\n          where iend = off + len\n                outerLoop !i0 !br@(B.BufferRange op0 ope)\n                  | i0 >= iend = k br\n                  | outRemaining > 0 = goPartial (i0 + min outRemaining inpRemaining)\n                  | otherwise = return $ B.bufferFull bound op0 (outerLoop i0)\n                  where outRemaining = (ope `minusPtr` op0) `div` bound\n                        inpRemaining = iend - i0\n                        goPartial !iendTmp = go i0 op0\n                          where go !i !op\n                                  | i < iendTmp =\n                                    case A.unsafeIndex arr i of\n                                        w | w <= 127 ->\n                                            do BP.runB be (fromIntegral w) op >>= go (i + 1)\n                                          | w <= 2047 ->\n                                            do poke8 0 $ (w `shiftR` 6) + 192\n                                               poke8 1 $ (w .&. 63) + 128\n                                               go (i + 1) (op `plusPtr` 2)\n                                          | 55296 <= w && w <= 56319 ->\n                                            do let c = ord $ U16.chr2 w (A.unsafeIndex arr (i + 1))\n                                               poke8 0 $ (c `shiftR` 18) + 240\n                                               poke8 1 $ ((c `shiftR` 12) .&. 63) + 128\n                                               poke8 2 $ ((c `shiftR` 6) .&. 63) + 128\n                                               poke8 3 $ (c .&. 63) + 128\n                                               go (i + 2) (op `plusPtr` 4)\n                                          | otherwise ->\n                                            do poke8 0 $ (w `shiftR` 12) + 224\n                                               poke8 1 $ ((w `shiftR` 6) .&. 63) + 128\n                                               poke8 2 $ (w .&. 63) + 128\n                                               go (i + 1) (op `plusPtr` 3)\n                                  | otherwise = outerLoop i (B.BufferRange op ope)\n                                  where poke8 j v = poke (op `plusPtr` j) (fromIntegral v :: Word8)"],"instances":[],"language":{"extensions":["BangPatterns","ForeignFunctionInterface","GeneralizedNewtypeDeriving","MagicHash","UnliftedFFITypes","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}