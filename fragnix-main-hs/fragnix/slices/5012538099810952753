{"sliceID":5012538099810952753,"uses":[{"reference":{"otherSlice":6875617073296221384},"usedName":{"valueName":{"identifier":"accum_stream"}},"qualification":null},{"reference":{"otherSlice":474531255003761427},"usedName":{"valueName":{"identifier":"zipWith"}},"qualification":"Stream"},{"reference":{"otherSlice":2700673456966481432},"usedName":{"valueName":{"identifier":"stream"}},"qualification":null},{"reference":{"otherSlice":8934491602005769172},"usedName":{"typeName":{"identifier":"Vector"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null}],"fragment":["accumulate_ ::\n              (Vector v a, Vector v Int, Vector v b) =>\n              (a -> b -> a) -> v a -> v Int -> v b -> v a","accumulate_ f v is xs\n  = accum_stream f v (Stream.zipWith (,) (stream is) (stream xs))"],"instances":[],"language":{"extensions":["DeriveDataTypeable","Rank2Types","MultiParamTypeClasses","FlexibleContexts","TypeFamilies","ScopedTypeVariables","BangPatterns","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}