{"sliceID":2364391441733047429,"uses":[{"reference":{"otherSlice":8642306666063513779},"usedName":{"constructorName":{"identifier":"PS"},"constructorTypeName":{"identifier":"ByteString"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"/="}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Left"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<="}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Right"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":2109377013281436257},"usedName":{"valueName":{"identifier":"empty"}},"qualification":"B"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO"},"usedName":{"valueName":{"identifier":"unsafePerformIO"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":8772400319191501505},"usedName":{"valueName":{"identifier":"mallocByteString"}},"qualification":null},{"reference":{"builtinModule":"Foreign.ForeignPtr"},"usedName":{"valueName":{"identifier":"withForeignPtr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"builtinModule":"Prelude"},"usedName":{"valueName":{"operator":"$!"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">"}},"qualification":null},{"reference":{"builtinModule":"GHC.Ptr"},"usedName":{"valueName":{"identifier":"plusPtr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fmap"}},"qualification":null},{"reference":{"otherSlice":5261532151706010295},"usedName":{"valueName":{"identifier":"peek8"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"builtinModule":"GHC.Word"},"usedName":{"typeName":{"identifier":"Word32"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">="}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"identifier":"shiftL"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"operator":".|."}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":2203303499510377930},"usedName":{"valueName":{"identifier":"done"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"||"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"++"}},"qualification":null},{"reference":{"builtinModule":"GHC.Show"},"usedName":{"valueName":{"identifier":"show"}},"qualification":null},{"reference":{"builtinModule":"GHC.Ptr"},"usedName":{"valueName":{"identifier":"minusPtr"}},"qualification":null},{"reference":{"otherSlice":1982945244297598360},"usedName":{"valueName":{"identifier":"x"}},"qualification":null},{"reference":{"otherSlice":1195855373699628939},"usedName":{"valueName":{"identifier":"poke8"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"identifier":"shiftR"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"divMod"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"*"}},"qualification":null},{"reference":{"builtinModule":"GHC.ForeignPtr"},"usedName":{"typeName":{"identifier":"ForeignPtr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Word"},"usedName":{"typeName":{"identifier":"Word8"}},"qualification":null},{"reference":{"otherSlice":8642306666063513779},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"typeName":{"identifier":"Either"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"String"}},"qualification":null}],"fragment":["decodeWithTable ::\n                ForeignPtr Word8 -> ByteString -> Either String ByteString","decodeWithTable decodeFP (PS sfp soff slen)\n  | drem /= 0 = Left \"invalid padding\"\n  | dlen <= 0 = Right B.empty\n  | otherwise =\n    unsafePerformIO $\n      do dfp <- mallocByteString dlen\n         withForeignPtr decodeFP $\n           \\ !decptr ->\n             do let finish dbytes\n                      = return . Right $! if dbytes > 0 then PS dfp 0 dbytes else B.empty\n                    bail = return . Left\n                withForeignPtr sfp $\n                  \\ !sptr ->\n                    do let sEnd = sptr `plusPtr` (slen + soff)\n                           look p\n                             = do ix <- fromIntegral `fmap` peek8 p\n                                  v <- peek8 (decptr `plusPtr` ix)\n                                  return $! fromIntegral v :: IO Word32\n                           fill !dp !sp !n\n                             | sp >= sEnd = finish n\n                             | otherwise =\n                               {-# SCC \"decodeWithTable/fill\" #-}\n                                 do a <- look sp\n                                    b <- look (sp `plusPtr` 1)\n                                    c <- look (sp `plusPtr` 2)\n                                    d <- look (sp `plusPtr` 3)\n                                    let w = (a `shiftL` 18) .|. (b `shiftL` 12) .|. (c `shiftL` 6)\n                                              .|. d\n                                    if a == done || b == done then\n                                      bail $\n                                        \"invalid padding near offset \" ++ show (sp `minusPtr` sptr)\n                                      else\n                                      if a .|. b .|. c .|. d == x then\n                                        bail $\n                                          \"invalid base64 encoding near offset \" ++\n                                            show (sp `minusPtr` sptr)\n                                        else\n                                        do poke8 dp $ fromIntegral (w `shiftR` 16)\n                                           if c == done then finish $ n + 1 else\n                                             do poke8 (dp `plusPtr` 1) $ fromIntegral (w `shiftR` 8)\n                                                if d == done then finish $! n + 2 else\n                                                  do poke8 (dp `plusPtr` 2) $ fromIntegral w\n                                                     fill (dp `plusPtr` 3) (sp `plusPtr` 4) (n + 3)\n                       withForeignPtr dfp $ \\ dptr -> fill dptr (sptr `plusPtr` soff) 0\n  where (di, drem) = slen `divMod` 4\n        dlen = di * 3"],"instances":[],"language":{"extensions":["BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}