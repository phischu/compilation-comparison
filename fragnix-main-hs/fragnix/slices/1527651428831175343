{"sliceID":1527651428831175343,"uses":[{"reference":{"otherSlice":7742144946936664573},"usedName":{"constructorName":{"identifier":"ServerSettings"},"constructorTypeName":{"identifier":"ServerSettings"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"Control.Exception.Base"},"usedName":{"valueName":{"identifier":"bracket"}},"qualification":"E"},{"reference":{"otherSlice":1729543561641749452},"usedName":{"valueName":{"identifier":"bindPortTCP"}},"qualification":null},{"reference":{"otherSlice":1691131710779787624},"usedName":{"valueName":{"identifier":"close"}},"qualification":"NS"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":">>"}},"qualification":null},{"reference":{"builtinModule":"Control.Monad"},"usedName":{"valueName":{"identifier":"forever"}},"qualification":null},{"reference":{"builtinModule":"Control.Exception.Base"},"usedName":{"valueName":{"identifier":"bracketOnError"}},"qualification":"E"},{"reference":{"otherSlice":3472506172977646331},"usedName":{"valueName":{"identifier":"acceptSafe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fmap"}},"qualification":null},{"reference":{"otherSlice":1108157117407349289},"usedName":{"valueName":{"identifier":"getSocketName"}},"qualification":"NS"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO"},"usedName":{"valueName":{"identifier":"mask"}},"qualification":"E"},{"reference":{"builtinModule":"GHC.Conc.Sync"},"usedName":{"valueName":{"identifier":"forkIO"}},"qualification":null},{"reference":{"builtinModule":"Control.Exception.Base"},"usedName":{"valueName":{"identifier":"finally"}},"qualification":"E"},{"reference":{"otherSlice":7742144946936664573},"usedName":{"typeName":{"identifier":"ServerSettings"}},"qualification":null},{"reference":{"otherSlice":6646288602653548989},"usedName":{"typeName":{"identifier":"ConnectionHandle"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null}],"fragment":["runTCPServerWithHandle ::\n                       ServerSettings -> ConnectionHandle -> IO a","runTCPServerWithHandle\n  (ServerSettings port host msocket afterBind needLocalAddr _) handle\n  = case msocket of\n        Nothing -> E.bracket (bindPortTCP port host) NS.close inner\n        Just lsocket -> inner lsocket\n  where inner lsocket = afterBind lsocket >> forever (serve lsocket)\n        serve lsocket\n          = E.bracketOnError (acceptSafe lsocket)\n              (\\ (socket, _) -> NS.close socket)\n              $\n              \\ (socket, addr) ->\n                do mlocal <- if needLocalAddr then\n                               fmap Just $ NS.getSocketName socket else return Nothing\n                   _ <- E.mask $\n                          \\ restore ->\n                            forkIO $\n                              restore (handle socket addr mlocal) `E.finally` NS.close socket\n                   return ()"],"instances":[],"language":{"extensions":["ScopedTypeVariables","BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}