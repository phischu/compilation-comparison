{"sliceID":311715157026492864,"uses":[{"reference":{"otherSlice":6856618864151171204},"usedName":{"constructorName":{"identifier":"One"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"otherSlice":6693068585238707304},"usedName":{"constructorName":{"identifier":"Full"},"constructorTypeName":{"identifier":"Del"}},"qualification":null},{"reference":{"otherSlice":3435130670594247203},"usedName":{"constructorName":{"identifier":"FullDig"},"constructorTypeName":{"identifier":"DelDig"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":6693068585238707304},"usedName":{"constructorName":{"identifier":"Defect"},"constructorTypeName":{"identifier":"Del"}},"qualification":null},{"reference":{"otherSlice":3435130670594247203},"usedName":{"constructorName":{"identifier":"DefectDig"},"constructorTypeName":{"identifier":"DelDig"}},"qualification":null},{"reference":{"otherSlice":6856618864151171204},"usedName":{"constructorName":{"identifier":"Two"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"otherSlice":2658389187921074114},"usedName":{"valueName":{"identifier":"size"}},"qualification":null},{"reference":{"otherSlice":1673753023314990609},"usedName":{"constructorName":{"identifier":"Node3"},"constructorTypeName":{"identifier":"Node"}},"qualification":null},{"reference":{"otherSlice":1673753023314990609},"usedName":{"constructorName":{"identifier":"Node2"},"constructorTypeName":{"identifier":"Node"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":6856618864151171204},"usedName":{"constructorName":{"identifier":"Three"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"otherSlice":6856618864151171204},"usedName":{"constructorName":{"identifier":"Four"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"otherSlice":2658389187921074114},"usedName":{"typeName":{"identifier":"Sized"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"otherSlice":1673753023314990609},"usedName":{"typeName":{"identifier":"Node"}},"qualification":null},{"reference":{"otherSlice":6693068585238707304},"usedName":{"typeName":{"identifier":"Del"}},"qualification":null},{"reference":{"otherSlice":6856618864151171204},"usedName":{"typeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"otherSlice":3435130670594247203},"usedName":{"typeName":{"identifier":"DelDig"}},"qualification":null}],"fragment":["delDigit ::\n           Sized a =>\n           (Int -> Node a -> Del a) -> Int -> Digit (Node a) -> DelDig a","delDigit f !i (One a)\n  = case f i a of\n        Full a' -> FullDig $ One a'\n        Defect e -> DefectDig e\ndelDigit f i (Two a b)\n  | i < sa =\n    case f i a of\n        Full a' -> FullDig $ Two a' b\n        Defect e -> let !se = size e in\n                      case b of\n                          Node3 sxyz x y z -> FullDig $\n                                                Two (Node2 (se + sx) e x) (Node2 (sxyz - sx) y z)\n                            where !sx = size x\n                          Node2 sxy x y -> FullDig $ One (Node3 (se + sxy) e x y)\n  | otherwise =\n    case f (i - sa) b of\n        Full b' -> FullDig $ Two a b'\n        Defect e -> let !se = size e in\n                      case a of\n                          Node3 sxyz x y z -> FullDig $\n                                                Two (Node2 (sxyz - sz) x y) (Node2 (sz + se) z e)\n                            where !sz = size z\n                          Node2 sxy x y -> FullDig $ One (Node3 (sxy + se) x y e)\n  where sa = size a\ndelDigit f i (Three a b c)\n  | i < sa =\n    case f i a of\n        Full a' -> FullDig $ Three a' b c\n        Defect e -> let !se = size e in\n                      case b of\n                          Node3 sxyz x y z -> FullDig $\n                                                Three (Node2 (se + sx) e x) (Node2 (sxyz - sx) y z)\n                                                  c\n                            where !sx = size x\n                          Node2 sxy x y -> FullDig $ Two (Node3 (se + sxy) e x y) c\n  | i < sab =\n    case f (i - sa) b of\n        Full b' -> FullDig $ Three a b' c\n        Defect e -> let !se = size e in\n                      case a of\n                          Node3 sxyz x y z -> FullDig $\n                                                Three (Node2 (sxyz - sz) x y) (Node2 (sz + se) z e)\n                                                  c\n                            where !sz = size z\n                          Node2 sxy x y -> FullDig $ Two (Node3 (sxy + se) x y e) c\n  | otherwise =\n    case f (i - sab) c of\n        Full c' -> FullDig $ Three a b c'\n        Defect e -> let !se = size e in\n                      case b of\n                          Node3 sxyz x y z -> FullDig $\n                                                Three a (Node2 (sxyz - sz) x y)\n                                                  (Node2 (sz + se) z e)\n                            where !sz = size z\n                          Node2 sxy x y -> FullDig $ Two a (Node3 (sxy + se) x y e)\n  where sa = size a\n        sab = sa + size b\ndelDigit f i (Four a b c d)\n  | i < sa =\n    case f i a of\n        Full a' -> FullDig $ Four a' b c d\n        Defect e -> let !se = size e in\n                      case b of\n                          Node3 sxyz x y z -> FullDig $\n                                                Four (Node2 (se + sx) e x) (Node2 (sxyz - sx) y z) c\n                                                  d\n                            where !sx = size x\n                          Node2 sxy x y -> FullDig $ Three (Node3 (se + sxy) e x y) c d\n  | i < sab =\n    case f (i - sa) b of\n        Full b' -> FullDig $ Four a b' c d\n        Defect e -> let !se = size e in\n                      case a of\n                          Node3 sxyz x y z -> FullDig $\n                                                Four (Node2 (sxyz - sz) x y) (Node2 (sz + se) z e) c\n                                                  d\n                            where !sz = size z\n                          Node2 sxy x y -> FullDig $ Three (Node3 (sxy + se) x y e) c d\n  | i < sabc =\n    case f (i - sab) c of\n        Full c' -> FullDig $ Four a b c' d\n        Defect e -> let !se = size e in\n                      case b of\n                          Node3 sxyz x y z -> FullDig $\n                                                Four a (Node2 (sxyz - sz) x y) (Node2 (sz + se) z e)\n                                                  d\n                            where !sz = size z\n                          Node2 sxy x y -> FullDig $ Three a (Node3 (sxy + se) x y e) d\n  | otherwise =\n    case f (i - sabc) d of\n        Full d' -> FullDig $ Four a b c d'\n        Defect e -> let !se = size e in\n                      case c of\n                          Node3 sxyz x y z -> FullDig $\n                                                Four a b (Node2 (sxyz - sz) x y)\n                                                  (Node2 (sz + se) z e)\n                            where !sz = size z\n                          Node2 sxy x y -> FullDig $ Three a b (Node3 (sxy + se) x y e)\n  where sa = size a\n        sab = sa + size b\n        sabc = sab + size c"],"instances":[],"language":{"extensions":["BangPatterns","DeriveDataTypeable","StandaloneDeriving","FlexibleInstances","ScopedTypeVariables","DeriveGeneric","TypeFamilies","PatternSynonyms","ViewPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}