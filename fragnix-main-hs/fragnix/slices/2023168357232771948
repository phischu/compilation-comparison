{"sliceID":2023168357232771948,"uses":[{"reference":{"otherSlice":6856618864151171204},"usedName":{"constructorName":{"identifier":"One"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"otherSlice":818592245649234073},"usedName":{"valueName":{"operator":"$!?"}},"qualification":null},{"reference":{"otherSlice":6856618864151171204},"usedName":{"constructorName":{"identifier":"Two"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"otherSlice":7178927419540684665},"usedName":{"valueName":{"identifier":"mseq"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"otherSlice":2658389187921074114},"usedName":{"valueName":{"identifier":"size"}},"qualification":null},{"reference":{"otherSlice":6856618864151171204},"usedName":{"constructorName":{"identifier":"Three"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":6856618864151171204},"usedName":{"constructorName":{"identifier":"Four"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"otherSlice":2658389187921074114},"usedName":{"typeName":{"identifier":"Sized"}},"qualification":null},{"reference":{"otherSlice":2195349210334318825},"usedName":{"typeName":{"identifier":"MaybeForce"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"otherSlice":6856618864151171204},"usedName":{"typeName":{"identifier":"Digit"}},"qualification":null}],"fragment":["adjustDigit ::\n              (Sized a, MaybeForce a) =>\n              (Int -> a -> a) -> Int -> Digit a -> Digit a","adjustDigit f !i (One a) = One $!? f i a\nadjustDigit f i (Two a b)\n  | i < sa = let fia = f i a in fia `mseq` Two fia b\n  | otherwise = let fisab = f (i - sa) b in fisab `mseq` Two a fisab\n  where sa = size a\nadjustDigit f i (Three a b c)\n  | i < sa = let fia = f i a in fia `mseq` Three fia b c\n  | i < sab =\n    let fisab = f (i - sa) b in fisab `mseq` Three a fisab c\n  | otherwise =\n    let fisabc = f (i - sab) c in fisabc `mseq` Three a b fisabc\n  where sa = size a\n        sab = sa + size b\nadjustDigit f i (Four a b c d)\n  | i < sa = let fia = f i a in fia `mseq` Four fia b c d\n  | i < sab =\n    let fisab = f (i - sa) b in fisab `mseq` Four a fisab c d\n  | i < sabc =\n    let fisabc = f (i - sab) c in fisabc `mseq` Four a b fisabc d\n  | otherwise =\n    let fisabcd = f (i - sabc) d in fisabcd `mseq` Four a b c fisabcd\n  where sa = size a\n        sab = sa + size b\n        sabc = sab + size c"],"instances":[],"language":{"extensions":["BangPatterns","DeriveDataTypeable","StandaloneDeriving","FlexibleInstances","ScopedTypeVariables","DeriveGeneric","TypeFamilies","PatternSynonyms","ViewPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}