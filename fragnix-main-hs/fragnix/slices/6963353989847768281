{"sliceID":6963353989847768281,"uses":[{"reference":{"otherSlice":257983712776424234},"usedName":{"valueName":{"identifier":"hash"}},"qualification":null},{"reference":{"otherSlice":8924003398132186113},"usedName":{"constructorName":{"identifier":"Empty"},"constructorTypeName":{"identifier":"HashMap"}},"qualification":null},{"reference":{"otherSlice":8924003398132186113},"usedName":{"constructorName":{"identifier":"Leaf"},"constructorTypeName":{"identifier":"HashMap"}},"qualification":null},{"reference":{"otherSlice":9131127258957915120},"usedName":{"constructorName":{"identifier":"L"},"constructorTypeName":{"identifier":"Leaf"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":8924003398132186113},"usedName":{"constructorName":{"identifier":"BitmapIndexed"},"constructorTypeName":{"identifier":"HashMap"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"operator":".&."}},"qualification":null},{"reference":{"otherSlice":4390823793232384339},"usedName":{"valueName":{"identifier":"index"}},"qualification":"A"},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":623902709427273711},"usedName":{"valueName":{"identifier":"bitsPerSubkey"}},"qualification":null},{"reference":{"otherSlice":5568294325725640449},"usedName":{"valueName":{"identifier":"update"}},"qualification":"A"},{"reference":{"builtinModule":"Prelude"},"usedName":{"valueName":{"operator":"$!"}},"qualification":null},{"reference":{"otherSlice":1590864845463237458},"usedName":{"valueName":{"identifier":"mask"}},"qualification":null},{"reference":{"otherSlice":3371961364943610728},"usedName":{"valueName":{"identifier":"sparseIndex"}},"qualification":null},{"reference":{"otherSlice":8924003398132186113},"usedName":{"constructorName":{"identifier":"Full"},"constructorTypeName":{"identifier":"HashMap"}},"qualification":null},{"reference":{"otherSlice":5245304807376376639},"usedName":{"valueName":{"identifier":"index"}},"qualification":null},{"reference":{"otherSlice":3729731212205482774},"usedName":{"valueName":{"identifier":"update16"}},"qualification":null},{"reference":{"otherSlice":8924003398132186113},"usedName":{"constructorName":{"identifier":"Collision"},"constructorTypeName":{"identifier":"HashMap"}},"qualification":null},{"reference":{"otherSlice":7747795241240110640},"usedName":{"valueName":{"identifier":"updateWith"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"typeName":{"identifier":"Eq"}},"qualification":null},{"reference":{"otherSlice":7954954090554769191},"usedName":{"typeName":{"identifier":"Hashable"}},"qualification":null},{"reference":{"otherSlice":8924003398132186113},"usedName":{"typeName":{"identifier":"HashMap"}},"qualification":null}],"fragment":["adjust ::\n         (Eq k, Hashable k) => (v -> v) -> k -> HashMap k v -> HashMap k v","adjust f k0 m0 = go h0 k0 0 m0\n  where h0 = hash k0\n        go !_ !_ !_ Empty = Empty\n        go h k _ t@(Leaf hy (L ky y))\n          | hy == h && ky == k = Leaf h (L k (f y))\n          | otherwise = t\n        go h k s t@(BitmapIndexed b ary)\n          | b .&. m == 0 = t\n          | otherwise =\n            let st = A.index ary i\n                st' = go h k (s + bitsPerSubkey) st\n                ary' = A.update ary i $! st'\n              in BitmapIndexed b ary'\n          where m = mask h s\n                i = sparseIndex b m\n        go h k s (Full ary)\n          = let i = index h s\n                st = A.index ary i\n                st' = go h k (s + bitsPerSubkey) st\n                ary' = update16 ary i $! st'\n              in Full ary'\n        go h k _ t@(Collision hy v)\n          | h == hy = Collision h (updateWith f k v)\n          | otherwise = t"],"instances":[],"language":{"extensions":["BangPatterns","DeriveDataTypeable","MagicHash","ScopedTypeVariables","TypeFamilies","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}