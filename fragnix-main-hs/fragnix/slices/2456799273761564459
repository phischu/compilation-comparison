{"sliceID":2456799273761564459,"uses":[{"reference":{"otherSlice":3395464263379797934},"usedName":{"constructorName":{"identifier":"SpacePadding"},"constructorTypeName":{"identifier":"Padding"}},"qualification":null},{"reference":{"otherSlice":3395464263379797934},"usedName":{"constructorName":{"identifier":"ZeroPadding"},"constructorTypeName":{"identifier":"Padding"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"map"}},"qualification":null},{"reference":{"builtinModule":"Data.Tuple"},"usedName":{"valueName":{"identifier":"fst"}},"qualification":null},{"reference":{"otherSlice":2448737557573459507},"usedName":{"valueName":{"identifier":"months"}},"qualification":null},{"reference":{"builtinModule":"Data.Tuple"},"usedName":{"valueName":{"identifier":"snd"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":2448737557573459507},"usedName":{"valueName":{"identifier":"wDays"}},"qualification":null},{"reference":{"otherSlice":2448737557573459507},"usedName":{"valueName":{"identifier":"amPm"}},"qualification":null},{"reference":{"builtinModule":"Control.Monad"},"usedName":{"valueName":{"identifier":"liftM2"}},"qualification":null},{"reference":{"otherSlice":7407075264140047003},"usedName":{"valueName":{"identifier":"char"}},"qualification":null},{"reference":{"builtinModule":"Text.ParserCombinators.ReadP"},"usedName":{"valueName":{"identifier":"munch"}},"qualification":null},{"reference":{"builtinModule":"GHC.Unicode"},"usedName":{"valueName":{"identifier":"isDigit"}},"qualification":null},{"reference":{"builtinModule":"Text.ParserCombinators.ReadP"},"usedName":{"valueName":{"operator":"<++"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"Text.ParserCombinators.ReadP"},"usedName":{"valueName":{"identifier":"munch1"}},"qualification":null},{"reference":{"builtinModule":"GHC.Unicode"},"usedName":{"valueName":{"identifier":"isAlpha"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":">>"}},"qualification":null},{"reference":{"builtinModule":"Control.Monad"},"usedName":{"valueName":{"identifier":"liftM"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fail"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"++"}},"qualification":null},{"reference":{"builtinModule":"GHC.Show"},"usedName":{"valueName":{"identifier":"show"}},"qualification":null},{"reference":{"builtinModule":"Text.ParserCombinators.ReadP"},"usedName":{"valueName":{"identifier":"choice"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"otherSlice":7976384395718303954},"usedName":{"valueName":{"identifier":"string"}},"qualification":null},{"reference":{"builtinModule":"Text.ParserCombinators.ReadP"},"usedName":{"valueName":{"identifier":"count"}},"qualification":null},{"reference":{"builtinModule":"Text.ParserCombinators.ReadP"},"usedName":{"valueName":{"identifier":"satisfy"}},"qualification":null},{"reference":{"builtinModule":"Text.ParserCombinators.ReadP"},"usedName":{"valueName":{"identifier":"skipSpaces"}},"qualification":null},{"reference":{"builtinModule":"Text.ParserCombinators.ReadP"},"usedName":{"valueName":{"identifier":"many1"}},"qualification":null},{"reference":{"otherSlice":3395464263379797934},"usedName":{"constructorName":{"identifier":"NoPadding"},"constructorTypeName":{"identifier":"Padding"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"valueName":{"identifier":"fromMaybe"}},"qualification":null},{"reference":{"builtinModule":"Text.ParserCombinators.ReadP"},"usedName":{"valueName":{"identifier":"optional"}},"qualification":null},{"reference":{"otherSlice":2448737557573459507},"usedName":{"typeName":{"identifier":"TimeLocale"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":3395464263379797934},"usedName":{"typeName":{"identifier":"Padding"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Char"}},"qualification":null},{"reference":{"builtinModule":"Text.ParserCombinators.ReadP"},"usedName":{"typeName":{"identifier":"ReadP"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"String"}},"qualification":null}],"fragment":["parseValue :: TimeLocale -> Maybe Padding -> Char -> ReadP String","parseValue l mpad c\n  = case c of\n        'C' -> digits SpacePadding 2\n        'f' -> digits SpacePadding 2\n        'Y' -> digits SpacePadding 4\n        'G' -> digits SpacePadding 4\n        'y' -> digits ZeroPadding 2\n        'g' -> digits ZeroPadding 2\n        'B' -> oneOf (map fst (months l))\n        'b' -> oneOf (map snd (months l))\n        'm' -> digits ZeroPadding 2\n        'd' -> digits ZeroPadding 2\n        'e' -> digits SpacePadding 2\n        'V' -> digits ZeroPadding 2\n        'U' -> digits ZeroPadding 2\n        'W' -> digits ZeroPadding 2\n        'u' -> oneOf $ map (: []) ['1' .. '7']\n        'a' -> oneOf (map snd (wDays l))\n        'A' -> oneOf (map fst (wDays l))\n        'w' -> oneOf $ map (: []) ['0' .. '6']\n        'j' -> digits ZeroPadding 3\n        'P' -> oneOf (let (am, pm) = amPm l in [am, pm])\n        'p' -> oneOf (let (am, pm) = amPm l in [am, pm])\n        'H' -> digits ZeroPadding 2\n        'k' -> digits SpacePadding 2\n        'I' -> digits ZeroPadding 2\n        'l' -> digits SpacePadding 2\n        'M' -> digits ZeroPadding 2\n        'S' -> digits ZeroPadding 2\n        'q' -> digits ZeroPadding 12\n        'Q' -> liftM2 (:) (char '.') (munch isDigit) <++ return \"\"\n        'z' -> numericTZ\n        'Z' -> munch1 isAlpha <++ numericTZ <++ return \"\"\n        's' -> (char '-' >> liftM ('-' :) (munch1 isDigit)) <++\n                 munch1 isDigit\n        _ -> fail $ \"Unknown format character: \" ++ show c\n  where oneOf = choice . map string\n        digitsforce ZeroPadding n = count n (satisfy isDigit)\n        digitsforce SpacePadding _n = skipSpaces >> many1 (satisfy isDigit)\n        digitsforce NoPadding _n = many1 (satisfy isDigit)\n        digits pad = digitsforce (fromMaybe pad mpad)\n        numericTZ\n          = do s <- choice [char '+', char '-']\n               h <- digitsforce ZeroPadding 2\n               optional (char ':')\n               m <- digitsforce ZeroPadding 2\n               return (s : h ++ m)"],"instances":[],"language":{"extensions":["Rank2Types","DeriveDataTypeable","StandaloneDeriving","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}