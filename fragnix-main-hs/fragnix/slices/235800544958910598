{"sliceID":235800544958910598,"uses":[{"reference":{"otherSlice":5876841121207984499},"usedName":{"valueName":{"identifier":"zipWithM"}},"qualification":null},{"reference":{"otherSlice":7651796041556584767},"usedName":{"valueName":{"identifier":"zip"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Monad"}},"qualification":null},{"reference":{"otherSlice":9209112058599157037},"usedName":{"typeName":{"identifier":"Stream"}},"qualification":null}],"fragment":["zipWith4M ::\n            Monad m =>\n            (a -> b -> c -> d -> m e) ->\n              Stream m a -> Stream m b -> Stream m c -> Stream m d -> Stream m e","zipWith4M f sa sb sc sd\n  = zipWithM (\\ (a, b) (c, d) -> f a b c d) (zip sa sb) (zip sc sd)"],"instances":[],"language":{"extensions":["DeriveDataTypeable","ExistentialQuantification","Rank2Types","BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}