{"sliceID":8311836946902545655,"uses":[{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Monad"}},"qualification":null},{"reference":{"otherSlice":3699954186845348343},"usedName":{"typeName":{"identifier":"ScottyError"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"MonadPlus"}},"qualification":null},{"reference":{"otherSlice":1811116647704585236},"usedName":{"typeName":{"identifier":"ActionT"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"mzero"}},"qualification":null},{"reference":{"otherSlice":1811116647704585236},"usedName":{"constructorName":{"identifier":"ActionT"},"constructorTypeName":{"identifier":"ActionT"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"otherSlice":1241761596975731733},"usedName":{"constructorName":{"identifier":"ExceptT"},"constructorTypeName":{"identifier":"ExceptT"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Left"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":7476197073766115792},"usedName":{"constructorName":{"identifier":"Next"},"constructorTypeName":{"identifier":"ActionError"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"mplus"}},"qualification":null},{"reference":{"otherSlice":8762085800441023324},"usedName":{"valueName":{"identifier":"runExceptT"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Right"},"constructorTypeName":{"identifier":"Either"}},"qualification":null}],"fragment":["instance (Monad m, ScottyError e) => MonadPlus (ActionT e m) where\n        mzero = ActionT . ExceptT . return $ Left Next\n        ActionT m `mplus` ActionT n\n          = ActionT . ExceptT $\n              do a <- runExceptT m\n                 case a of\n                     Left _ -> runExceptT n\n                     Right r -> return $ Right r"],"instances":[],"language":{"extensions":["DeriveDataTypeable","FlexibleInstances","GeneralizedNewtypeDeriving","MultiParamTypeClasses","TypeFamilies","UndecidableInstances","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":true}}