{"sliceID":6093341112118109974,"uses":[{"reference":{"builtinModule":"GHC.Arr"},"usedName":{"valueName":{"operator":"!"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"length"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"otherSlice":6258334547149508064},"usedName":{"typeName":{"identifier":"Vertex"}},"qualification":null},{"reference":{"builtinModule":"Data.List"},"usedName":{"valueName":{"identifier":"sortBy"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"zipWith"}},"qualification":null},{"reference":{"builtinModule":"GHC.Arr"},"usedName":{"valueName":{"identifier":"array"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"valueName":{"identifier":"mapMaybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"compare"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"LT"},"constructorTypeName":{"identifier":"Ordering"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"EQ"},"constructorTypeName":{"identifier":"Ordering"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"GT"},"constructorTypeName":{"identifier":"Ordering"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"div"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"typeName":{"identifier":"Ord"}},"qualification":null},{"reference":{"otherSlice":4162394584857873910},"usedName":{"typeName":{"identifier":"Graph"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null}],"fragment":["graphFromEdges ::\n                 Ord key =>\n                 [(node, key, [key])] ->\n                   (Graph, Vertex -> (node, key, [key]), key -> Maybe Vertex)","graphFromEdges edges0 = (graph, \\ v -> vertex_map ! v, key_vertex)\n  where max_v = length edges0 - 1\n        bounds0 = (0, max_v) :: (Vertex, Vertex)\n        sorted_edges = sortBy lt edges0\n        edges1 = zipWith (,) [0 ..] sorted_edges\n        graph\n          = array bounds0\n              [(,) v (mapMaybe key_vertex ks) | (,) v (_, _, ks) <- edges1]\n        key_map = array bounds0 [(,) v k | (,) v (_, k, _) <- edges1]\n        vertex_map = array bounds0 edges1\n        (_, k1, _) `lt` (_, k2, _) = k1 `compare` k2\n        key_vertex k = findVertex 0 max_v\n          where findVertex a b | a > b = Nothing\n                findVertex a b\n                  = case compare k (key_map ! mid) of\n                        LT -> findVertex a (mid - 1)\n                        EQ -> Just mid\n                        GT -> findVertex (mid + 1) b\n                  where mid = a + (b - a) `div` 2"],"instances":[],"language":{"extensions":["Rank2Types","DeriveDataTypeable","StandaloneDeriving","DeriveGeneric","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}