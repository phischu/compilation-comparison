{"sliceID":3066485971768940934,"uses":[{"reference":{"otherSlice":112962972499938216},"usedName":{"constructorName":{"identifier":"AuthSettings"},"constructorTypeName":{"identifier":"AuthSettings"}},"qualification":null},{"reference":{"otherSlice":112962972499938216},"usedName":{"valueName":{"identifier":"authIsProtected"}},"qualification":null},{"reference":{"otherSlice":112962972499938216},"usedName":{"valueName":{"identifier":"authOnNoAuth"}},"qualification":null},{"reference":{"otherSlice":112962972499938216},"usedName":{"valueName":{"identifier":"authRealm"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"True"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"lookup"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":30758760526534613},"usedName":{"valueName":{"identifier":"requestHeaders"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"False"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":968296184656941152},"usedName":{"valueName":{"identifier":"break"}},"qualification":"S"},{"reference":{"otherSlice":4972725948434287466},"usedName":{"valueName":{"identifier":"isSpace"}},"qualification":null},{"reference":{"otherSlice":7221301458160518288},"usedName":{"valueName":{"identifier":"map"}},"qualification":"S"},{"reference":{"otherSlice":4960296354650716587},"usedName":{"valueName":{"identifier":"toLower"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":8651865326705395037},"usedName":{"valueName":{"identifier":"dropWhile"}},"qualification":"S"},{"reference":{"otherSlice":8556082736304368763},"usedName":{"valueName":{"identifier":"uncons"}},"qualification":"S"},{"reference":{"otherSlice":4902200423374541674},"usedName":{"valueName":{"identifier":"decodeLenient"}},"qualification":null},{"reference":{"otherSlice":7389831803702733683},"usedName":{"valueName":{"identifier":"breakByte"}},"qualification":"S"},{"reference":{"otherSlice":5389503652889343754},"usedName":{"valueName":{"identifier":"_colon"}},"qualification":null},{"reference":{"otherSlice":6060063030055900179},"usedName":{"typeName":{"identifier":"CheckCreds"}},"qualification":null},{"reference":{"otherSlice":112962972499938216},"usedName":{"typeName":{"identifier":"AuthSettings"}},"qualification":null},{"reference":{"otherSlice":3389037324188664509},"usedName":{"typeName":{"identifier":"Middleware"}},"qualification":null}],"fragment":["basicAuth :: CheckCreds -> AuthSettings -> Middleware","basicAuth checkCreds AuthSettings{..} app req sendResponse\n  = do isProtected <- authIsProtected req\n       allowed <- if isProtected then check else return True\n       if allowed then app req sendResponse else\n         authOnNoAuth authRealm req sendResponse\n  where check\n          = case lookup \"Authorization\" $ requestHeaders req of\n                Nothing -> return False\n                Just bs -> let (x, y) = S.break isSpace bs in\n                             if S.map toLower x == \"basic\" then checkB64 $ S.dropWhile isSpace y\n                               else return False\n        checkB64 encoded\n          = case S.uncons password' of\n                Just (_, password) -> checkCreds username password\n                Nothing -> return False\n          where raw = decodeLenient encoded\n                (username, password') = S.breakByte _colon raw"],"instances":[],"language":{"extensions":["RecordWildCards","OverloadedStrings","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}