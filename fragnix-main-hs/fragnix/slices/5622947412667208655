{"sliceID":5622947412667208655,"uses":[{"reference":{"otherSlice":8519534216426756697},"usedName":{"valueName":{"identifier":"pack"}},"qualification":"B"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":6672743055658266892},"usedName":{"valueName":{"identifier":"lookup'"}},"qualification":null},{"reference":{"otherSlice":1423364008110662379},"usedName":{"valueName":{"identifier":"safeRead"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"lookup"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"map"}},"qualification":null},{"reference":{"builtinModule":"GHC.Unicode"},"usedName":{"valueName":{"identifier":"toLower"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"True"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"False"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":231875607056582677},"usedName":{"valueName":{"identifier":"getAddrInfo"}},"qualification":null},{"reference":{"otherSlice":8548432960023453856},"usedName":{"valueName":{"identifier":"addrAddress"}},"qualification":null},{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"error"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"++"}},"qualification":null},{"reference":{"otherSlice":7691665640014514822},"usedName":{"valueName":{"identifier":"cleanupVarName"}},"qualification":null},{"reference":{"builtinModule":"Control.Arrow"},"usedName":{"valueName":{"operator":"***"}},"qualification":null},{"reference":{"otherSlice":30758760526534613},"usedName":{"constructorName":{"identifier":"Request"},"constructorTypeName":{"identifier":"Request"}},"qualification":null},{"reference":{"otherSlice":30758760526534613},"usedName":{"valueName":{"identifier":"requestMethod"}},"qualification":null},{"reference":{"otherSlice":30758760526534613},"usedName":{"valueName":{"identifier":"rawPathInfo"}},"qualification":null},{"reference":{"otherSlice":30758760526534613},"usedName":{"valueName":{"identifier":"pathInfo"}},"qualification":null},{"reference":{"otherSlice":5326495752709864314},"usedName":{"valueName":{"identifier":"decodePathSegments"}},"qualification":"H"},{"reference":{"otherSlice":30758760526534613},"usedName":{"valueName":{"identifier":"rawQueryString"}},"qualification":null},{"reference":{"otherSlice":30758760526534613},"usedName":{"valueName":{"identifier":"queryString"}},"qualification":null},{"reference":{"otherSlice":5362669780704885461},"usedName":{"valueName":{"identifier":"parseQuery"}},"qualification":"H"},{"reference":{"otherSlice":30758760526534613},"usedName":{"valueName":{"identifier":"requestHeaders"}},"qualification":null},{"reference":{"otherSlice":30758760526534613},"usedName":{"valueName":{"identifier":"isSecure"}},"qualification":null},{"reference":{"otherSlice":30758760526534613},"usedName":{"valueName":{"identifier":"remoteHost"}},"qualification":null},{"reference":{"otherSlice":30758760526534613},"usedName":{"valueName":{"identifier":"httpVersion"}},"qualification":null},{"reference":{"otherSlice":4727366450451163319},"usedName":{"valueName":{"identifier":"http11"}},"qualification":"H"},{"reference":{"otherSlice":30758760526534613},"usedName":{"valueName":{"identifier":"requestBody"}},"qualification":null},{"reference":{"otherSlice":30758760526534613},"usedName":{"valueName":{"identifier":"vault"}},"qualification":null},{"reference":{"builtinModule":"Data.Monoid"},"usedName":{"valueName":{"identifier":"mempty"}},"qualification":null},{"reference":{"otherSlice":30758760526534613},"usedName":{"valueName":{"identifier":"requestBodyLength"}},"qualification":null},{"reference":{"otherSlice":551756907767496553},"usedName":{"constructorName":{"identifier":"KnownLength"},"constructorTypeName":{"identifier":"RequestBodyLength"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"otherSlice":30758760526534613},"usedName":{"valueName":{"identifier":"requestHeaderHost"}},"qualification":null},{"reference":{"otherSlice":30758760526534613},"usedName":{"valueName":{"identifier":"requestHeaderRange"}},"qualification":null},{"reference":{"builtinModule":"Control.Monad"},"usedName":{"valueName":{"identifier":"void"}},"qualification":null},{"reference":{"otherSlice":4388261176215324957},"usedName":{"constructorName":{"identifier":"ResponseFile"},"constructorTypeName":{"identifier":"Response"}},"qualification":null},{"reference":{"builtinModule":"Control.Monad"},"usedName":{"valueName":{"identifier":"mapM_"}},"qualification":null},{"reference":{"otherSlice":9091181793480111601},"usedName":{"valueName":{"identifier":"toChunks"}},"qualification":"L"},{"reference":{"otherSlice":8839066667246436067},"usedName":{"valueName":{"identifier":"toLazyByteString"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":303372933562511200},"usedName":{"constructorName":{"identifier":"ResponseReceived"},"constructorTypeName":{"identifier":"ResponseReceived"}},"qualification":null},{"reference":{"otherSlice":498737198033065716},"usedName":{"valueName":{"identifier":"responseToStream"}},"qualification":null},{"reference":{"otherSlice":3864479888619181519},"usedName":{"valueName":{"identifier":"newBlazeRecv"}},"qualification":"Blaze"},{"reference":{"otherSlice":7386880620466625322},"usedName":{"valueName":{"identifier":"defaultStrategy"}},"qualification":"Blaze"},{"reference":{"builtinModule":"Data.Function"},"usedName":{"valueName":{"identifier":"fix"}},"qualification":null},{"reference":{"builtinModule":"Control.Monad"},"usedName":{"valueName":{"identifier":"unless"}},"qualification":null},{"reference":{"otherSlice":675696118971413715},"usedName":{"valueName":{"identifier":"null"}},"qualification":"B"},{"reference":{"builtinModule":"Data.Monoid"},"usedName":{"valueName":{"identifier":"mappend"}},"qualification":null},{"reference":{"otherSlice":4764808795772106119},"usedName":{"valueName":{"identifier":"fromChar"}},"qualification":null},{"reference":{"otherSlice":1251236928786591586},"usedName":{"valueName":{"identifier":"flush"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":">>="}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"valueName":{"identifier":"maybe"}},"qualification":null},{"reference":{"builtinModule":"Data.Monoid"},"usedName":{"valueName":{"identifier":"mconcat"}},"qualification":null},{"reference":{"otherSlice":5548762664127723913},"usedName":{"constructorName":{"identifier":"Status"},"constructorTypeName":{"identifier":"Status"}},"qualification":null},{"reference":{"otherSlice":5870116409610916390},"usedName":{"valueName":{"identifier":"fromByteString"}},"qualification":null},{"reference":{"otherSlice":1309227650546403783},"usedName":{"valueName":{"identifier":"fromString"}},"qualification":null},{"reference":{"builtinModule":"GHC.Show"},"usedName":{"valueName":{"identifier":"show"}},"qualification":null},{"reference":{"otherSlice":814488433478767140},"usedName":{"valueName":{"identifier":"original"}},"qualification":"CI"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"String"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"otherSlice":8642306666063513779},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"B"},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":2500932139194697081},"usedName":{"typeName":{"identifier":"Application"}},"qualification":null}],"fragment":["runGeneric ::\n           [(String, String)] ->\n             (Int -> IO (IO B.ByteString)) ->\n               (B.ByteString -> IO ()) ->\n                 Maybe B.ByteString -> Application -> IO ()","runGeneric vars inputH outputH xsendfile app\n  = do let rmethod = B.pack $ lookup' \"REQUEST_METHOD\" vars\n           pinfo = lookup' \"PATH_INFO\" vars\n           qstring = lookup' \"QUERY_STRING\" vars\n           contentLength = safeRead 0 $ lookup' \"CONTENT_LENGTH\" vars\n           remoteHost'\n             = case lookup \"REMOTE_ADDR\" vars of\n                   Just x -> x\n                   Nothing -> case lookup \"REMOTE_HOST\" vars of\n                                  Just x -> x\n                                  Nothing -> \"\"\n           isSecure'\n             = case map toLower $ lookup' \"SERVER_PROTOCOL\" vars of\n                   \"https\" -> True\n                   _ -> False\n       addrs <- getAddrInfo Nothing (Just remoteHost') Nothing\n       requestBody' <- inputH contentLength\n       let addr\n             = case addrs of\n                   a : _ -> addrAddress a\n                   [] -> error $ \"Invalid REMOTE_ADDR or REMOTE_HOST: \" ++ remoteHost'\n           reqHeaders = map (cleanupVarName *** B.pack) vars\n           env\n             = Request{requestMethod = rmethod, rawPathInfo = B.pack pinfo,\n                       pathInfo = H.decodePathSegments $ B.pack pinfo,\n                       rawQueryString = B.pack qstring,\n                       queryString = H.parseQuery $ B.pack qstring,\n                       requestHeaders = reqHeaders, isSecure = isSecure',\n                       remoteHost = addr, httpVersion = H.http11,\n                       requestBody = requestBody', vault = mempty,\n                       requestBodyLength = KnownLength $ fromIntegral contentLength,\n                       requestHeaderHost = lookup \"host\" reqHeaders,\n                       requestHeaderRange = lookup \"range\" reqHeaders}\n       void $\n         app env $\n           \\ res ->\n             case (xsendfile, res) of\n                 (Just sf, ResponseFile s hs fp Nothing) -> do mapM_ outputH $\n                                                                 L.toChunks $\n                                                                   toLazyByteString $\n                                                                     sfBuilder s hs sf fp\n                                                               return ResponseReceived\n                 _ -> do let (s, hs, wb) = responseToStream res\n                         (blazeRecv, blazeFinish) <- Blaze.newBlazeRecv\n                                                       Blaze.defaultStrategy\n                         wb $\n                           \\ b ->\n                             do let sendBuilder builder\n                                      = do popper <- blazeRecv builder\n                                           fix $\n                                             \\ loop ->\n                                               do bs <- popper\n                                                  unless (B.null bs) $\n                                                    do outputH bs\n                                                       loop\n                                sendBuilder $ headers s hs `mappend` fromChar '\\n'\n                                b sendBuilder (sendBuilder flush)\n                         blazeFinish >>= maybe (return ()) outputH\n                         return ResponseReceived\n  where headers s hs\n          = mconcat (map header $ status s : map header' (fixHeaders hs))\n        status (Status i m)\n          = (fromByteString \"Status\",\n             mconcat [fromString $ show i, fromChar ' ', fromByteString m])\n        header' (x, y) = (fromByteString $ CI.original x, fromByteString y)\n        header (x, y) = mconcat [x, fromByteString \": \", y, fromChar '\\n']\n        sfBuilder s hs sf fp\n          = mconcat\n              [headers s hs, header $ (fromByteString sf, fromString fp),\n               fromChar '\\n', fromByteString sf, fromByteString \" not supported\"]\n        fixHeaders h\n          = case lookup \"content-type\" h of\n                Nothing -> (\"Content-Type\", \"text/html; charset=utf-8\") : h\n                Just _ -> h"],"instances":[],"language":{"extensions":["OverloadedStrings","RankNTypes","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}