{"sliceID":8112320957015186074,"uses":[{"reference":{"otherSlice":2693679721186502528},"usedName":{"valueName":{"identifier":"wantInput"}},"qualification":null},{"reference":{"otherSlice":6319358220054646503},"usedName":{"valueName":{"identifier":"get"}},"qualification":null},{"reference":{"otherSlice":890389109853823418},"usedName":{"valueName":{"identifier":"advance"}},"qualification":null},{"reference":{"otherSlice":7235567377809295464},"usedName":{"valueName":{"identifier":"length"}},"qualification":"B"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"reverse"}},"qualification":null},{"reference":{"otherSlice":2921449568316915535},"usedName":{"typeName":{"identifier":"Parser"}},"qualification":null},{"reference":{"otherSlice":4010822550476529195},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":null}],"fragment":["takeRest :: Parser [ByteString]","takeRest = go []\n  where go acc\n          = do input <- wantInput\n               if input then\n                 do s <- get\n                    advance (B.length s)\n                    go (s : acc)\n                 else return (reverse acc)"],"instances":[],"language":{"extensions":["BangPatterns","GADTs","OverloadedStrings","RankNTypes","RecordWildCards","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}