{"sliceID":6074599846427166218,"uses":[{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fail"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":2395809604474213102},"usedName":{"valueName":{"identifier":"runCont"}},"qualification":null},{"reference":{"otherSlice":2109377013281436257},"usedName":{"valueName":{"identifier":"empty"}},"qualification":"B"},{"reference":{"otherSlice":2864410369553869217},"usedName":{"constructorName":{"identifier":"Done"},"constructorTypeName":{"identifier":"Decoder"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"otherSlice":675696118971413715},"usedName":{"valueName":{"identifier":"null"}},"qualification":"B"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":4569347134809337587},"usedName":{"valueName":{"identifier":"pushFront"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"otherSlice":6258463563638113276},"usedName":{"valueName":{"identifier":"length"}},"qualification":"B"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"++"}},"qualification":null},{"reference":{"builtinModule":"GHC.Show"},"usedName":{"valueName":{"identifier":"show"}},"qualification":null},{"reference":{"otherSlice":2864410369553869217},"usedName":{"constructorName":{"identifier":"Partial"},"constructorTypeName":{"identifier":"Decoder"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":2395809604474213102},"usedName":{"constructorName":{"identifier":"C"},"constructorTypeName":{"identifier":"Get"}},"qualification":null},{"reference":{"otherSlice":3674330957874520992},"usedName":{"valueName":{"identifier":"splitAt"}},"qualification":"B"},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"not"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"True"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"False"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":6526413203811291505},"usedName":{"valueName":{"identifier":"prompt"}},"qualification":null},{"reference":{"otherSlice":2864410369553869217},"usedName":{"constructorName":{"identifier":"Fail"},"constructorTypeName":{"identifier":"Decoder"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":">>"}},"qualification":null},{"reference":{"otherSlice":2864410369553869217},"usedName":{"constructorName":{"identifier":"BytesRead"},"constructorTypeName":{"identifier":"Decoder"}},"qualification":null},{"reference":{"builtinModule":"Prelude"},"usedName":{"valueName":{"operator":"$!"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"otherSlice":2395809604474213102},"usedName":{"typeName":{"identifier":"Get"}},"qualification":null}],"fragment":["isolate :: Int -> Get a -> Get a","isolate n0 act\n  | n0 < 0 = fail \"isolate: negative size\"\n  | otherwise = go n0 (runCont act B.empty Done)\n  where go !n (Done left x)\n          | n == 0 && B.null left = return x\n          | otherwise =\n            do pushFront left\n               let consumed = n0 - n - B.length left\n               fail $\n                 \"isolate: the decoder consumed \" ++\n                   show consumed ++\n                     \" bytes\" ++\n                       \" which is less than the expected \" ++ show n0 ++ \" bytes\"\n        go 0 (Partial resume) = go 0 (resume Nothing)\n        go n (Partial resume)\n          = do inp <- C $\n                        \\ inp k ->\n                          do let takeLimited str\n                                   = let (inp', out) = B.splitAt n str in k out (Just inp')\n                             case not (B.null inp) of\n                                 True -> takeLimited inp\n                                 False -> prompt inp (k B.empty Nothing) takeLimited\n               case inp of\n                   Nothing -> go n (resume Nothing)\n                   Just str -> go (n - B.length str) (resume (Just str))\n        go _ (Fail bs err) = pushFront bs >> fail err\n        go n (BytesRead r resume)\n          = go n (resume $! fromIntegral n0 - fromIntegral n - r)"],"instances":[],"language":{"extensions":["RankNTypes","MagicHash","BangPatterns","TypeFamilies","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}