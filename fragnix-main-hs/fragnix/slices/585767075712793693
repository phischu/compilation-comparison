{"sliceID":585767075712793693,"uses":[{"reference":{"otherSlice":1811116647704585236},"usedName":{"constructorName":{"identifier":"ActionT"},"constructorTypeName":{"identifier":"ActionT"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"liftM"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"lookup"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"otherSlice":5279301106349187896},"usedName":{"valueName":{"identifier":"getParams"}},"qualification":null},{"reference":{"otherSlice":8845661889015669136},"usedName":{"valueName":{"identifier":"ask"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":5849676323652185125},"usedName":{"valueName":{"identifier":"raise"}},"qualification":null},{"reference":{"otherSlice":3699954186845348343},"usedName":{"valueName":{"identifier":"stringError"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"++"}},"qualification":null},{"reference":{"otherSlice":589126460179268097},"usedName":{"valueName":{"identifier":"unpack"}},"qualification":"T"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"valueName":{"identifier":"either"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"const"}},"qualification":null},{"reference":{"otherSlice":5330768989742772933},"usedName":{"valueName":{"identifier":"next"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":6166152852460930182},"usedName":{"valueName":{"identifier":"parseParam"}},"qualification":null},{"reference":{"otherSlice":6166152852460930182},"usedName":{"typeName":{"identifier":"Parsable"}},"qualification":null},{"reference":{"otherSlice":3699954186845348343},"usedName":{"typeName":{"identifier":"ScottyError"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Monad"}},"qualification":null},{"reference":{"otherSlice":5700351957984311116},"usedName":{"typeName":{"identifier":"Text"}},"qualification":"T"},{"reference":{"otherSlice":1811116647704585236},"usedName":{"typeName":{"identifier":"ActionT"}},"qualification":null}],"fragment":["param ::\n        (Parsable a, ScottyError e, Monad m) => T.Text -> ActionT e m a","param k\n  = do val <- ActionT $ liftM (lookup k . getParams) ask\n       case val of\n           Nothing -> raise $\n                        stringError $ \"Param: \" ++ T.unpack k ++ \" not found!\"\n           Just v -> either (const next) return $ parseParam v"],"instances":[],"language":{"extensions":["OverloadedStrings","RankNTypes","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}