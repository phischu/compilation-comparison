{"sliceID":4603744947098800939,"uses":[{"reference":{"builtinModule":"Control.Monad.ST.Lazy"},"usedName":{"valueName":{"identifier":"runST"}},"qualification":null},{"reference":{"otherSlice":7656308987823753789},"usedName":{"valueName":{"identifier":"toChunks"}},"qualification":"L"},{"reference":{"otherSlice":7072387134939381410},"usedName":{"constructorName":{"identifier":"DecompressInputRequired"},"constructorTypeName":{"identifier":"DecompressStream"}},"qualification":null},{"reference":{"otherSlice":7459617743278403755},"usedName":{"valueName":{"identifier":"empty"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":">>="}},"qualification":null},{"reference":{"otherSlice":7072387134939381410},"usedName":{"constructorName":{"identifier":"DecompressOutputAvailable"},"constructorTypeName":{"identifier":"DecompressStream"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":7072387134939381410},"usedName":{"constructorName":{"identifier":"DecompressStreamEnd"},"constructorTypeName":{"identifier":"DecompressStream"}},"qualification":null},{"reference":{"otherSlice":677049321249320014},"usedName":{"valueName":{"identifier":"fromChunks"}},"qualification":"L"},{"reference":{"otherSlice":7072387134939381410},"usedName":{"constructorName":{"identifier":"DecompressStreamError"},"constructorTypeName":{"identifier":"DecompressStream"}},"qualification":null},{"reference":{"otherSlice":4010822550476529195},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"S"},{"reference":{"otherSlice":7233619382983855062},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"L"},{"reference":{"otherSlice":8830414457797892968},"usedName":{"typeName":{"identifier":"DecompressError"}},"qualification":null},{"reference":{"otherSlice":7072387134939381410},"usedName":{"typeName":{"identifier":"DecompressStream"}},"qualification":null},{"reference":{"builtinModule":"Control.Monad.ST.Lazy"},"usedName":{"typeName":{"identifier":"ST"}},"qualification":null}],"fragment":["foldDecompressStreamWithInput ::\n                              (S.ByteString -> a -> a) ->\n                                (L.ByteString -> a) ->\n                                  (DecompressError -> a) ->\n                                    (forall s . DecompressStream (ST s)) -> L.ByteString -> a","foldDecompressStreamWithInput chunk end err\n  = \\ s lbs -> runST (fold s (L.toChunks lbs))\n  where fold (DecompressInputRequired next) []\n          = next S.empty >>= \\ strm -> fold strm []\n        fold (DecompressInputRequired next) (inchunk : inchunks)\n          = next inchunk >>= \\ s -> fold s inchunks\n        fold (DecompressOutputAvailable outchunk next) inchunks\n          = do r <- next >>= \\ s -> fold s inchunks\n               return $ chunk outchunk r\n        fold (DecompressStreamEnd inchunk) inchunks\n          = return $ end (L.fromChunks (inchunk : inchunks))\n        fold (DecompressStreamError derr) _ = return $ err derr"],"instances":[],"language":{"extensions":["RankNTypes","DeriveDataTypeable","BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}