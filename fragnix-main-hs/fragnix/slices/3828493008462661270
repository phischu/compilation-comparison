{"sliceID":3828493008462661270,"uses":[{"reference":{"otherSlice":7483143390726870398},"usedName":{"valueName":{"identifier":"fromChunks"}},"qualification":"L"},{"reference":{"builtinModule":"Data.Functor"},"usedName":{"valueName":{"operator":"<$>"}},"qualification":null},{"reference":{"otherSlice":968296184656941152},"usedName":{"valueName":{"identifier":"break"}},"qualification":"B"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":675696118971413715},"usedName":{"valueName":{"identifier":"null"}},"qualification":"B"},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":6985366053944096403},"usedName":{"valueName":{"identifier":"drop"}},"qualification":"B"},{"reference":{"otherSlice":5057618384796216480},"usedName":{"valueName":{"identifier":"get"}},"qualification":null},{"reference":{"otherSlice":2537403508577114982},"usedName":{"valueName":{"identifier":"put"}},"qualification":null},{"reference":{"otherSlice":2109377013281436257},"usedName":{"valueName":{"identifier":"empty"}},"qualification":"B"},{"reference":{"otherSlice":7439085034522577432},"usedName":{"valueName":{"identifier":"demandInput"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fmap"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":2395809604474213102},"usedName":{"typeName":{"identifier":"Get"}},"qualification":null},{"reference":{"otherSlice":1699226608098321587},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"L"}],"fragment":["getLazyByteStringNul :: Get L.ByteString","getLazyByteStringNul = L.fromChunks <$> go\n  where findNull str\n          = case B.break (== 0) str of\n                (want, rest) | B.null rest -> Nothing\n                             | otherwise -> Just (want, B.drop 1 rest)\n        go\n          = do str <- get\n               case findNull str of\n                   Nothing -> do put B.empty\n                                 demandInput\n                                 fmap (str :) go\n                   Just (want, rest) -> do put rest\n                                           return [want]"],"instances":[],"language":{"extensions":["RankNTypes","MagicHash","BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}