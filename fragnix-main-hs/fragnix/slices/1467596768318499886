{"sliceID":1467596768318499886,"uses":[{"reference":{"otherSlice":3024497621755900322},"usedName":{"valueName":{"identifier":"nullTest"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":7487066672599389893},"usedName":{"valueName":{"identifier":"try"}},"qualification":null},{"reference":{"builtinModule":"Foreign.Marshal.Alloc"},"usedName":{"valueName":{"identifier":"mallocBytes"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Left"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":5401391956019432590},"usedName":{"valueName":{"identifier":"retOk"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"++"}},"qualification":null},{"reference":{"builtinModule":"GHC.Show"},"usedName":{"valueName":{"identifier":"show"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Right"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":5237065296296375860},"usedName":{"valueName":{"identifier":"c_memset"}},"qualification":null},{"reference":{"builtinModule":"Foreign.ForeignPtr"},"usedName":{"valueName":{"identifier":"newForeignPtr"}},"qualification":null},{"reference":{"otherSlice":755294914574888436},"usedName":{"valueName":{"identifier":"c_myregfree"}},"qualification":null},{"reference":{"builtinModule":"Foreign.ForeignPtr"},"usedName":{"valueName":{"identifier":"withForeignPtr"}},"qualification":null},{"reference":{"otherSlice":3182680301229280912},"usedName":{"valueName":{"identifier":"c_regcomp"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"otherSlice":6756606517105139295},"usedName":{"constructorName":{"identifier":"Regex"},"constructorTypeName":{"identifier":"Regex"}},"qualification":null},{"reference":{"otherSlice":1524900015938809029},"usedName":{"valueName":{"identifier":"wrapError"}},"qualification":null},{"reference":{"otherSlice":1817819925747868260},"usedName":{"typeName":{"identifier":"CompOption"}},"qualification":null},{"reference":{"otherSlice":8309222215052791244},"usedName":{"typeName":{"identifier":"ExecOption"}},"qualification":null},{"reference":{"builtinModule":"Foreign.C.String"},"usedName":{"typeName":{"identifier":"CString"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"typeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":3294887094191733298},"usedName":{"typeName":{"identifier":"WrapError"}},"qualification":null},{"reference":{"otherSlice":6756606517105139295},"usedName":{"typeName":{"identifier":"Regex"}},"qualification":null}],"fragment":["wrapCompile ::\n            CompOption -> ExecOption -> CString -> IO (Either WrapError Regex)","wrapCompile flags e pattern\n  = do nullTest pattern \"wrapCompile pattern\" $\n         do e_regex_ptr <- try $ mallocBytes (64)\n            case e_regex_ptr of\n                Left ioerror -> return\n                                  (Left\n                                     (retOk,\n                                      \"Text.Regex.Posix.Wrap.wrapCompile: IOError from mallocBytes(regex_t) : \"\n                                        ++ show ioerror))\n                Right raw_regex_ptr -> do zero_regex_ptr <- c_memset raw_regex_ptr\n                                                              0\n                                                              (64)\n                                          regex_fptr <- newForeignPtr c_myregfree zero_regex_ptr\n                                          withForeignPtr regex_fptr $\n                                            \\ regex_ptr ->\n                                              do errCode <- c_regcomp regex_ptr pattern flags\n                                                 if (errCode == retOk) then\n                                                   return . Right $ Regex regex_fptr flags e else\n                                                   wrapError errCode regex_ptr"],"instances":[],"language":{"extensions":["MultiParamTypeClasses","FunctionalDependencies","ForeignFunctionInterface","GeneralizedNewtypeDeriving","FlexibleContexts","TypeSynonymInstances","FlexibleInstances","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}