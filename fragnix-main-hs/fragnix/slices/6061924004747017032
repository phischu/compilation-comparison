{"sliceID":6061924004747017032,"uses":[{"reference":{"otherSlice":9208044541903137161},"usedName":{"constructorName":{"identifier":"Seq"},"constructorTypeName":{"identifier":"Seq"}},"qualification":null},{"reference":{"builtinModule":"Data.Functor"},"usedName":{"valueName":{"operator":"<$>"}},"qualification":null},{"reference":{"otherSlice":3555949835188142327},"usedName":{"constructorName":{"identifier":"Elem"},"constructorTypeName":{"identifier":"Elem"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Applicative"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"otherSlice":3555949835188142327},"usedName":{"typeName":{"identifier":"Elem"}},"qualification":null},{"reference":{"otherSlice":2103754850612341338},"usedName":{"typeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"otherSlice":2103754850612341338},"usedName":{"constructorName":{"identifier":"EmptyT"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"pure"}},"qualification":null},{"reference":{"otherSlice":2103754850612341338},"usedName":{"constructorName":{"identifier":"Single"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"otherSlice":2103754850612341338},"usedName":{"constructorName":{"identifier":"Deep"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"liftA3"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":2658389187921074114},"usedName":{"valueName":{"identifier":"size"}},"qualification":null},{"reference":{"otherSlice":1673753023314990609},"usedName":{"typeName":{"identifier":"Node"}},"qualification":null},{"reference":{"otherSlice":6856618864151171204},"usedName":{"typeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"otherSlice":2658389187921074114},"usedName":{"typeName":{"identifier":"Sized"}},"qualification":null},{"reference":{"otherSlice":6856618864151171204},"usedName":{"constructorName":{"identifier":"One"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"otherSlice":6856618864151171204},"usedName":{"constructorName":{"identifier":"Two"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"liftA2"}},"qualification":null},{"reference":{"otherSlice":6856618864151171204},"usedName":{"constructorName":{"identifier":"Three"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"otherSlice":6856618864151171204},"usedName":{"constructorName":{"identifier":"Four"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"<*>"}},"qualification":null},{"reference":{"otherSlice":1673753023314990609},"usedName":{"constructorName":{"identifier":"Node2"},"constructorTypeName":{"identifier":"Node"}},"qualification":null},{"reference":{"otherSlice":1673753023314990609},"usedName":{"constructorName":{"identifier":"Node3"},"constructorTypeName":{"identifier":"Node"}},"qualification":null},{"reference":{"otherSlice":9208044541903137161},"usedName":{"typeName":{"identifier":"Seq"}},"qualification":null}],"fragment":["traverseWithIndex ::\n                    Applicative f => (Int -> a -> f b) -> Seq a -> f (Seq b)","traverseWithIndex f' (Seq xs')\n  = Seq <$>\n      traverseWithIndexTreeE (\\ s (Elem a) -> Elem <$> f' s a) 0 xs'\n  where traverseWithIndexTreeE ::\n                                 Applicative f =>\n                                 (Int -> Elem a -> f b) ->\n                                   Int -> FingerTree (Elem a) -> f (FingerTree b)\n        traverseWithIndexTreeE _ !_s EmptyT = pure EmptyT\n        traverseWithIndexTreeE f s (Single xs) = Single <$> f s xs\n        traverseWithIndexTreeE f s (Deep n pr m sf)\n          = liftA3 (Deep n) (traverseWithIndexDigitE f s pr)\n              (traverseWithIndexTreeN (traverseWithIndexNodeE f) sPspr m)\n              (traverseWithIndexDigitE f sPsprm sf)\n          where !sPspr = s + size pr\n                !sPsprm = sPspr + size m\n        \n        traverseWithIndexTreeN ::\n                                 Applicative f =>\n                                 (Int -> Node a -> f b) ->\n                                   Int -> FingerTree (Node a) -> f (FingerTree b)\n        traverseWithIndexTreeN _ !_s EmptyT = pure EmptyT\n        traverseWithIndexTreeN f s (Single xs) = Single <$> f s xs\n        traverseWithIndexTreeN f s (Deep n pr m sf)\n          = liftA3 (Deep n) (traverseWithIndexDigitN f s pr)\n              (traverseWithIndexTreeN (traverseWithIndexNodeN f) sPspr m)\n              (traverseWithIndexDigitN f sPsprm sf)\n          where !sPspr = s + size pr\n                !sPsprm = sPspr + size m\n        \n        traverseWithIndexDigitE ::\n                                  Applicative f =>\n                                  (Int -> Elem a -> f b) -> Int -> Digit (Elem a) -> f (Digit b)\n        traverseWithIndexDigitE f i t = traverseWithIndexDigit f i t\n        \n        traverseWithIndexDigitN ::\n                                  Applicative f =>\n                                  (Int -> Node a -> f b) -> Int -> Digit (Node a) -> f (Digit b)\n        traverseWithIndexDigitN f i t = traverseWithIndexDigit f i t\n        \n        {-# INLINE traverseWithIndexDigit #-}\n        \n        traverseWithIndexDigit ::\n                                 (Applicative f, Sized a) =>\n                                 (Int -> a -> f b) -> Int -> Digit a -> f (Digit b)\n        traverseWithIndexDigit f !s (One a) = One <$> f s a\n        traverseWithIndexDigit f s (Two a b)\n          = liftA2 Two (f s a) (f sPsa b)\n          where !sPsa = s + size a\n        traverseWithIndexDigit f s (Three a b c)\n          = liftA3 Three (f s a) (f sPsa b) (f sPsab c)\n          where !sPsa = s + size a\n                !sPsab = sPsa + size b\n        traverseWithIndexDigit f s (Four a b c d)\n          = liftA3 Four (f s a) (f sPsa b) (f sPsab c) <*> f sPsabc d\n          where !sPsa = s + size a\n                !sPsab = sPsa + size b\n                !sPsabc = sPsab + size c\n        \n        traverseWithIndexNodeE ::\n                                 Applicative f =>\n                                 (Int -> Elem a -> f b) -> Int -> Node (Elem a) -> f (Node b)\n        traverseWithIndexNodeE f i t = traverseWithIndexNode f i t\n        \n        traverseWithIndexNodeN ::\n                                 Applicative f =>\n                                 (Int -> Node a -> f b) -> Int -> Node (Node a) -> f (Node b)\n        traverseWithIndexNodeN f i t = traverseWithIndexNode f i t\n        \n        {-# INLINE traverseWithIndexNode #-}\n        \n        traverseWithIndexNode ::\n                                (Applicative f, Sized a) =>\n                                (Int -> a -> f b) -> Int -> Node a -> f (Node b)\n        traverseWithIndexNode f !s (Node2 ns a b)\n          = liftA2 (Node2 ns) (f s a) (f sPsa b)\n          where !sPsa = s + size a\n        traverseWithIndexNode f s (Node3 ns a b c)\n          = liftA3 (Node3 ns) (f s a) (f sPsa b) (f sPsab c)\n          where !sPsa = s + size a\n                !sPsab = sPsa + size b"],"instances":[],"language":{"extensions":["BangPatterns","DeriveDataTypeable","StandaloneDeriving","FlexibleInstances","ScopedTypeVariables","DeriveGeneric","TypeFamilies","PatternSynonyms","ViewPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}