{"sliceID":4063598775151422215,"uses":[{"reference":{"otherSlice":6545030739250264376},"usedName":{"constructorName":{"identifier":"Buf"},"constructorTypeName":{"identifier":"Buffer"}},"qualification":null},{"reference":{"otherSlice":4283664794630967814},"usedName":{"valueName":{"identifier":"inlinePerformIO"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"builtinModule":"Foreign.ForeignPtr"},"usedName":{"valueName":{"identifier":"withForeignPtr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"Foreign.Storable"},"usedName":{"valueName":{"identifier":"sizeOf"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"Foreign.Storable"},"usedName":{"valueName":{"identifier":"peek"}},"qualification":null},{"reference":{"builtinModule":"GHC.Ptr"},"usedName":{"valueName":{"identifier":"castPtr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<="}},"qualification":null},{"reference":{"builtinModule":"Foreign.Storable"},"usedName":{"valueName":{"identifier":"poke"}},"qualification":null},{"reference":{"otherSlice":3163872786766878559},"usedName":{"valueName":{"identifier":"memcpy"}},"qualification":null},{"reference":{"builtinModule":"GHC.Ptr"},"usedName":{"valueName":{"identifier":"plusPtr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"*"}},"qualification":null},{"reference":{"builtinModule":"GHC.ForeignPtr"},"usedName":{"valueName":{"identifier":"mallocPlainForeignPtrBytes"}},"qualification":null},{"reference":{"otherSlice":6545030739250264376},"usedName":{"typeName":{"identifier":"Buffer"}},"qualification":null},{"reference":{"builtinModule":"GHC.ForeignPtr"},"usedName":{"typeName":{"identifier":"ForeignPtr"}},"qualification":null}],"fragment":["append :: Buffer -> ForeignPtr a -> Int -> Int -> Buffer","append (Buf fp0 off0 len0 cap0 gen0) !fp1 !off1 !len1\n  = inlinePerformIO . withForeignPtr fp0 $\n      \\ ptr0 ->\n        withForeignPtr fp1 $\n          \\ ptr1 ->\n            do let genSize = sizeOf (0 :: Int)\n                   newlen = len0 + len1\n               gen <- if gen0 == 0 then return 0 else peek (castPtr ptr0)\n               if gen == gen0 && newlen <= cap0 then\n                 do let newgen = gen + 1\n                    poke (castPtr ptr0) newgen\n                    memcpy (ptr0 `plusPtr` (off0 + len0)) (ptr1 `plusPtr` off1)\n                      (fromIntegral len1)\n                    return (Buf fp0 off0 newlen cap0 newgen)\n                 else\n                 do let newcap = newlen * 2\n                    fp <- mallocPlainForeignPtrBytes (newcap + genSize)\n                    withForeignPtr fp $\n                      \\ ptr_ ->\n                        do let ptr = ptr_ `plusPtr` genSize\n                               newgen = 1\n                           poke (castPtr ptr_) newgen\n                           memcpy ptr (ptr0 `plusPtr` off0) (fromIntegral len0)\n                           memcpy (ptr `plusPtr` len0) (ptr1 `plusPtr` off1)\n                             (fromIntegral len1)\n                           return (Buf fp genSize newlen newcap newgen)"],"instances":[],"language":{"extensions":["BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}