{"sliceID":8649512946236066319,"uses":[{"reference":{"otherSlice":6400111543258153609},"usedName":{"valueName":{"identifier":"peekWord8'"}},"qualification":null},{"reference":{"otherSlice":890389109853823418},"usedName":{"valueName":{"identifier":"advance"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":">>"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fail"}},"qualification":null},{"reference":{"builtinModule":"GHC.Word"},"usedName":{"typeName":{"identifier":"Word8"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":2921449568316915535},"usedName":{"typeName":{"identifier":"Parser"}},"qualification":null}],"fragment":["satisfyWith :: (Word8 -> a) -> (a -> Bool) -> Parser a","satisfyWith f p\n  = do h <- peekWord8'\n       let c = f h\n       if p c then advance 1 >> return c else fail \"satisfyWith\""],"instances":[],"language":{"extensions":["BangPatterns","GADTs","OverloadedStrings","RankNTypes","RecordWildCards","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}