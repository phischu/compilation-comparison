{"sliceID":8029241988951722243,"uses":[{"reference":{"otherSlice":13410505313944458},"usedName":{"constructorName":{"identifier":"Nil"},"constructorTypeName":{"identifier":"IntMap"}},"qualification":null},{"reference":{"otherSlice":3888941377967341328},"usedName":{"valueName":{"identifier":"fromDistinctAscList"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":879198285250991989},"usedName":{"typeName":{"identifier":"Key"}},"qualification":null},{"reference":{"otherSlice":13410505313944458},"usedName":{"typeName":{"identifier":"IntMap"}},"qualification":null}],"fragment":["fromAscListWithKey ::\n                   (Key -> a -> a -> a) -> [(Key, a)] -> IntMap a","fromAscListWithKey _ [] = Nil\nfromAscListWithKey f (x0 : xs0)\n  = fromDistinctAscList (combineEq x0 xs0)\n  where combineEq z [] = [z]\n        combineEq z@(kz, zz) (x@(kx, xx) : xs)\n          | kx == kz = let yy = f kx xx zz in combineEq (kx, yy) xs\n          | otherwise = z : combineEq x xs"],"instances":[],"language":{"extensions":["BangPatterns","MagicHash","DeriveDataTypeable","StandaloneDeriving","ScopedTypeVariables","TypeFamilies","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}