{"sliceID":7309424878794619878,"uses":[{"reference":{"otherSlice":3377011811520588542},"usedName":{"constructorName":{"identifier":"TOD"},"constructorTypeName":{"identifier":"TimeOfDay64"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"Data.Monoid"},"usedName":{"valueName":{"operator":"<>"}},"qualification":null},{"reference":{"otherSlice":9119560092997769301},"usedName":{"valueName":{"identifier":"primBounded"}},"qualification":"BP"},{"reference":{"otherSlice":8067838194807413611},"usedName":{"valueName":{"identifier":"ascii8"}},"qualification":null},{"reference":{"otherSlice":6419493336046875333},"usedName":{"constructorName":{"identifier":"T"},"constructorTypeName":{"identifier":"T"}},"qualification":null},{"reference":{"otherSlice":5250105333584133783},"usedName":{"valueName":{"identifier":"twoDigits"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"quotRem"}},"qualification":null},{"reference":{"otherSlice":8508976578490850792},"usedName":{"valueName":{"operator":">$<"}},"qualification":null},{"reference":{"otherSlice":5057264060451954083},"usedName":{"valueName":{"identifier":"liftFixedToBounded"}},"qualification":"BP"},{"reference":{"otherSlice":2867625536962536181},"usedName":{"valueName":{"identifier":"char7"}},"qualification":"BP"},{"reference":{"otherSlice":7081892127999897032},"usedName":{"valueName":{"operator":">*<"}},"qualification":null},{"reference":{"otherSlice":2343771095208914500},"usedName":{"valueName":{"identifier":"condB"}},"qualification":"BP"},{"reference":{"builtinModule":"Data.Tuple"},"usedName":{"valueName":{"identifier":"fst"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"otherSlice":4626866416225798467},"usedName":{"valueName":{"identifier":"digit"}},"qualification":null},{"reference":{"otherSlice":4560601756328526382},"usedName":{"valueName":{"identifier":"emptyB"}},"qualification":"BP"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":3377011811520588542},"usedName":{"typeName":{"identifier":"TimeOfDay64"}},"qualification":null},{"reference":{"otherSlice":4322896446757888605},"usedName":{"typeName":{"identifier":"Builder"}},"qualification":null}],"fragment":["timeOfDay64 :: TimeOfDay64 -> Builder","timeOfDay64 (TOD h m s)\n  | frac == 0 = hhmmss\n  | otherwise = hhmmss <> BP.primBounded showFrac frac\n  where hhmmss\n          = BP.primBounded\n              (ascii8 (hh, (hl, (':', (mh, (ml, (':', (sh, sl))))))))\n              ()\n        !(T hh hl) = twoDigits h\n        !(T mh ml) = twoDigits m\n        !(T sh sl) = twoDigits (fromIntegral real)\n        (real, frac) = s `quotRem` pico\n        showFrac\n          = (\\ x -> ('.', x)) >$<\n              (BP.liftFixedToBounded BP.char7 >*< trunc12)\n        trunc12\n          = (`quotRem` micro) >$<\n              BP.condB (\\ (_, y) -> y == 0) (fst >$< trunc6) (digits6 >*< trunc6)\n        digits6\n          = ((`quotRem` milli) . fromIntegral) >$< (digits3 >*< digits3)\n        trunc6\n          = ((`quotRem` milli) . fromIntegral) >$<\n              BP.condB (\\ (_, y) -> y == 0) (fst >$< trunc3) (digits3 >*< trunc3)\n        digits3 = (`quotRem` 10) >$< (digits2 >*< digits1)\n        digits2 = (`quotRem` 10) >$< (digits1 >*< digits1)\n        digits1 = BP.liftFixedToBounded (digit >$< BP.char7)\n        trunc3\n          = BP.condB (== 0) BP.emptyB $\n              (`quotRem` 100) >$< (digits1 >*< trunc2)\n        trunc2\n          = BP.condB (== 0) BP.emptyB $\n              (`quotRem` 10) >$< (digits1 >*< trunc1)\n        trunc1 = BP.condB (== 0) BP.emptyB digits1\n        pico = 1000000000000\n        micro = 1000000\n        milli = 1000"],"instances":[],"language":{"extensions":["BangPatterns","OverloadedStrings","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}