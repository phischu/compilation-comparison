{"sliceID":8043067995349260563,"uses":[{"reference":{"otherSlice":260850562356698968},"usedName":{"valueName":{"identifier":"viewr"}},"qualification":null},{"reference":{"otherSlice":5507254915546375839},"usedName":{"constructorName":{"identifier":"EmptyR"},"constructorTypeName":{"identifier":"ViewR"}},"qualification":null},{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"error"}},"qualification":null},{"reference":{"otherSlice":5507254915546375839},"usedName":{"constructorName":{"operator":":>"},"constructorTypeName":{"identifier":"ViewR"}},"qualification":null},{"reference":{"otherSlice":2931946834025068554},"usedName":{"valueName":{"identifier":"scanr"}},"qualification":null},{"reference":{"otherSlice":9208044541903137161},"usedName":{"typeName":{"identifier":"Seq"}},"qualification":null}],"fragment":["scanr1 :: (a -> a -> a) -> Seq a -> Seq a","scanr1 f xs\n  = case viewr xs of\n        EmptyR -> error \"scanr1 takes a nonempty sequence as an argument\"\n        xs' :> x -> scanr f x xs'"],"instances":[],"language":{"extensions":["BangPatterns","DeriveDataTypeable","StandaloneDeriving","FlexibleInstances","ScopedTypeVariables","DeriveGeneric","TypeFamilies","PatternSynonyms","ViewPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}