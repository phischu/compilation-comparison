{"sliceID":5407924426076646016,"uses":[{"reference":{"otherSlice":6803396997458515779},"usedName":{"valueName":{"identifier":"proxyExpQ"}},"qualification":null},{"reference":{"otherSlice":5615868348084470865},"usedName":{"valueName":{"identifier":"proxyPatQ"}},"qualification":null},{"reference":{"otherSlice":4927940834337068944},"usedName":{"valueName":{"identifier":"proxyTypeQ"}},"qualification":null},{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"undefined"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"String"}},"qualification":null},{"reference":{"builtinModule":"GHC.Unicode"},"usedName":{"valueName":{"identifier":"isUpper"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"head"}},"qualification":null},{"reference":{"builtinModule":"Data.Functor"},"usedName":{"valueName":{"operator":"<$>"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"map"}},"qualification":null},{"reference":{"otherSlice":8702085038846194196},"usedName":{"valueName":{"identifier":"strip"}},"qualification":null},{"reference":{"otherSlice":2783406048916481615},"usedName":{"valueName":{"identifier":"splitOn"}},"qualification":null},{"reference":{"builtinModule":"Data.Traversable"},"usedName":{"valueName":{"identifier":"mapM"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"foldr"}},"qualification":null}],"fragment":["pr :: QuasiQuoter","pr\n  = QuasiQuoter (mkProxy proxyExpQ) (mkProxy proxyPatQ)\n      (mkProxy proxyTypeQ)\n      undefined\n  where mkProxy :: (TypeQ -> r) -> String -> r\n        mkProxy p s\n          = case ts of\n                [h@(t : _)] | isUpper t -> p $ head <$> cons\n                            | otherwise -> p $ varT $ mkName h\n                _ -> p $ mkList <$> cons\n          where ts = map strip $ splitOn ',' s\n                cons = mapM (conT . mkName) ts\n                mkList = foldr (AppT . AppT PromotedConsT) PromotedNilT"],"instances":[],"language":{"extensions":["MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}