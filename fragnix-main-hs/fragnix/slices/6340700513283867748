{"sliceID":6340700513283867748,"uses":[{"reference":{"otherSlice":13410505313944458},"usedName":{"constructorName":{"identifier":"Bin"},"constructorTypeName":{"identifier":"IntMap"}},"qualification":null},{"reference":{"otherSlice":2715173166319551379},"usedName":{"valueName":{"identifier":"nomatch"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":3388317860341888410},"usedName":{"valueName":{"identifier":"link"}},"qualification":null},{"reference":{"otherSlice":13410505313944458},"usedName":{"constructorName":{"identifier":"Tip"},"constructorTypeName":{"identifier":"IntMap"}},"qualification":null},{"reference":{"otherSlice":4717645055143425729},"usedName":{"valueName":{"identifier":"zero"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":13410505313944458},"usedName":{"constructorName":{"identifier":"Nil"},"constructorTypeName":{"identifier":"IntMap"}},"qualification":null},{"reference":{"otherSlice":879198285250991989},"usedName":{"typeName":{"identifier":"Key"}},"qualification":null},{"reference":{"otherSlice":13410505313944458},"usedName":{"typeName":{"identifier":"IntMap"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null}],"fragment":["insertLookupWithKey ::\n                    (Key -> a -> a -> a) -> Key -> a -> IntMap a -> (Maybe a, IntMap a)","insertLookupWithKey f !k x t@(Bin p m l r)\n  | nomatch k p m = (Nothing, link k (Tip k x) p t)\n  | zero k m =\n    let (found, l') = insertLookupWithKey f k x l in\n      (found, Bin p m l' r)\n  | otherwise =\n    let (found, r') = insertLookupWithKey f k x r in\n      (found, Bin p m l r')\ninsertLookupWithKey f k x t@(Tip ky y)\n  | k == ky = (Just y, Tip k (f k x y))\n  | otherwise = (Nothing, link k (Tip k x) ky t)\ninsertLookupWithKey _ k x Nil = (Nothing, Tip k x)"],"instances":[],"language":{"extensions":["BangPatterns","MagicHash","DeriveDataTypeable","StandaloneDeriving","ScopedTypeVariables","TypeFamilies","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}