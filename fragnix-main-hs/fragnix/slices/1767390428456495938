{"sliceID":1767390428456495938,"uses":[{"reference":{"otherSlice":5606455448221660630},"usedName":{"valueName":{"identifier":"toByteString"}},"qualification":null},{"reference":{"builtinModule":"Data.Functor"},"usedName":{"valueName":{"operator":"<$>"}},"qualification":null},{"reference":{"builtinModule":"Data.Monoid"},"usedName":{"valueName":{"identifier":"mempty"}},"qualification":null},{"reference":{"otherSlice":1501510075462808803},"usedName":{"valueName":{"identifier":"takeWhile"}},"qualification":"Z"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"/="}},"qualification":null},{"reference":{"otherSlice":9071582018325480959},"usedName":{"valueName":{"identifier":"take"}},"qualification":"Z"},{"reference":{"otherSlice":4261797841410981906},"usedName":{"valueName":{"identifier":"unsafeHead"}},"qualification":"B"},{"reference":{"otherSlice":7420251549451097395},"usedName":{"valueName":{"identifier":"unsafeIndex"}},"qualification":"B"},{"reference":{"otherSlice":7571612226247782978},"usedName":{"valueName":{"identifier":"findIndex"}},"qualification":"B"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"||"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fail"}},"qualification":null},{"reference":{"builtinModule":"Data.Monoid"},"usedName":{"valueName":{"identifier":"mappend"}},"qualification":null},{"reference":{"otherSlice":1539124157430644783},"usedName":{"valueName":{"identifier":"byteString"}},"qualification":null},{"reference":{"otherSlice":910754978118901394},"usedName":{"valueName":{"identifier":"word8"}},"qualification":null},{"reference":{"otherSlice":7722092361956083264},"usedName":{"valueName":{"identifier":"hexQuad"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">"}},"qualification":null},{"reference":{"otherSlice":2338086607316977466},"usedName":{"valueName":{"identifier":"charUtf8"}},"qualification":null},{"reference":{"builtinModule":"GHC.Char"},"usedName":{"valueName":{"identifier":"chr"}},"qualification":null},{"reference":{"otherSlice":4123533710418618988},"usedName":{"valueName":{"identifier":"string"}},"qualification":"Z"},{"reference":{"builtinModule":"Control.Applicative"},"usedName":{"valueName":{"operator":"*>"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<="}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">="}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"identifier":"shiftL"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":1164506571614350076},"usedName":{"valueName":{"identifier":"atEnd"}},"qualification":"Z"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":9181835938134167535},"usedName":{"typeName":{"identifier":"Parser"}},"qualification":"Z"},{"reference":{"otherSlice":8642306666063513779},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":null}],"fragment":["unescape :: Z.Parser ByteString","unescape = toByteString <$> go mempty\n  where go acc\n          = do h <- Z.takeWhile (/= 92)\n               let rest\n                     = do start <- Z.take 2\n                          let !slash = B.unsafeHead start\n                              !t = B.unsafeIndex start 1\n                              escape\n                                = case B.findIndex (== t) \"\\\"\\\\/ntbrfu\" of\n                                      Just i -> i\n                                      _ -> 255\n                          if slash /= 92 || escape == 255 then\n                            fail \"invalid JSON escape sequence\" else\n                            do let cont m = go (acc `mappend` byteString h `mappend` m)\n                                   {-# INLINE cont #-}\n                               if t /= 117 then cont (word8 (B.unsafeIndex mapping escape)) else\n                                 do a <- hexQuad\n                                    if a < 55296 || a > 57343 then cont (charUtf8 (chr a)) else\n                                      do b <- Z.string \"\\\\u\" *> hexQuad\n                                         if a <= 56319 && b >= 56320 && b <= 57343 then\n                                           let !c = ((a - 55296) `shiftL` 10) + (b - 56320) + 65536\n                                             in cont (charUtf8 (chr c))\n                                           else fail \"invalid UTF-16 surrogates\"\n               done <- Z.atEnd\n               if done then return (acc `mappend` byteString h) else rest\n        mapping = \"\\\"\\\\/\\n\\t\\b\\r\\f\""],"instances":[],"language":{"extensions":["BangPatterns","OverloadedStrings","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}