{"sliceID":4179110413878942452,"uses":[{"reference":{"otherSlice":7027838172525951099},"usedName":{"constructorName":{"identifier":"CompressParams"},"constructorTypeName":{"identifier":"CompressParams"}},"qualification":null},{"reference":{"otherSlice":4577855125307987935},"usedName":{"valueName":{"identifier":"deflateInit"}},"qualification":"Stream"},{"reference":{"otherSlice":7202692338078551997},"usedName":{"valueName":{"identifier":"null"}},"qualification":"S"},{"reference":{"otherSlice":4010822550476529195},"usedName":{"constructorName":{"identifier":"PS"},"constructorTypeName":{"identifier":"ByteString"}},"qualification":"S"},{"reference":{"otherSlice":919922670402176205},"usedName":{"valueName":{"identifier":"pushInputBuffer"}},"qualification":"Stream"},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"otherSlice":1394949281745390129},"usedName":{"typeName":{"identifier":"Stream"}},"qualification":null},{"reference":{"otherSlice":8160419729831137275},"usedName":{"typeName":{"identifier":"CompressStream"}},"qualification":null},{"reference":{"otherSlice":2281697129950829781},"usedName":{"valueName":{"identifier":"inputBufferEmpty"}},"qualification":"Stream"},{"reference":{"otherSlice":2337964900038309551},"usedName":{"valueName":{"identifier":"outputBufferFull"}},"qualification":"Stream"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"assert"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"||"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"when"}},"qualification":null},{"reference":{"otherSlice":4053808545383669285},"usedName":{"valueName":{"identifier":"unsafeLiftIO"}},"qualification":"Stream"},{"reference":{"otherSlice":4976473949306289482},"usedName":{"valueName":{"identifier":"mallocByteString"}},"qualification":"S"},{"reference":{"otherSlice":4194159638160094001},"usedName":{"valueName":{"identifier":"pushOutputBuffer"}},"qualification":"Stream"},{"reference":{"otherSlice":8160419729831137275},"usedName":{"constructorName":{"identifier":"CompressInputRequired"},"constructorTypeName":{"identifier":"CompressStream"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"True"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"False"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"not"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"otherSlice":4135024097093880496},"usedName":{"constructorName":{"identifier":"Finish"},"constructorTypeName":{"identifier":"Flush"}},"qualification":"Stream"},{"reference":{"otherSlice":4135024097093880496},"usedName":{"constructorName":{"identifier":"NoFlush"},"constructorTypeName":{"identifier":"Flush"}},"qualification":"Stream"},{"reference":{"otherSlice":8018130172130975617},"usedName":{"valueName":{"identifier":"deflate"}},"qualification":"Stream"},{"reference":{"otherSlice":8123682005749207259},"usedName":{"constructorName":{"identifier":"Ok"},"constructorTypeName":{"identifier":"Status"}},"qualification":"Stream"},{"reference":{"otherSlice":3517660788483210230},"usedName":{"valueName":{"identifier":"popOutputBuffer"}},"qualification":"Stream"},{"reference":{"otherSlice":8160419729831137275},"usedName":{"constructorName":{"identifier":"CompressOutputAvailable"},"constructorTypeName":{"identifier":"CompressStream"}},"qualification":null},{"reference":{"otherSlice":8172945783513712089},"usedName":{"valueName":{"identifier":"defaultCompressBufferSize"}},"qualification":null},{"reference":{"otherSlice":8123682005749207259},"usedName":{"constructorName":{"identifier":"StreamEnd"},"constructorTypeName":{"identifier":"Status"}},"qualification":"Stream"},{"reference":{"otherSlice":5511494881741289570},"usedName":{"valueName":{"identifier":"outputBufferBytesAvailable"}},"qualification":"Stream"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">"}},"qualification":null},{"reference":{"otherSlice":2628884853785696949},"usedName":{"valueName":{"identifier":"finalise"}},"qualification":"Stream"},{"reference":{"otherSlice":8160419729831137275},"usedName":{"constructorName":{"identifier":"CompressStreamEnd"},"constructorTypeName":{"identifier":"CompressStream"}},"qualification":null},{"reference":{"otherSlice":8123682005749207259},"usedName":{"constructorName":{"identifier":"Error"},"constructorTypeName":{"identifier":"Status"}},"qualification":"Stream"},{"reference":{"otherSlice":5361487995898188190},"usedName":{"constructorName":{"identifier":"BufferError"},"constructorTypeName":{"identifier":"ErrorCode"}},"qualification":"Stream"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fail"}},"qualification":null},{"reference":{"otherSlice":5361487995898188190},"usedName":{"constructorName":{"identifier":"NeedDict"},"constructorTypeName":{"identifier":"ErrorCode"}},"qualification":"Stream"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":4010822550476529195},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":4694087446167378737},"usedName":{"valueName":{"identifier":"formatSupportsDictionary"}},"qualification":"Stream"},{"reference":{"otherSlice":1987586127938159724},"usedName":{"valueName":{"identifier":"deflateSetDictionary"}},"qualification":"Stream"},{"reference":{"otherSlice":7315165113918992770},"usedName":{"typeName":{"identifier":"Format"}},"qualification":"Stream"},{"reference":{"otherSlice":7027838172525951099},"usedName":{"typeName":{"identifier":"CompressParams"}},"qualification":null}],"fragment":["compressStream ::\n               Stream.Format ->\n                 CompressParams -> S.ByteString -> Stream (CompressStream Stream)","compressStream format\n  (CompressParams compLevel method bits memLevel strategy\n     initChunkSize mdict)\n  = \\ chunk ->\n      do Stream.deflateInit format compLevel method bits memLevel\n           strategy\n         setDictionary mdict\n         case chunk of\n             _ | S.null chunk -> fillBuffers 20\n             S.PS inFPtr offset length -> do Stream.pushInputBuffer inFPtr\n                                               offset\n                                               length\n                                             fillBuffers initChunkSize\n  where fillBuffers :: Int -> Stream (CompressStream Stream)\n        fillBuffers outChunkSize\n          = do inputBufferEmpty <- Stream.inputBufferEmpty\n               outputBufferFull <- Stream.outputBufferFull\n               assert (inputBufferEmpty || outputBufferFull) $ return ()\n               when outputBufferFull $\n                 do outFPtr <- Stream.unsafeLiftIO (S.mallocByteString outChunkSize)\n                    Stream.pushOutputBuffer outFPtr 0 outChunkSize\n               if inputBufferEmpty then\n                 return $\n                   CompressInputRequired $\n                     \\ chunk ->\n                       case chunk of\n                           _ | S.null chunk -> drainBuffers True\n                           S.PS inFPtr offset length -> do Stream.pushInputBuffer inFPtr\n                                                             offset\n                                                             length\n                                                           drainBuffers False\n                 else drainBuffers False\n        \n        drainBuffers :: Bool -> Stream (CompressStream Stream)\n        drainBuffers lastChunk\n          = do inputBufferEmpty' <- Stream.inputBufferEmpty\n               outputBufferFull' <- Stream.outputBufferFull\n               assert\n                 (not outputBufferFull' && (lastChunk || not inputBufferEmpty'))\n                 $ return ()\n               let flush = if lastChunk then Stream.Finish else Stream.NoFlush\n               status <- Stream.deflate flush\n               case status of\n                   Stream.Ok -> do outputBufferFull <- Stream.outputBufferFull\n                                   if outputBufferFull then\n                                     do (outFPtr, offset, length) <- Stream.popOutputBuffer\n                                        let chunk = S.PS outFPtr offset length\n                                        return $\n                                          CompressOutputAvailable chunk $\n                                            do fillBuffers defaultCompressBufferSize\n                                     else do fillBuffers defaultCompressBufferSize\n                   Stream.StreamEnd -> do inputBufferEmpty <- Stream.inputBufferEmpty\n                                          assert inputBufferEmpty $ return ()\n                                          outputBufferBytesAvailable <- Stream.outputBufferBytesAvailable\n                                          if outputBufferBytesAvailable > 0 then\n                                            do (outFPtr, offset, length) <- Stream.popOutputBuffer\n                                               let chunk = S.PS outFPtr offset length\n                                               Stream.finalise\n                                               return $\n                                                 CompressOutputAvailable chunk\n                                                   (return CompressStreamEnd)\n                                            else\n                                            do Stream.finalise\n                                               return CompressStreamEnd\n                   Stream.Error code msg -> case code of\n                                                Stream.BufferError -> fail\n                                                                        \"BufferError should be impossible!\"\n                                                Stream.NeedDict _ -> fail \"NeedDict is impossible!\"\n                                                _ -> fail msg\n        \n        setDictionary :: Maybe S.ByteString -> Stream ()\n        setDictionary (Just dict)\n          | Stream.formatSupportsDictionary format =\n            do status <- Stream.deflateSetDictionary dict\n               case status of\n                   Stream.Ok -> return ()\n                   Stream.Error _ msg -> fail msg\n                   _ -> fail \"error when setting deflate dictionary\"\n        setDictionary _ = return ()"],"instances":[],"language":{"extensions":["RankNTypes","DeriveDataTypeable","BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}