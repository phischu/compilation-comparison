{"sliceID":6041788843341595508,"uses":[{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"floor"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"*"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"ceiling"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Double"}},"qualification":null},{"reference":{"builtinModule":"GHC.Float"},"usedName":{"valueName":{"identifier":"logBase"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"identifier":"fromInteger"}},"qualification":null},{"reference":{"builtinModule":"GHC.Float"},"usedName":{"valueName":{"identifier":"floatRadix"}},"qualification":null},{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"undefined"}},"qualification":null},{"reference":{"builtinModule":"GHC.Float"},"usedName":{"valueName":{"identifier":"floatDigits"}},"qualification":null},{"reference":{"builtinModule":"GHC.Float"},"usedName":{"valueName":{"identifier":"floatRange"}},"qualification":null},{"reference":{"builtinModule":"GHC.Float"},"usedName":{"typeName":{"identifier":"RealFloat"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null}],"fragment":["exponentLimits :: forall a . (RealFloat a) => a -> (Int, Int)","exponentLimits _ = (loLimit, hiLimit)\n  where loLimit\n          = floor (fromIntegral lo * log10Radix) -\n              ceiling (fromIntegral digits * log10Radix)\n        hiLimit = ceiling (fromIntegral hi * log10Radix)\n        \n        log10Radix :: Double\n        log10Radix = logBase 10 $ fromInteger radix\n        radix = floatRadix (undefined :: a)\n        digits = floatDigits (undefined :: a)\n        (lo, hi) = floatRange (undefined :: a)"],"instances":[],"language":{"extensions":["DeriveDataTypeable","BangPatterns","ScopedTypeVariables","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}