{"sliceID":1024327530455832984,"uses":[{"reference":{"otherSlice":5632142578980093812},"usedName":{"valueName":{"identifier":"newArray"}},"qualification":"IOA"},{"reference":{"otherSlice":2087085352026741578},"usedName":{"valueName":{"identifier":"minTokenIx"}},"qualification":null},{"reference":{"otherSlice":1547355675373017527},"usedName":{"valueName":{"identifier":"maxTokenIx"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":3191844957948247487},"usedName":{"valueName":{"identifier":"unsafeFreeze"}},"qualification":"Unsafe"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.IOArray"},"usedName":{"typeName":{"identifier":"IOArray"}},"qualification":"IOA"},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":2571540415869764326},"usedName":{"typeName":{"identifier":"HeaderValue"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"otherSlice":390496612234166211},"usedName":{"typeName":{"identifier":"TokenHeaderList"}},"qualification":null},{"reference":{"otherSlice":8952495918426714387},"usedName":{"valueName":{"identifier":"hasOneByte"}},"qualification":null},{"reference":{"otherSlice":8129972227451485047},"usedName":{"valueName":{"identifier":"getByte"}},"qualification":null},{"reference":{"otherSlice":6148195690305084502},"usedName":{"constructorName":{"identifier":"Token"},"constructorTypeName":{"identifier":"Token"}},"qualification":null},{"reference":{"otherSlice":6148195690305084502},"usedName":{"valueName":{"identifier":"isPseudo"}},"qualification":null},{"reference":{"otherSlice":6148195690305084502},"usedName":{"valueName":{"identifier":"ix"}},"qualification":null},{"reference":{"otherSlice":6148195690305084502},"usedName":{"valueName":{"identifier":"shouldBeIndexed"}},"qualification":null},{"reference":{"otherSlice":6148195690305084502},"usedName":{"valueName":{"identifier":"tokenKey"}},"qualification":null},{"reference":{"otherSlice":1097455102875242181},"usedName":{"valueName":{"identifier":"toTokenHeader"}},"qualification":null},{"reference":{"otherSlice":5632142578980093812},"usedName":{"valueName":{"identifier":"unsafeRead"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"when"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"valueName":{"identifier":"isJust"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO"},"usedName":{"valueName":{"identifier":"throwIO"}},"qualification":null},{"reference":{"otherSlice":6823601443434643176},"usedName":{"constructorName":{"identifier":"IllegalHeaderName"},"constructorTypeName":{"identifier":"DecodeError"}},"qualification":null},{"reference":{"otherSlice":6110867943897141794},"usedName":{"valueName":{"identifier":"isMaxTokenIx"}},"qualification":null},{"reference":{"otherSlice":5632142578980093812},"usedName":{"valueName":{"identifier":"unsafeWrite"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"otherSlice":360416568444202388},"usedName":{"valueName":{"identifier":"any"}},"qualification":"B8"},{"reference":{"builtinModule":"GHC.Unicode"},"usedName":{"valueName":{"identifier":"isUpper"}},"qualification":null},{"reference":{"otherSlice":8936256994815824007},"usedName":{"valueName":{"identifier":"original"}},"qualification":null},{"reference":{"otherSlice":4593214390008787149},"usedName":{"valueName":{"identifier":"isCookieTokenIx"}},"qualification":null},{"reference":{"otherSlice":7521817567785272208},"usedName":{"valueName":{"identifier":"empty"}},"qualification":null},{"reference":{"otherSlice":359484736934200607},"usedName":{"valueName":{"operator":"<<"}},"qualification":null},{"reference":{"otherSlice":4524223153277317778},"usedName":{"valueName":{"identifier":"run"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"null"}},"qualification":null},{"reference":{"otherSlice":3086187158865698534},"usedName":{"valueName":{"identifier":"intercalate"}},"qualification":"BS"},{"reference":{"otherSlice":9106452681205693260},"usedName":{"valueName":{"identifier":"tokenCookie"}},"qualification":null},{"reference":{"otherSlice":2814393362854103126},"usedName":{"valueName":{"identifier":"cookieTokenIx"}},"qualification":null},{"reference":{"otherSlice":6383363541455760455},"usedName":{"typeName":{"identifier":"DynamicTable"}},"qualification":null},{"reference":{"otherSlice":3829111669494975350},"usedName":{"typeName":{"identifier":"ReadBuffer"}},"qualification":null},{"reference":{"otherSlice":749801687180271456},"usedName":{"typeName":{"identifier":"ValueTable"}},"qualification":null}],"fragment":["decodeSophisticated ::\n                    DynamicTable -> ReadBuffer -> IO (TokenHeaderList, ValueTable)","decodeSophisticated dyntbl rbuf\n  = do arr <- IOA.newArray (minTokenIx, maxTokenIx) Nothing\n       !tvs <- pseudoNormal arr\n       tbl <- Unsafe.unsafeFreeze arr\n       return (tvs, tbl)\n  where pseudoNormal ::\n                     IOA.IOArray Int (Maybe HeaderValue) -> IO TokenHeaderList\n        pseudoNormal arr = pseudo\n          where pseudo\n                  = do more <- hasOneByte rbuf\n                       if more then\n                         do w <- getByte rbuf\n                            tv@(!Token{..}, !v) <- toTokenHeader dyntbl w rbuf\n                            if isPseudo then\n                              do mx <- unsafeRead arr ix\n                                 when (isJust mx) $ throwIO IllegalHeaderName\n                                 when (isMaxTokenIx ix) $ throwIO IllegalHeaderName\n                                 unsafeWrite arr ix (Just v)\n                                 pseudo\n                              else\n                              do when (isMaxTokenIx ix && B8.any isUpper (original tokenKey)) $\n                                   throwIO IllegalHeaderName\n                                 unsafeWrite arr ix (Just v)\n                                 if isCookieTokenIx ix then normal empty (empty << v) else\n                                   normal (empty << tv) empty\n                         else return []\n                normal !builder !cookie\n                  = do more <- hasOneByte rbuf\n                       if more then\n                         do w <- getByte rbuf\n                            tv@(Token{..}, !v) <- toTokenHeader dyntbl w rbuf\n                            when isPseudo $ throwIO IllegalHeaderName\n                            when (isMaxTokenIx ix && B8.any isUpper (original tokenKey)) $\n                              throwIO IllegalHeaderName\n                            unsafeWrite arr ix (Just v)\n                            if isCookieTokenIx ix then normal builder (cookie << v) else\n                              normal (builder << tv) cookie\n                         else\n                         do let !tvs0 = run builder\n                                !cook = run cookie\n                            if null cook then return tvs0 else\n                              do let !v = BS.intercalate \"; \" cook\n                                     !tvs = (tokenCookie, v) : tvs0\n                                 unsafeWrite arr cookieTokenIx (Just v)\n                                 return tvs"],"instances":[],"language":{"extensions":["BangPatterns","RecordWildCards","OverloadedStrings","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}