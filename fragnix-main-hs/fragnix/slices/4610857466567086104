{"sliceID":4610857466567086104,"uses":[{"reference":{"otherSlice":8748167810724547885},"usedName":{"constructorName":{"identifier":"WorkingBuffer"},"constructorTypeName":{"identifier":"WorkingBuffer"}},"qualification":null},{"reference":{"otherSlice":8748167810724547885},"usedName":{"valueName":{"identifier":"limit"}},"qualification":null},{"reference":{"otherSlice":8748167810724547885},"usedName":{"valueName":{"identifier":"offset"}},"qualification":null},{"reference":{"otherSlice":8748167810724547885},"usedName":{"valueName":{"identifier":"start"}},"qualification":null},{"reference":{"builtinModule":"GHC.IORef"},"usedName":{"valueName":{"identifier":"readIORef"}},"qualification":null},{"reference":{"otherSlice":2841342092572870169},"usedName":{"valueName":{"identifier":"initialOffset"}},"qualification":null},{"reference":{"builtinModule":"GHC.IORef"},"usedName":{"valueName":{"identifier":"writeIORef"}},"qualification":null},{"reference":{"builtinModule":"GHC.Ptr"},"usedName":{"valueName":{"identifier":"minusPtr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":8403824236081834014},"usedName":{"valueName":{"identifier":"getByte'"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":">>="}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":1991669531579616291},"usedName":{"valueName":{"identifier":"idxEos"}},"qualification":null},{"reference":{"otherSlice":1383461483015042287},"usedName":{"valueName":{"identifier":"huffmanLength"}},"qualification":null},{"reference":{"otherSlice":3191844957948247487},"usedName":{"valueName":{"identifier":"unsafeAt"}},"qualification":null},{"reference":{"otherSlice":1859013224974265907},"usedName":{"valueName":{"identifier":"huffmanCode"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"identifier":"shiftL"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"operator":".|."}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"when"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO"},"usedName":{"valueName":{"identifier":"throwIO"}},"qualification":null},{"reference":{"otherSlice":3210954324554976950},"usedName":{"constructorName":{"identifier":"BufferOverrun"},"constructorTypeName":{"identifier":"BufferOverrun"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"identifier":"shiftR"}},"qualification":null},{"reference":{"otherSlice":313105792432546660},"usedName":{"valueName":{"identifier":"shiftForWrite"}},"qualification":null},{"reference":{"builtinModule":"GHC.Word"},"usedName":{"typeName":{"identifier":"Word8"}},"qualification":null},{"reference":{"builtinModule":"Foreign.Storable"},"usedName":{"valueName":{"identifier":"poke"}},"qualification":null},{"reference":{"builtinModule":"GHC.Ptr"},"usedName":{"valueName":{"identifier":"plusPtr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":8748167810724547885},"usedName":{"typeName":{"identifier":"WorkingBuffer"}},"qualification":null},{"reference":{"otherSlice":3829111669494975350},"usedName":{"typeName":{"identifier":"ReadBuffer"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null}],"fragment":["enc :: WorkingBuffer -> ReadBuffer -> IO Int","enc WorkingBuffer{..} rbuf\n  = do beg <- readIORef offset\n       end <- go (beg, 0, initialOffset)\n       writeIORef offset end\n       let !len = end `minusPtr` beg\n       return len\n  where go (dst, encoded, off)\n          = do !i <- getByte' rbuf\n               if i >= 0 then copy dst (bond i) >>= go else\n                 if off == initialOffset then return dst else\n                   do let (encoded1, _) = bond idxEos\n                      write dst encoded1\n          where {-# INLINE bond #-}\n                bond i = (encoded', off')\n                  where !len = huffmanLength `unsafeAt` i\n                        !code = huffmanCode `unsafeAt` i\n                        !scode = code `shiftL` (off - len)\n                        !encoded' = encoded .|. scode\n                        !off' = off - len\n                \n                {-# INLINE write #-}\n                write p w\n                  = do when (p >= limit) $ throwIO BufferOverrun\n                       let !w8 = fromIntegral (w `shiftR` shiftForWrite) :: Word8\n                       poke p w8\n                       let !p' = p `plusPtr` 1\n                       return p'\n                \n                {-# INLINE copy #-}\n                copy p (w, o)\n                  | o > shiftForWrite = return (p, w, o)\n                  | otherwise =\n                    do p' <- write p w\n                       let !w' = w `shiftL` 8\n                           !o' = o + 8\n                       copy p' (w', o')"],"instances":[],"language":{"extensions":["BangPatterns","RecordWildCards","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}