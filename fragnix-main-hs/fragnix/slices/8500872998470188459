{"sliceID":8500872998470188459,"uses":[{"reference":{"otherSlice":1541402738797772585},"usedName":{"constructorName":{"identifier":"Regex"},"constructorTypeName":{"identifier":"Regex"}},"qualification":null},{"reference":{"otherSlice":498108700764045428},"usedName":{"valueName":{"identifier":"nullTest"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"/="}},"qualification":null},{"reference":{"otherSlice":1310776574081630583},"usedName":{"valueName":{"identifier":"compNoSub"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"operator":".&."}},"qualification":null},{"reference":{"otherSlice":841163542554592407},"usedName":{"valueName":{"identifier":"wrapTest"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Right"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"True"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"False"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Left"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"builtinModule":"Foreign.ForeignPtr"},"usedName":{"valueName":{"identifier":"withForeignPtr"}},"qualification":null},{"reference":{"builtinModule":"Foreign.Storable"},"usedName":{"valueName":{"identifier":"peekByteOff"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"builtinModule":"Foreign.C.Types"},"usedName":{"typeName":{"identifier":"CSize"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"*"}},"qualification":null},{"reference":{"builtinModule":"Foreign.Marshal.Alloc"},"usedName":{"valueName":{"identifier":"allocaBytes"}},"qualification":null},{"reference":{"otherSlice":6431175393264208140},"usedName":{"valueName":{"identifier":"doMatch"}},"qualification":null},{"reference":{"otherSlice":1541402738797772585},"usedName":{"typeName":{"identifier":"Regex"}},"qualification":null},{"reference":{"builtinModule":"Foreign.C.String"},"usedName":{"typeName":{"identifier":"CString"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"typeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":106396208025620094},"usedName":{"typeName":{"identifier":"WrapError"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":8898595847961145836},"usedName":{"typeName":{"identifier":"RegOffset"}},"qualification":null}],"fragment":["wrapMatch ::\n          Regex ->\n            CString -> IO (Either WrapError (Maybe [(RegOffset, RegOffset)]))","wrapMatch regex@(Regex regex_fptr compileOptions flags) cstr\n  = do nullTest cstr \"wrapMatch cstr\" $\n         do if (0 /= compNoSub .&. compileOptions) then\n              do r <- wrapTest regex cstr\n                 case r of\n                     Right True -> return (Right (Just []))\n                     Right False -> return (Right Nothing)\n                     Left err -> return (Left err)\n              else\n              do withForeignPtr regex_fptr $\n                   \\ regex_ptr ->\n                     do nsub <- ((\\ hsc_ptr -> peekByteOff hsc_ptr 48)) regex_ptr ::\n                                  IO CSize\n                        let nsub_int, nsub_bytes :: Int\n                            nsub_int = fromIntegral nsub\n                            nsub_bytes = ((1 + nsub_int) * (8))\n                        allocaBytes nsub_bytes $\n                          \\ p_match ->\n                            do nullTest p_match \"wrapMatch allocaBytes\" $\n                                 do doMatch regex_ptr cstr nsub p_match flags"],"instances":[],"language":{"extensions":["MultiParamTypeClasses","FunctionalDependencies","ForeignFunctionInterface","GeneralizedNewtypeDeriving","FlexibleContexts","TypeSynonymInstances","FlexibleInstances","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}