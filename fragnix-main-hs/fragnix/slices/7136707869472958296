{"sliceID":7136707869472958296,"uses":[{"reference":{"otherSlice":7202692338078551997},"usedName":{"valueName":{"identifier":"null"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"const"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"repeat"}},"qualification":null},{"reference":{"otherSlice":6833081969160815042},"usedName":{"valueName":{"identifier":"empty"}},"qualification":"L"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"map"}},"qualification":null},{"reference":{"otherSlice":677049321249320014},"usedName":{"valueName":{"identifier":"fromChunks"}},"qualification":"L"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"otherSlice":7656308987823753789},"usedName":{"valueName":{"identifier":"toChunks"}},"qualification":"L"},{"reference":{"otherSlice":7235567377809295464},"usedName":{"valueName":{"identifier":"length"}},"qualification":"S"},{"reference":{"otherSlice":2096536890270123989},"usedName":{"valueName":{"identifier":"lazyBreaker"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"True"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"null"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":2183772564339838042},"usedName":{"valueName":{"identifier":"ldrop"}},"qualification":null},{"reference":{"otherSlice":4010822550476529195},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"S"},{"reference":{"otherSlice":7233619382983855062},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"L"}],"fragment":["split :: S.ByteString -> L.ByteString -> [L.ByteString]","split pat | S.null pat = const (repeat L.empty)\nsplit pat = map L.fromChunks . splitter . L.toChunks\n  where !patLen = S.length pat\n        breaker = lazyBreaker True pat\n        splitter strs\n          | null strs = []\n          | otherwise = splitter' strs\n        splitter' strs\n          | null strs = [[]]\n          | otherwise =\n            case breaker strs of\n                (pre, mtch) -> pre :\n                                 case mtch of\n                                     [] -> []\n                                     _ -> splitter' (ldrop patLen mtch)"],"instances":[],"language":{"extensions":["BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}