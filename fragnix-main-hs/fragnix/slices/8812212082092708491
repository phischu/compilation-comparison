{"sliceID":8812212082092708491,"uses":[{"reference":{"otherSlice":3835980439088584228},"usedName":{"constructorName":{"identifier":"Empty"},"constructorTypeName":{"identifier":"Text"}},"qualification":null},{"reference":{"otherSlice":3206583878039194784},"usedName":{"valueName":{"identifier":"empty"}},"qualification":null},{"reference":{"otherSlice":4923910788515433777},"usedName":{"constructorName":{"operator":":*:"},"constructorTypeName":{"identifier":"PairS"}},"qualification":null},{"reference":{"otherSlice":3835980439088584228},"usedName":{"constructorName":{"identifier":"Chunk"},"constructorTypeName":{"identifier":"Text"}},"qualification":null},{"reference":{"otherSlice":6742866475076404776},"usedName":{"constructorName":{"identifier":"Text"},"constructorTypeName":{"identifier":"Text"}},"qualification":"T"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">="}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":420952891824589826},"usedName":{"valueName":{"identifier":"chunk"}},"qualification":null},{"reference":{"otherSlice":4069519914147446271},"usedName":{"valueName":{"identifier":"text"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Int"},"usedName":{"typeName":{"identifier":"Int64"}},"qualification":null},{"reference":{"otherSlice":3835980439088584228},"usedName":{"typeName":{"identifier":"Text"}},"qualification":null},{"reference":{"otherSlice":4923910788515433777},"usedName":{"typeName":{"identifier":"PairS"}},"qualification":null}],"fragment":["splitAtWord :: Int64 -> Text -> PairS Text Text","splitAtWord _ Empty = empty :*: empty\nsplitAtWord x (Chunk c@(T.Text arr off len) cs)\n  | y >= len =\n    let h :*: t = splitAtWord (x - fromIntegral len) cs in\n      Chunk c h :*: t\n  | otherwise =\n    chunk (text arr off y) empty :*:\n      chunk (text arr (off + y) (len - y)) cs\n  where y = fromIntegral x"],"instances":[],"language":{"extensions":["BangPatterns","MagicHash","TypeFamilies","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}