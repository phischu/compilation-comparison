{"sliceID":7019526190272747543,"uses":[{"reference":{"otherSlice":8587154504401928891},"usedName":{"typeName":{"identifier":"MonadCatch"}},"qualification":null},{"reference":{"otherSlice":6947186979443466061},"usedName":{"typeName":{"identifier":"ResourceT"}},"qualification":null},{"reference":{"otherSlice":8587154504401928891},"usedName":{"valueName":{"identifier":"catch"}},"qualification":null},{"reference":{"otherSlice":6947186979443466061},"usedName":{"constructorName":{"identifier":"ResourceT"},"constructorTypeName":{"identifier":"ResourceT"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":6947186979443466061},"usedName":{"valueName":{"identifier":"unResourceT"}},"qualification":null}],"fragment":["instance MonadCatch m => MonadCatch (ResourceT m) where\n        catch (ResourceT m) c\n          = ResourceT $ \\ r -> m r `catch` \\ e -> unResourceT (c e) r"],"instances":[],"language":{"extensions":["DeriveDataTypeable","FlexibleInstances","FlexibleContexts","MultiParamTypeClasses","TypeFamilies","UndecidableInstances","RankNTypes","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":true}}