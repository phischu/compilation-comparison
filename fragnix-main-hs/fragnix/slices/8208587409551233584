{"sliceID":8208587409551233584,"uses":[{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"error"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":1530965345057959329},"usedName":{"valueName":{"identifier":"empty"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":8468946667989408909},"usedName":{"constructorName":{"identifier":"Seq"},"constructorTypeName":{"identifier":"Seq"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"otherSlice":2497553050502348575},"usedName":{"typeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"builtinModule":"GHC.Prim"},"usedName":{"valueName":{"identifier":"seq"}},"qualification":null},{"reference":{"otherSlice":2497553050502348575},"usedName":{"constructorName":{"identifier":"Single"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"otherSlice":2497553050502348575},"usedName":{"constructorName":{"identifier":"Deep"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"*"}},"qualification":null},{"reference":{"otherSlice":6073454630168832022},"usedName":{"constructorName":{"identifier":"One"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"otherSlice":2497553050502348575},"usedName":{"constructorName":{"identifier":"Empty"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"quotRem"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"otherSlice":6073454630168832022},"usedName":{"constructorName":{"identifier":"Two"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"otherSlice":6073454630168832022},"usedName":{"constructorName":{"identifier":"Three"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"otherSlice":4603056598885952374},"usedName":{"constructorName":{"identifier":"Node3"},"constructorTypeName":{"identifier":"Node"}},"qualification":null},{"reference":{"otherSlice":6500945367252731749},"usedName":{"typeName":{"identifier":"Elem"}},"qualification":null},{"reference":{"builtinModule":"GHC.Prim"},"usedName":{"valueName":{"identifier":"coerce"}},"qualification":null},{"reference":{"otherSlice":8468946667989408909},"usedName":{"typeName":{"identifier":"Seq"}},"qualification":null},{"reference":{"otherSlice":6500945367252731749},"usedName":{"constructorName":{"identifier":"Elem"},"constructorTypeName":{"identifier":"Elem"}},"qualification":null}],"fragment":["fromFunction :: Int -> (Int -> a) -> Seq a","fromFunction len f\n  | len < 0 =\n    error \"Data.Sequence.fromFunction called with negative len\"\n  | len == 0 = empty\n  | otherwise = Seq $ create (lift_elem f) 1 0 len\n  where create :: (Int -> a) -> Int -> Int -> Int -> FingerTree a\n        create b s i trees\n          = i `seq`\n              s `seq`\n                case trees of\n                    1 -> Single $ b i\n                    2 -> Deep (2 * s) (One (b i)) Empty (One (b (i + s)))\n                    3 -> Deep (3 * s) (createTwo i) Empty (One (b (i + 2 * s)))\n                    4 -> Deep (4 * s) (createTwo i) Empty (createTwo (i + 2 * s))\n                    5 -> Deep (5 * s) (createThree i) Empty (createTwo (i + 3 * s))\n                    6 -> Deep (6 * s) (createThree i) Empty (createThree (i + 3 * s))\n                    _ -> case trees `quotRem` 3 of\n                             (trees', 1) -> Deep (trees * s) (createTwo i)\n                                              (create mb (3 * s) (i + 2 * s) (trees' - 1))\n                                              (createTwo (i + (2 + 3 * (trees' - 1)) * s))\n                             (trees', 2) -> Deep (trees * s) (createThree i)\n                                              (create mb (3 * s) (i + 3 * s) (trees' - 1))\n                                              (createTwo (i + (3 + 3 * (trees' - 1)) * s))\n                             (trees', _) -> Deep (trees * s) (createThree i)\n                                              (create mb (3 * s) (i + 3 * s) (trees' - 2))\n                                              (createThree (i + (3 + 3 * (trees' - 2)) * s))\n          where createTwo j = Two (b j) (b (j + s))\n                \n                {-# INLINE createTwo #-}\n                createThree j = Three (b j) (b (j + s)) (b (j + 2 * s))\n                \n                {-# INLINE createThree #-}\n                mb j = Node3 (3 * s) (b j) (b (j + s)) (b (j + 2 * s))\n                \n                {-# INLINE mb #-}\n        \n        lift_elem :: (Int -> a) -> (Int -> Elem a)\n        lift_elem g = coerce g\n        \n        {-# INLINE lift_elem #-}"],"instances":[],"language":{"extensions":["DeriveDataTypeable","StandaloneDeriving","TypeFamilies","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}