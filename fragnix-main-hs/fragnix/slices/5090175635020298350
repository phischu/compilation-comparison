{"sliceID":5090175635020298350,"uses":[{"reference":{"otherSlice":4438676559991320712},"usedName":{"valueName":{"identifier":"findMonthDay"}},"qualification":null},{"reference":{"otherSlice":6660754767287087335},"usedName":{"valueName":{"identifier":"monthLengths"}},"qualification":null},{"reference":{"otherSlice":4743570811660802253},"usedName":{"valueName":{"identifier":"clip"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null}],"fragment":["dayOfYearToMonthAndDay :: Bool -> Int -> (Int, Int)","dayOfYearToMonthAndDay isLeap yd\n  = findMonthDay (monthLengths isLeap)\n      (clip 1 (if isLeap then 366 else 365) yd)"],"instances":[],"language":{"extensions":["Rank2Types","DeriveDataTypeable","StandaloneDeriving","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}