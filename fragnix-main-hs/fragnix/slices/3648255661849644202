{"sliceID":3648255661849644202,"uses":[{"reference":{"otherSlice":4276299172465164126},"usedName":{"valueName":{"identifier":"gfoldlAccum"}},"qualification":null},{"reference":{"builtinModule":"Data.Data"},"usedName":{"typeName":{"identifier":"Data"}},"qualification":null},{"reference":{"builtinModule":"Control.Applicative"},"usedName":{"valueName":{"operator":"<*>"}},"qualification":null},{"reference":{"builtinModule":"Control.Applicative"},"usedName":{"typeName":{"identifier":"Applicative"}},"qualification":null},{"reference":{"builtinModule":"Control.Applicative"},"usedName":{"valueName":{"identifier":"pure"}},"qualification":null}],"fragment":["gmapAccumA ::\n           forall b d a . (Data d, Applicative a) =>\n             (forall e . Data e => b -> e -> (b, a e)) -> b -> d -> (b, a d)","gmapAccumA f a0 d0 = gfoldlAccum k z a0 d0\n  where k ::\n          forall d' e . (Data d') => b -> a (d' -> e) -> d' -> (b, a e)\n        k a c d\n          = let (a', d') = f a d\n                c' = c <*> d'\n              in (a', c')\n        \n        z :: forall t c a' . (Applicative a') => t -> c -> (t, a' c)\n        z a x = (a, pure x)"],"instances":[],"language":{"extensions":["RankNTypes","ScopedTypeVariables","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}