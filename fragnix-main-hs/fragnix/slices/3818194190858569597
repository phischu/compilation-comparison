{"sliceID":3818194190858569597,"uses":[{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"/="}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"otherSlice":1358554234100414793},"usedName":{"valueName":{"identifier":"unsafeWrite"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":3133220126729353073},"usedName":{"valueName":{"identifier":"enlargeFront"}},"qualification":null},{"reference":{"otherSlice":7169136477039637979},"usedName":{"valueName":{"identifier":"checkIndex"}},"qualification":"Ck"},{"reference":{"otherSlice":4579156144394400265},"usedName":{"constructorName":{"identifier":"Internal"},"constructorTypeName":{"identifier":"Checks"}},"qualification":"Ck"},{"reference":{"otherSlice":3867849288792351978},"usedName":{"valueName":{"identifier":"length"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":3377634759521931512},"usedName":{"typeName":{"identifier":"PrimMonad"}},"qualification":null},{"reference":{"otherSlice":3867849288792351978},"usedName":{"typeName":{"identifier":"MVector"}},"qualification":null},{"reference":{"otherSlice":3377634759521931512},"usedName":{"typeName":{"identifier":"PrimState"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null}],"fragment":["unsafePrepend1 ::\n                 (PrimMonad m, MVector v a) =>\n                 v (PrimState m) a -> Int -> a -> m (v (PrimState m) a, Int)","unsafePrepend1 v i x\n  | i /= 0 =\n    do let i' = i - 1\n       unsafeWrite v i' x\n       return (v, i')\n  | otherwise =\n    do (v', i) <- enlargeFront v\n       let i' = i - 1\n       ((Ck.checkIndex \"Data/Vector/Generic/Mutable.hs\" 233) Ck.Internal)\n         \"unsafePrepend1\"\n         i'\n         (length v')\n         $ unsafeWrite v' i' x\n       return (v', i')"],"instances":[],"language":{"extensions":["DeriveDataTypeable","MultiParamTypeClasses","BangPatterns","ScopedTypeVariables","TypeFamilies","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}