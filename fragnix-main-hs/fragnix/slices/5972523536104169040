{"sliceID":5972523536104169040,"uses":[{"reference":{"otherSlice":1174079497962638576},"usedName":{"typeName":{"identifier":"Binary"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Char"}},"qualification":null},{"reference":{"otherSlice":1174079497962638576},"usedName":{"valueName":{"identifier":"put"}},"qualification":null},{"reference":{"otherSlice":7260061384956071601},"usedName":{"valueName":{"identifier":"putCharUtf8"}},"qualification":null},{"reference":{"otherSlice":1174079497962638576},"usedName":{"valueName":{"identifier":"putList"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"length"}},"qualification":null},{"reference":{"builtinModule":"Data.Monoid"},"usedName":{"valueName":{"operator":"<>"}},"qualification":null},{"reference":{"otherSlice":2033111279381183915},"usedName":{"valueName":{"identifier":"putStringUtf8"}},"qualification":null},{"reference":{"otherSlice":1174079497962638576},"usedName":{"valueName":{"identifier":"get"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"liftM"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"builtinModule":"GHC.Word"},"usedName":{"typeName":{"identifier":"Word8"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"flip"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"identifier":"shiftL"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"identifier":"xor"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"operator":".|."}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$!"}},"qualification":null},{"reference":{"builtinModule":"GHC.Enum"},"usedName":{"valueName":{"identifier":"toEnum"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Enum"},"usedName":{"valueName":{"identifier":"fromEnum"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fail"}},"qualification":null}],"fragment":["instance Binary Char where\n        put = putCharUtf8\n        putList str = put (length str) <> putStringUtf8 str\n        get\n          = do let getByte = liftM (fromIntegral :: Word8 -> Int) get\n                   shiftL6 = flip shiftL 6 :: Int -> Int\n               w <- getByte\n               r <- case () of\n                        _ | w < 128 -> return w\n                          | w < 224 ->\n                            do x <- liftM (xor 128) getByte\n                               return (x .|. shiftL6 (xor 192 w))\n                          | w < 240 ->\n                            do x <- liftM (xor 128) getByte\n                               y <- liftM (xor 128) getByte\n                               return (y .|. shiftL6 (x .|. shiftL6 (xor 224 w)))\n                          | otherwise ->\n                            do x <- liftM (xor 128) getByte\n                               y <- liftM (xor 128) getByte\n                               z <- liftM (xor 128) getByte\n                               return (z .|. shiftL6 (y .|. shiftL6 (x .|. shiftL6 (xor 240 w))))\n               getChr r\n          where getChr w\n                  | w <= 1114111 = return $! toEnum $ fromEnum w\n                  | otherwise = fail \"Not a valid Unicode code point!\""],"instances":[],"language":{"extensions":["FlexibleContexts","DefaultSignatures","GADTs","ScopedTypeVariables","PatternGuards","PolyKinds","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll"],"isInstance":true}}