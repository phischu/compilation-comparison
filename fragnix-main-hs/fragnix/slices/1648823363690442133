{"sliceID":1648823363690442133,"uses":[{"reference":{"otherSlice":8642306666063513779},"usedName":{"constructorName":{"identifier":"PS"},"constructorTypeName":{"identifier":"ByteString"}},"qualification":null},{"reference":{"otherSlice":852632865931594167},"usedName":{"valueName":{"identifier":"unsafeCreate"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"Foreign.Marshal.Array"},"usedName":{"valueName":{"identifier":"allocaArray"}},"qualification":null},{"reference":{"otherSlice":6783458322206933407},"usedName":{"valueName":{"identifier":"memset"}},"qualification":null},{"reference":{"builtinModule":"GHC.Ptr"},"usedName":{"valueName":{"identifier":"castPtr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"*"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"builtinModule":"Foreign.Storable"},"usedName":{"valueName":{"identifier":"sizeOf"}},"qualification":null},{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"undefined"}},"qualification":null},{"reference":{"builtinModule":"Foreign.C.Types"},"usedName":{"typeName":{"identifier":"CSize"}},"qualification":null},{"reference":{"builtinModule":"Foreign.ForeignPtr"},"usedName":{"valueName":{"identifier":"withForeignPtr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Ptr"},"usedName":{"valueName":{"identifier":"plusPtr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Prim"},"usedName":{"valueName":{"identifier":"seq"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"False"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"Foreign.Storable"},"usedName":{"valueName":{"identifier":"peekElemOff"}},"qualification":null},{"reference":{"builtinModule":"Control.Monad"},"usedName":{"valueName":{"identifier":"when"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"/="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":">>"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Ptr"},"usedName":{"typeName":{"identifier":"Ptr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Word"},"usedName":{"typeName":{"identifier":"Word8"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fmap"}},"qualification":null},{"reference":{"builtinModule":"Foreign.Storable"},"usedName":{"valueName":{"identifier":"pokeElemOff"}},"qualification":null},{"reference":{"otherSlice":8642306666063513779},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":null}],"fragment":["sort :: ByteString -> ByteString","sort (PS input s l)\n  = unsafeCreate l $\n      \\ p ->\n        allocaArray 256 $\n          \\ arr ->\n            do _ <- memset (castPtr arr) 0\n                      (256 * fromIntegral (sizeOf (undefined :: CSize)))\n               withForeignPtr input\n                 (\\ x -> countOccurrences arr (x `plusPtr` s) l)\n               let go a b | a `seq` b `seq` False = undefined\n                   go 256 _ = return ()\n                   go i ptr\n                     = do n <- peekElemOff arr i\n                          when (n /= 0) $ memset ptr (fromIntegral i) n >> return ()\n                          go (i + 1) (ptr `plusPtr` (fromIntegral n))\n               go 0 p\n  where countOccurrences :: Ptr CSize -> Ptr Word8 -> Int -> IO ()\n        countOccurrences a b c | a `seq` b `seq` c `seq` False = undefined\n        countOccurrences counts str len = go 0\n          where go a | a `seq` False = undefined\n                go i\n                  | i == len = return ()\n                  | otherwise =\n                    do k <- fromIntegral `fmap` peekElemOff str i\n                       x <- peekElemOff counts k\n                       pokeElemOff counts k (x + 1)\n                       go (i + 1)"],"instances":[],"language":{"extensions":["MagicHash","UnboxedTuples","NamedFieldPuns","BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}