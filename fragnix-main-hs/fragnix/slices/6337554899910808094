{"sliceID":6337554899910808094,"uses":[{"reference":{"otherSlice":7949339268674780491},"usedName":{"constructorName":{"identifier":"C"},"constructorTypeName":{"identifier":"Get"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":7235567377809295464},"usedName":{"valueName":{"identifier":"length"}},"qualification":"B"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">="}},"qualification":null},{"reference":{"otherSlice":7949339268674780491},"usedName":{"valueName":{"identifier":"runCont"}},"qualification":null},{"reference":{"otherSlice":3805985700385003970},"usedName":{"valueName":{"identifier":"withInputChunks"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":">>="}},"qualification":null},{"reference":{"otherSlice":33354298939863988},"usedName":{"valueName":{"identifier":"put"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Right"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":7459617743278403755},"usedName":{"valueName":{"identifier":"empty"}},"qualification":"B"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Left"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"otherSlice":8502544738463299527},"usedName":{"valueName":{"identifier":"concat"}},"qualification":"B"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"dropWhile"}},"qualification":null},{"reference":{"otherSlice":7202692338078551997},"usedName":{"valueName":{"identifier":"null"}},"qualification":"B"},{"reference":{"otherSlice":4921503095993748944},"usedName":{"constructorName":{"identifier":"Fail"},"constructorTypeName":{"identifier":"Decoder"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"otherSlice":7949339268674780491},"usedName":{"typeName":{"identifier":"Get"}},"qualification":null}],"fragment":["ensureN :: Int -> Get ()","ensureN !n0\n  = C $\n      \\ inp ks ->\n        do if B.length inp >= n0 then ks inp () else\n             runCont (withInputChunks n0 enoughChunks onSucc onFail >>= put) inp\n               ks\n  where enoughChunks n str\n          | B.length str >= n = Right (str, B.empty)\n          | otherwise = Left (n - B.length str)\n        onSucc = B.concat . dropWhile B.null\n        onFail bss = C $ \\ _ _ -> Fail (B.concat bss) \"not enough bytes\""],"instances":[],"language":{"extensions":["RankNTypes","MagicHash","BangPatterns","TypeFamilies","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}