{"sliceID":5114496757058538611,"uses":[{"reference":{"otherSlice":2194671574180484365},"usedName":{"valueName":{"identifier":"newEmptyTMVarIO"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO"},"usedName":{"valueName":{"identifier":"mask"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"Control.Exception.Base"},"usedName":{"valueName":{"identifier":"try"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":">>="}},"qualification":null},{"reference":{"builtinModule":"GHC.Conc.Sync"},"usedName":{"valueName":{"identifier":"atomically"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"otherSlice":4064130125690704443},"usedName":{"valueName":{"identifier":"putTMVar"}},"qualification":null},{"reference":{"otherSlice":6927386841403917495},"usedName":{"constructorName":{"identifier":"Async"},"constructorTypeName":{"identifier":"Async"}},"qualification":null},{"reference":{"otherSlice":7258348094861657553},"usedName":{"valueName":{"identifier":"readTMVar"}},"qualification":null},{"reference":{"otherSlice":7533478566096357795},"usedName":{"valueName":{"identifier":"catchAll"}},"qualification":null},{"reference":{"otherSlice":6058864750426384946},"usedName":{"valueName":{"identifier":"uninterruptibleCancel"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO"},"usedName":{"valueName":{"identifier":"throwIO"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"builtinModule":"GHC.Conc.Sync"},"usedName":{"typeName":{"identifier":"ThreadId"}},"qualification":null},{"reference":{"otherSlice":6927386841403917495},"usedName":{"typeName":{"identifier":"Async"}},"qualification":null}],"fragment":["withAsyncUsing ::\n               (IO () -> IO ThreadId) -> IO a -> (Async a -> IO b) -> IO b","withAsyncUsing doFork\n  = \\ action inner ->\n      do var <- newEmptyTMVarIO\n         mask $\n           \\ restore ->\n             do t <- doFork $ try (restore action) >>= atomically . putTMVar var\n                let a = Async t (readTMVar var)\n                r <- restore (inner a) `catchAll`\n                       \\ e ->\n                         do uninterruptibleCancel a\n                            throwIO e\n                uninterruptibleCancel a\n                return r"],"instances":[],"language":{"extensions":["MagicHash","UnboxedTuples","RankNTypes","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}