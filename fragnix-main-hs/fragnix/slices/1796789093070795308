{"sliceID":1796789093070795308,"uses":[{"reference":{"otherSlice":2693679721186502528},"usedName":{"valueName":{"identifier":"wantInput"}},"qualification":null},{"reference":{"otherSlice":9026227396759938023},"usedName":{"valueName":{"identifier":"get"}},"qualification":null},{"reference":{"otherSlice":7133367760469904600},"usedName":{"valueName":{"identifier":"advance"}},"qualification":null},{"reference":{"otherSlice":8815246374892258961},"usedName":{"valueName":{"identifier":"size"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"reverse"}},"qualification":null},{"reference":{"otherSlice":915346971857185237},"usedName":{"typeName":{"identifier":"Parser"}},"qualification":null},{"reference":{"otherSlice":2241541392207318616},"usedName":{"typeName":{"identifier":"Text"}},"qualification":null}],"fragment":["takeRest :: Parser [Text]","takeRest = go []\n  where go acc\n          = do input <- wantInput\n               if input then\n                 do s <- get\n                    advance (size s)\n                    go (s : acc)\n                 else return (reverse acc)"],"instances":[],"language":{"extensions":["BangPatterns","FlexibleInstances","GADTs","OverloadedStrings","Rank2Types","RecordWildCards","TypeFamilies","TypeSynonymInstances","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}