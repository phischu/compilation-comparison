{"sliceID":5390491492011993819,"uses":[{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"valueName":{"identifier":"fromMaybe"}},"qualification":null},{"reference":{"otherSlice":7459617743278403755},"usedName":{"valueName":{"identifier":"empty"}},"qualification":"B8"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"lookup"}},"qualification":null},{"reference":{"otherSlice":1770321871109794098},"usedName":{"valueName":{"identifier":"hAccept"}},"qualification":null},{"reference":{"otherSlice":9025559142516147699},"usedName":{"valueName":{"identifier":"requestHeaders"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":4010822550476529195},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"B8"},{"reference":{"otherSlice":3693489416482845935},"usedName":{"valueName":{"identifier":"pack"}},"qualification":"B8"},{"reference":{"otherSlice":4528621529984481541},"usedName":{"valueName":{"identifier":"isInfixOf"}},"qualification":"B8"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"join"}},"qualification":null},{"reference":{"otherSlice":9025559142516147699},"usedName":{"valueName":{"identifier":"queryString"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":3717411781929592379},"usedName":{"valueName":{"identifier":"changeVal"}},"qualification":null},{"reference":{"otherSlice":8896971230885589368},"usedName":{"constructorName":{"identifier":"ResponseBuilder"},"constructorTypeName":{"identifier":"Response"}},"qualification":null},{"reference":{"otherSlice":1564490560938007565},"usedName":{"valueName":{"identifier":"responseBuilder"}},"qualification":null},{"reference":{"otherSlice":3282150784634753100},"usedName":{"valueName":{"identifier":"copyByteString"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"mappend"}},"qualification":null},{"reference":{"otherSlice":4815866161844437191},"usedName":{"valueName":{"identifier":"fromChar"}},"qualification":null},{"reference":{"otherSlice":1648177423474526705},"usedName":{"valueName":{"identifier":"responseToStream"}},"qualification":null},{"reference":{"otherSlice":1770321871109794098},"usedName":{"valueName":{"identifier":"hContentType"}},"qualification":null},{"reference":{"otherSlice":6327919249248331934},"usedName":{"valueName":{"identifier":"isPrefixOf"}},"qualification":"S"},{"reference":{"otherSlice":5689044719128030324},"usedName":{"valueName":{"identifier":"responseStream"}},"qualification":null},{"reference":{"otherSlice":4688632796141833664},"usedName":{"typeName":{"identifier":"Middleware"}},"qualification":null}],"fragment":["jsonp :: Middleware","jsonp app env sendResponse\n  = do let accept\n             = fromMaybe B8.empty $ lookup hAccept $ requestHeaders env\n       let callback :: Maybe B8.ByteString\n           callback\n             = if B8.pack \"text/javascript\" `B8.isInfixOf` accept then\n                 join $ lookup \"callback\" $ queryString env else Nothing\n       let env'\n             = case callback of\n                   Nothing -> env\n                   Just _ -> env{requestHeaders =\n                                   changeVal hAccept \"application/json\" $ requestHeaders env}\n       app env' $\n         \\ res ->\n           case callback of\n               Nothing -> sendResponse res\n               Just c -> go c res\n  where go c r@(ResponseBuilder s hs b)\n          = sendResponse $\n              case checkJSON hs of\n                  Nothing -> r\n                  Just hs' -> responseBuilder s hs' $\n                                copyByteString c `mappend` fromChar '(' `mappend` b `mappend`\n                                  fromChar ')'\n        go c r\n          = case checkJSON hs of\n                Just hs' -> addCallback c s hs' wb\n                Nothing -> sendResponse r\n          where (s, hs, wb) = responseToStream r\n        checkJSON hs\n          = case lookup hContentType hs of\n                Just x | B8.pack \"application/json\" `S.isPrefixOf` x ->\n                         Just $ fixHeaders hs\n                _ -> Nothing\n        fixHeaders = changeVal hContentType \"text/javascript\"\n        addCallback cb s hs wb\n          = wb $\n              \\ body ->\n                sendResponse $\n                  responseStream s hs $\n                    \\ sendChunk flush ->\n                      do sendChunk $ copyByteString cb `mappend` fromChar '('\n                         _ <- body sendChunk flush\n                         sendChunk $ fromChar ')'"],"instances":[],"language":{"extensions":["OverloadedStrings","RankNTypes","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}