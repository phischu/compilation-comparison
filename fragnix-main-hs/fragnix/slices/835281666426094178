{"sliceID":835281666426094178,"uses":[{"reference":{"otherSlice":4333102838199653287},"usedName":{"valueName":{"identifier":"zipWith'"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"min"}},"qualification":null},{"reference":{"otherSlice":6742606937213304270},"usedName":{"valueName":{"identifier":"length"}},"qualification":null},{"reference":{"otherSlice":5107544596642727227},"usedName":{"valueName":{"identifier":"take"}},"qualification":null},{"reference":{"otherSlice":8468946667989408909},"usedName":{"typeName":{"identifier":"Seq"}},"qualification":null}],"fragment":["zipWith :: (a -> b -> c) -> Seq a -> Seq b -> Seq c","zipWith f s1 s2 = zipWith' f s1' s2'\n  where minLen = min (length s1) (length s2)\n        s1' = take minLen s1\n        s2' = take minLen s2"],"instances":[],"language":{"extensions":["DeriveDataTypeable","StandaloneDeriving","TypeFamilies","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}