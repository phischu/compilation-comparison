{"sliceID":3461635116592422947,"uses":[{"reference":{"otherSlice":7709039350979854419},"usedName":{"constructorName":{"identifier":"CompressParams"},"constructorTypeName":{"identifier":"CompressParams"}},"qualification":null},{"reference":{"otherSlice":7483143390726870398},"usedName":{"valueName":{"identifier":"fromChunks"}},"qualification":"L"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":485333622601141093},"usedName":{"valueName":{"identifier":"run"}},"qualification":"Stream"},{"reference":{"otherSlice":5251848511740026748},"usedName":{"valueName":{"identifier":"deflateInit"}},"qualification":"Stream"},{"reference":{"otherSlice":9091181793480111601},"usedName":{"valueName":{"identifier":"toChunks"}},"qualification":"L"},{"reference":{"otherSlice":8642306666063513779},"usedName":{"constructorName":{"identifier":"PS"},"constructorTypeName":{"identifier":"ByteString"}},"qualification":"S"},{"reference":{"otherSlice":3322703672414279104},"usedName":{"valueName":{"identifier":"pushInputBuffer"}},"qualification":"Stream"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"otherSlice":8642306666063513779},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"S"},{"reference":{"otherSlice":2792556818527605581},"usedName":{"typeName":{"identifier":"Stream"}},"qualification":null},{"reference":{"otherSlice":2788873788275344703},"usedName":{"valueName":{"identifier":"inputBufferEmpty"}},"qualification":"Stream"},{"reference":{"otherSlice":8890257045515737105},"usedName":{"valueName":{"identifier":"outputBufferFull"}},"qualification":"Stream"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"assert"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"||"}},"qualification":null},{"reference":{"builtinModule":"Control.Monad"},"usedName":{"valueName":{"identifier":"when"}},"qualification":null},{"reference":{"otherSlice":2778596240580165680},"usedName":{"valueName":{"identifier":"unsafeLiftIO"}},"qualification":"Stream"},{"reference":{"otherSlice":8772400319191501505},"usedName":{"valueName":{"identifier":"mallocByteString"}},"qualification":"S"},{"reference":{"otherSlice":7487703413674984992},"usedName":{"valueName":{"identifier":"pushOutputBuffer"}},"qualification":"Stream"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"not"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"null"}},"qualification":null},{"reference":{"otherSlice":301371971675441703},"usedName":{"constructorName":{"identifier":"Finish"},"constructorTypeName":{"identifier":"Flush"}},"qualification":"Stream"},{"reference":{"otherSlice":301371971675441703},"usedName":{"constructorName":{"identifier":"NoFlush"},"constructorTypeName":{"identifier":"Flush"}},"qualification":"Stream"},{"reference":{"otherSlice":7253850032232781509},"usedName":{"valueName":{"identifier":"deflate"}},"qualification":"Stream"},{"reference":{"otherSlice":3313324963614757746},"usedName":{"constructorName":{"identifier":"Ok"},"constructorTypeName":{"identifier":"Status"}},"qualification":"Stream"},{"reference":{"otherSlice":1109438053661961098},"usedName":{"valueName":{"identifier":"popOutputBuffer"}},"qualification":"Stream"},{"reference":{"otherSlice":4429892730289619114},"usedName":{"valueName":{"identifier":"unsafeInterleave"}},"qualification":"Stream"},{"reference":{"otherSlice":7657990540697301033},"usedName":{"valueName":{"identifier":"defaultCompressBufferSize"}},"qualification":null},{"reference":{"otherSlice":3313324963614757746},"usedName":{"constructorName":{"identifier":"StreamEnd"},"constructorTypeName":{"identifier":"Status"}},"qualification":"Stream"},{"reference":{"otherSlice":2397344891765167000},"usedName":{"valueName":{"identifier":"outputBufferBytesAvailable"}},"qualification":"Stream"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">"}},"qualification":null},{"reference":{"otherSlice":7309703476355789929},"usedName":{"valueName":{"identifier":"finalise"}},"qualification":"Stream"},{"reference":{"otherSlice":3313324963614757746},"usedName":{"constructorName":{"identifier":"Error"},"constructorTypeName":{"identifier":"Status"}},"qualification":"Stream"},{"reference":{"otherSlice":5456935967306518022},"usedName":{"constructorName":{"identifier":"BufferError"},"constructorTypeName":{"identifier":"ErrorCode"}},"qualification":"Stream"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fail"}},"qualification":null},{"reference":{"otherSlice":5456935967306518022},"usedName":{"constructorName":{"identifier":"NeedDict"},"constructorTypeName":{"identifier":"ErrorCode"}},"qualification":"Stream"},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":5321171871017305340},"usedName":{"valueName":{"identifier":"formatSupportsDictionary"}},"qualification":"Stream"},{"reference":{"otherSlice":1620653464289987708},"usedName":{"valueName":{"identifier":"deflateSetDictionary"}},"qualification":"Stream"},{"reference":{"otherSlice":620627319155400790},"usedName":{"typeName":{"identifier":"Format"}},"qualification":"Stream"},{"reference":{"otherSlice":7709039350979854419},"usedName":{"typeName":{"identifier":"CompressParams"}},"qualification":null},{"reference":{"otherSlice":1699226608098321587},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"L"}],"fragment":["compress ::\n         Stream.Format -> CompressParams -> L.ByteString -> L.ByteString","compress format\n  (CompressParams compLevel method bits memLevel strategy\n     initChunkSize mdict)\n  input\n  = L.fromChunks $\n      Stream.run $\n        do Stream.deflateInit format compLevel method bits memLevel\n             strategy\n           setDictionary mdict\n           case L.toChunks input of\n               [] -> fillBuffers 20 []\n               S.PS inFPtr offset length : chunks -> do Stream.pushInputBuffer\n                                                          inFPtr\n                                                          offset\n                                                          length\n                                                        r <- fillBuffers initChunkSize chunks\n                                                        return r\n  where fillBuffers :: Int -> [S.ByteString] -> Stream [S.ByteString]\n        fillBuffers outChunkSize inChunks\n          = do inputBufferEmpty <- Stream.inputBufferEmpty\n               outputBufferFull <- Stream.outputBufferFull\n               assert (inputBufferEmpty || outputBufferFull) $ return ()\n               when outputBufferFull $\n                 do outFPtr <- Stream.unsafeLiftIO (S.mallocByteString outChunkSize)\n                    Stream.pushOutputBuffer outFPtr 0 outChunkSize\n               if inputBufferEmpty then\n                 case inChunks of\n                     [] -> drainBuffers []\n                     S.PS inFPtr offset length : inChunks' -> do Stream.pushInputBuffer\n                                                                   inFPtr\n                                                                   offset\n                                                                   length\n                                                                 drainBuffers inChunks'\n                 else drainBuffers inChunks\n        \n        drainBuffers :: [S.ByteString] -> Stream [S.ByteString]\n        drainBuffers inChunks\n          = do inputBufferEmpty' <- Stream.inputBufferEmpty\n               outputBufferFull' <- Stream.outputBufferFull\n               assert\n                 (not outputBufferFull' && (null inChunks || not inputBufferEmpty'))\n                 $ return ()\n               let flush = if null inChunks then Stream.Finish else Stream.NoFlush\n               status <- Stream.deflate flush\n               case status of\n                   Stream.Ok -> do outputBufferFull <- Stream.outputBufferFull\n                                   if outputBufferFull then\n                                     do (outFPtr, offset, length) <- Stream.popOutputBuffer\n                                        outChunks <- Stream.unsafeInterleave\n                                                       (fillBuffers defaultCompressBufferSize\n                                                          inChunks)\n                                        return (S.PS outFPtr offset length : outChunks)\n                                     else do fillBuffers defaultCompressBufferSize inChunks\n                   Stream.StreamEnd -> do inputBufferEmpty <- Stream.inputBufferEmpty\n                                          assert inputBufferEmpty $ return ()\n                                          outputBufferBytesAvailable <- Stream.outputBufferBytesAvailable\n                                          if outputBufferBytesAvailable > 0 then\n                                            do (outFPtr, offset, length) <- Stream.popOutputBuffer\n                                               Stream.finalise\n                                               return [S.PS outFPtr offset length]\n                                            else\n                                            do Stream.finalise\n                                               return []\n                   Stream.Error code msg -> case code of\n                                                Stream.BufferError -> fail\n                                                                        \"BufferError should be impossible!\"\n                                                Stream.NeedDict _ -> fail \"NeedDict is impossible!\"\n                                                _ -> fail msg\n        \n        setDictionary :: Maybe S.ByteString -> Stream ()\n        setDictionary (Just dict)\n          | Stream.formatSupportsDictionary format =\n            do status <- Stream.deflateSetDictionary dict\n               case status of\n                   Stream.Ok -> return ()\n                   Stream.Error _ msg -> fail msg\n                   _ -> fail \"error when setting deflate dictionary\"\n        setDictionary _ = return ()"],"instances":[],"language":{"extensions":["ForeignFunctionInterface","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}