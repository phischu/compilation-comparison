{"sliceID":8190452208809716526,"uses":[{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":9089961804217864861},"usedName":{"valueName":{"identifier":"parseTypeMismatch"}},"qualification":null},{"reference":{"otherSlice":2747590863466909181},"usedName":{"valueName":{"identifier":"valueConName"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"String"}},"qualification":null}],"fragment":["matchFailed :: Name -> Name -> String -> MatchQ","matchFailed tName conName expected\n  = do other <- newName \"other\"\n       match (varP other)\n         (normalB $\n            parseTypeMismatch tName conName (litE $ stringL expected)\n              ([| valueConName |] `appE` varE other))\n         []"],"instances":[],"language":{"extensions":["FlexibleInstances","IncoherentInstances","NamedFieldPuns","NoImplicitPrelude","OverlappingInstances","TemplateHaskell","UndecidableInstances","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}