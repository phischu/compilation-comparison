{"sliceID":4257006674195318810,"uses":[{"reference":{"otherSlice":7896886098840743534},"usedName":{"constructorName":{"identifier":"S0"},"constructorTypeName":{"identifier":"S"}},"qualification":null},{"reference":{"otherSlice":7896886098840743534},"usedName":{"typeName":{"identifier":"S"}},"qualification":null},{"reference":{"otherSlice":8642306666063513779},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"B"},{"reference":{"otherSlice":7313190456694800977},"usedName":{"typeName":{"identifier":"DecodeResult"}},"qualification":null},{"reference":{"otherSlice":675696118971413715},"usedName":{"valueName":{"identifier":"null"}},"qualification":"B"},{"reference":{"otherSlice":7313190456694800977},"usedName":{"constructorName":{"identifier":"DecodeResultSuccess"},"constructorTypeName":{"identifier":"DecodeResult"}},"qualification":null},{"reference":{"otherSlice":600428831856449117},"usedName":{"valueName":{"identifier":"empty"}},"qualification":"T"},{"reference":{"otherSlice":7313190456694800977},"usedName":{"constructorName":{"identifier":"DecodeResultFailure"},"constructorTypeName":{"identifier":"DecodeResult"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":6424199798459820856},"usedName":{"valueName":{"identifier":"toBS"}},"qualification":null},{"reference":{"builtinModule":"GHC.ST"},"usedName":{"valueName":{"identifier":"runST"}},"qualification":null},{"reference":{"otherSlice":6258463563638113276},"usedName":{"valueName":{"identifier":"length"}},"qualification":"B"},{"reference":{"otherSlice":303218261714130477},"usedName":{"valueName":{"identifier":"new"}},"qualification":"A"},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">="}},"qualification":null},{"reference":{"otherSlice":903523192550788487},"usedName":{"valueName":{"identifier":"getText"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"Prelude"},"usedName":{"valueName":{"operator":"$!"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"otherSlice":731326558393960285},"usedName":{"valueName":{"identifier":"validate1"}},"qualification":"U16"},{"reference":{"otherSlice":1241943884701365989},"usedName":{"valueName":{"identifier":"unsafeChr"}},"qualification":null},{"reference":{"otherSlice":7924710636901839993},"usedName":{"valueName":{"identifier":"validate2"}},"qualification":"U16"},{"reference":{"otherSlice":5042014588424398546},"usedName":{"valueName":{"identifier":"chr2"}},"qualification":"U16"},{"reference":{"otherSlice":6479985746417015458},"usedName":{"valueName":{"identifier":"unsafeDrop"}},"qualification":"B"},{"reference":{"otherSlice":7896886098840743534},"usedName":{"constructorName":{"identifier":"S3"},"constructorTypeName":{"identifier":"S"}},"qualification":null},{"reference":{"otherSlice":7896886098840743534},"usedName":{"constructorName":{"identifier":"S2"},"constructorTypeName":{"identifier":"S"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":7896886098840743534},"usedName":{"constructorName":{"identifier":"S1"},"constructorTypeName":{"identifier":"S"}},"qualification":null},{"reference":{"otherSlice":7420251549451097395},"usedName":{"valueName":{"identifier":"unsafeIndex"}},"qualification":"B"},{"reference":{"otherSlice":4464944826426021000},"usedName":{"valueName":{"identifier":"unsafeWrite"}},"qualification":null},{"reference":{"otherSlice":1524283775147600600},"usedName":{"valueName":{"identifier":"append"}},"qualification":"B"},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"operator":".|."}},"qualification":null},{"reference":{"otherSlice":4463961207685254290},"usedName":{"valueName":{"identifier":"shiftL"}},"qualification":null}],"fragment":["decodeUtf16LE :: B.ByteString -> DecodeResult","decodeUtf16LE = beginChunk S0\n  where beginChunk :: S -> B.ByteString -> DecodeResult\n        beginChunk s bs\n          | B.null bs =\n            case s of\n                S0 -> DecodeResultSuccess T.empty (beginChunk S0)\n                _ -> DecodeResultFailure T.empty $ toBS s\n        beginChunk s0 ps\n          = runST $\n              do let initLen = B.length ps\n                 marr <- A.new (initLen + 1)\n                 let start !i !j\n                       | i >= len =\n                         do t <- getText j marr\n                            return $! DecodeResultSuccess t (beginChunk S0)\n                       | i + 1 < len && U16.validate1 x1 = addChar' 2 (unsafeChr x1)\n                       | i + 3 < len && U16.validate2 x1 x2 = addChar' 4 (U16.chr2 x1 x2)\n                       | i + 3 < len =\n                         do t <- getText j marr\n                            return $! DecodeResultFailure t (B.unsafeDrop i ps)\n                       | i + 2 < len = continue (S3 a b c)\n                       | i + 1 < len = continue (S2 a b)\n                       | otherwise = continue (S1 a)\n                       where a = B.unsafeIndex ps i\n                             b = B.unsafeIndex ps (i + 1)\n                             c = B.unsafeIndex ps (i + 2)\n                             d = B.unsafeIndex ps (i + 3)\n                             x1 = combine a b\n                             x2 = combine c d\n                             addChar' deltai char\n                               = do deltaj <- unsafeWrite marr j char\n                                    start (i + deltai) (j + deltaj)\n                             continue s\n                               = do t <- getText j marr\n                                    return $! DecodeResultSuccess t (beginChunk s)\n                     checkCont s !i\n                       | i >= len = return $! DecodeResultSuccess T.empty (beginChunk s)\n                     checkCont s !i\n                       = case s of\n                             S0 -> start i 0\n                             S1 a -> let x1 = combine a x in\n                                       if U16.validate1 x1 then addChar' (unsafeChr x1) else\n                                         checkCont (S2 a x) (i + 1)\n                             S2 a b -> checkCont (S3 a b x) (i + 1)\n                             S3 a b c -> let x1 = combine a b\n                                             x2 = combine c x\n                                           in\n                                           if U16.validate2 x1 x2 then addChar' (U16.chr2 x1 x2)\n                                             else\n                                             return $!\n                                               DecodeResultFailure T.empty $!\n                                                 B.append (toBS s) (B.unsafeDrop i ps)\n                       where x = B.unsafeIndex ps i\n                             addChar' c\n                               = do d <- unsafeWrite marr 0 c\n                                    start (i + 1) d\n                 checkCont s0 0\n          where len = B.length ps\n                combine w1 w2 = fromIntegral w1 .|. (fromIntegral w2 `shiftL` 8)\n        \n        {-# INLINE beginChunk #-}"],"instances":[],"language":{"extensions":["BangPatterns","ForeignFunctionInterface","GeneralizedNewtypeDeriving","MagicHash","Rank2Types","UnliftedFFITypes","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}