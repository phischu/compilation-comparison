{"sliceID":5096723802532755689,"uses":[{"reference":{"otherSlice":8941679778833995229},"usedName":{"valueName":{"identifier":"proc"}},"qualification":null},{"reference":{"otherSlice":6581712628843041540},"usedName":{"valueName":{"identifier":"std_in"}},"qualification":null},{"reference":{"otherSlice":7909368277801858718},"usedName":{"constructorName":{"identifier":"CreatePipe"},"constructorTypeName":{"identifier":"StdStream"}},"qualification":null},{"reference":{"otherSlice":6581712628843041540},"usedName":{"valueName":{"identifier":"std_out"}},"qualification":null},{"reference":{"otherSlice":6581712628843041540},"usedName":{"valueName":{"identifier":"std_err"}},"qualification":null},{"reference":{"otherSlice":7909368277801858718},"usedName":{"constructorName":{"identifier":"Inherit"},"constructorTypeName":{"identifier":"StdStream"}},"qualification":null},{"reference":{"otherSlice":7885781709357589291},"usedName":{"valueName":{"identifier":"withCreateProcess_"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Handle.Text"},"usedName":{"valueName":{"identifier":"hGetContents"}},"qualification":null},{"reference":{"otherSlice":1866191942954187702},"usedName":{"valueName":{"identifier":"withForkWait"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO"},"usedName":{"valueName":{"identifier":"evaluate"}},"qualification":"C"},{"reference":{"otherSlice":8105272173915438360},"usedName":{"valueName":{"identifier":"rnf"}},"qualification":null},{"reference":{"builtinModule":"Control.Monad"},"usedName":{"valueName":{"identifier":"unless"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"null"}},"qualification":null},{"reference":{"otherSlice":2329364531785008624},"usedName":{"valueName":{"identifier":"ignoreSigPipe"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Handle.Text"},"usedName":{"valueName":{"identifier":"hPutStr"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Handle"},"usedName":{"valueName":{"identifier":"hClose"}},"qualification":null},{"reference":{"otherSlice":8891696559039043959},"usedName":{"valueName":{"identifier":"waitForProcess"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Exception"},"usedName":{"constructorName":{"identifier":"ExitSuccess"},"constructorTypeName":{"identifier":"ExitCode"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Exception"},"usedName":{"constructorName":{"identifier":"ExitFailure"},"constructorTypeName":{"identifier":"ExitCode"}},"qualification":null},{"reference":{"otherSlice":6927273448422418469},"usedName":{"valueName":{"identifier":"processFailedException"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO"},"usedName":{"typeName":{"identifier":"FilePath"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"String"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null}],"fragment":["readProcess :: FilePath -> [String] -> String -> IO String","readProcess cmd args input\n  = do let cp_opts\n             = (proc cmd args){std_in = CreatePipe, std_out = CreatePipe,\n                               std_err = Inherit}\n       (ex, output) <- withCreateProcess_ \"readProcess\" cp_opts $\n                         \\ (Just inh) (Just outh) _ ph ->\n                           do output <- hGetContents outh\n                              withForkWait (C.evaluate $ rnf output) $\n                                \\ waitOut ->\n                                  do unless (null input) $ ignoreSigPipe $ hPutStr inh input\n                                     ignoreSigPipe $ hClose inh\n                                     waitOut\n                                     hClose outh\n                              ex <- waitForProcess ph\n                              return (ex, output)\n       case ex of\n           ExitSuccess -> return output\n           ExitFailure r -> processFailedException \"readProcess\" cmd args r"],"instances":[],"language":{"extensions":["ForeignFunctionInterface","InterruptibleFFI","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}