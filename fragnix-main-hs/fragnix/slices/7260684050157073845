{"sliceID":7260684050157073845,"uses":[{"reference":{"otherSlice":6766449275992946084},"usedName":{"constructorName":{"identifier":"Builder"},"constructorTypeName":{"identifier":"Builder"}},"qualification":null},{"reference":{"otherSlice":2931540031717686030},"usedName":{"valueName":{"identifier":"buildStep"}},"qualification":null},{"reference":{"otherSlice":2921932848836490295},"usedName":{"constructorName":{"identifier":"BufRange"},"constructorTypeName":{"identifier":"BufRange"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":3030113937244366044},"usedName":{"constructorName":{"identifier":"Done"},"constructorTypeName":{"identifier":"BuildSignal"}},"qualification":null},{"reference":{"otherSlice":8772400319191501505},"usedName":{"valueName":{"identifier":"mallocByteString"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":">>="}},"qualification":null},{"reference":{"builtinModule":"GHC.ForeignPtr"},"usedName":{"valueName":{"identifier":"unsafeForeignPtrToPtr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Ptr"},"usedName":{"valueName":{"identifier":"plusPtr"}},"qualification":null},{"reference":{"otherSlice":3030113937244366044},"usedName":{"valueName":{"identifier":"runBuildStep"}},"qualification":null},{"reference":{"otherSlice":8642306666063513779},"usedName":{"constructorName":{"identifier":"PS"},"constructorTypeName":{"identifier":"ByteString"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Ptr"},"usedName":{"valueName":{"identifier":"minusPtr"}},"qualification":null},{"reference":{"otherSlice":3030113937244366044},"usedName":{"constructorName":{"identifier":"BufferFull"},"constructorTypeName":{"identifier":"BuildSignal"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"max"}},"qualification":null},{"reference":{"otherSlice":3030113937244366044},"usedName":{"constructorName":{"identifier":"InsertByteString"},"constructorTypeName":{"identifier":"BuildSignal"}},"qualification":null},{"reference":{"builtinModule":"Control.Monad"},"usedName":{"valueName":{"identifier":"unless"}},"qualification":null},{"reference":{"otherSlice":675696118971413715},"usedName":{"valueName":{"identifier":"null"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"otherSlice":8642306666063513779},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"otherSlice":6766449275992946084},"usedName":{"typeName":{"identifier":"Builder"}},"qualification":null}],"fragment":["toByteStringIOWith ::\n                   Int -> (S.ByteString -> IO ()) -> Builder -> IO ()","toByteStringIOWith bufSize io (Builder b)\n  = fillBuffer bufSize (b (buildStep finalStep))\n  where finalStep !(BufRange pf _) = return $ Done pf ()\n        fillBuffer !size step = do S.mallocByteString size >>= fill\n          where fill fpbuf\n                  = do let !pf = unsafeForeignPtrToPtr fpbuf\n                           !br = BufRange pf (pf `plusPtr` size)\n                       signal <- runBuildStep step br\n                       case signal of\n                           Done pf' _ -> io $ S.PS fpbuf 0 (pf' `minusPtr` pf)\n                           BufferFull minSize pf' nextStep -> do io $\n                                                                   S.PS fpbuf 0 (pf' `minusPtr` pf)\n                                                                 fillBuffer (max bufSize minSize)\n                                                                   nextStep\n                           InsertByteString pf' bs nextStep -> do io $\n                                                                    S.PS fpbuf 0 (pf' `minusPtr` pf)\n                                                                  unless (S.null bs) (io bs)\n                                                                  fillBuffer bufSize nextStep"],"instances":[],"language":{"extensions":["BangPatterns","Rank2Types","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}