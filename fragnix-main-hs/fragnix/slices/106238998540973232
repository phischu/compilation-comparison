{"sliceID":106238998540973232,"uses":[{"reference":{"otherSlice":6535424651083342638},"usedName":{"valueName":{"identifier":"try"}},"qualification":null},{"reference":{"otherSlice":4854177333399142547},"usedName":{"valueName":{"identifier":"colon2"}},"qualification":null},{"reference":{"otherSlice":9062483993974089203},"usedName":{"valueName":{"identifier":"ip4'"}},"qualification":null},{"reference":{"otherSlice":3526635480556362389},"usedName":{"valueName":{"identifier":"format"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"++"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"<|>"}},"qualification":null},{"reference":{"otherSlice":3352616075720513123},"usedName":{"valueName":{"identifier":"manyTill"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":4163593542275447107},"usedName":{"valueName":{"identifier":"hex"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"<*"}},"qualification":null},{"reference":{"otherSlice":337728610457394106},"usedName":{"valueName":{"identifier":"char"}},"qualification":null},{"reference":{"otherSlice":7473196175753701409},"usedName":{"valueName":{"identifier":"option"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"many"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"identifier":"shiftL"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"operator":".|."}},"qualification":null},{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"error"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"when"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"length"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"/="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fail"}},"qualification":null},{"reference":{"otherSlice":5477240051222851316},"usedName":{"typeName":{"identifier":"Parser"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null}],"fragment":["ip4Embedded :: Parser [Int]","ip4Embedded\n  = try\n      (do colon2\n          bs <- beforeEmbedded\n          embedded <- ip4'\n          format [] (bs ++ ip4ToIp6 embedded))\n      <|>\n      try\n        (do bs1 <- manyTill (try $ hex <* char ':') (char ':')\n            bs2 <- option [] beforeEmbedded\n            embedded <- ip4'\n            format bs1 (bs2 ++ ip4ToIp6 embedded))\n      <|>\n      try\n        (do bs <- beforeEmbedded\n            embedded <- ip4'\n            let rs = bs ++ ip4ToIp6 embedded\n            check rs\n            return rs)\n  where beforeEmbedded = many $ try $ hex <* char ':'\n        ip4ToIp6 [a, b, c, d] = [a `shiftL` 8 .|. b, c `shiftL` 8 .|. d]\n        ip4ToIp6 _ = error \"ip4ToIp6\"\n        check bs = when (length bs /= 8) (fail \"IPv6 address4\")"],"instances":[],"language":{"extensions":["DeriveDataTypeable","DeriveGeneric","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}