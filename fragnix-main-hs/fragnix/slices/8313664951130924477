{"sliceID":8313664951130924477,"uses":[{"reference":{"otherSlice":6530490125521528221},"usedName":{"valueName":{"identifier":"ioeAddLocation"}},"qualification":null},{"reference":{"builtinModule":"System.IO.Error"},"usedName":{"valueName":{"identifier":"modifyIOError"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO"},"usedName":{"valueName":{"identifier":"mask"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"System.IO"},"usedName":{"valueName":{"identifier":"openBinaryTempFile"}},"qualification":null},{"reference":{"otherSlice":4080797775409226095},"usedName":{"valueName":{"identifier":"takeDirectory"}},"qualification":null},{"reference":{"builtinModule":"Control.Exception.Base"},"usedName":{"valueName":{"identifier":"onException"}},"qualification":null},{"reference":{"otherSlice":5378054037772215921},"usedName":{"valueName":{"identifier":"ignoreIOExceptions"}},"qualification":null},{"reference":{"otherSlice":1517911374496032575},"usedName":{"valueName":{"identifier":"removeFile"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Handle"},"usedName":{"valueName":{"identifier":"hClose"}},"qualification":null},{"reference":{"otherSlice":7532991501965412013},"usedName":{"valueName":{"identifier":"renameFile"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO"},"usedName":{"typeName":{"identifier":"FilePath"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Handle.Types"},"usedName":{"typeName":{"identifier":"Handle"}},"qualification":null}],"fragment":["withReplacementFile ::\n                    FilePath -> (FilePath -> IO ()) -> (Handle -> IO a) -> IO a","withReplacementFile path postAction action\n  = (`ioeAddLocation` \"withReplacementFile\") `modifyIOError`\n      do mask $\n           \\ restore ->\n             do (tmpFPath, hTmp) <- openBinaryTempFile (takeDirectory path)\n                                      \".copyFile.tmp\"\n                (`onException` ignoreIOExceptions (removeFile tmpFPath)) $\n                  do r <- (`onException` ignoreIOExceptions (hClose hTmp)) $\n                            do restore (action hTmp)\n                     hClose hTmp\n                     restore (postAction tmpFPath)\n                     renameFile tmpFPath path\n                     return r"],"instances":[],"language":{"extensions":["MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}