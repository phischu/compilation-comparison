{"sliceID":2577433432829265621,"uses":[{"reference":{"otherSlice":7461933834933544103},"usedName":{"valueName":{"identifier":"mapErrorT"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"Prelude"},"usedName":{"valueName":{"operator":"$!"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fmap"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Monad"}},"qualification":null},{"reference":{"otherSlice":1090343104806115234},"usedName":{"typeName":{"identifier":"Listen"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"typeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":1776344282554687497},"usedName":{"typeName":{"identifier":"ErrorT"}},"qualification":null}],"fragment":["liftListen ::\n             (Monad m) => Listen w m (Either e a) -> Listen w (ErrorT e m) a","liftListen listen\n  = mapErrorT $\n      \\ m ->\n        do (a, w) <- listen m\n           return $! fmap (\\ r -> (r, w)) a"],"instances":[],"language":{"extensions":["MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}