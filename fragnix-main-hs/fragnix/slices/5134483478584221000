{"sliceID":5134483478584221000,"uses":[{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"MonadPlus"}},"qualification":null},{"reference":{"otherSlice":319411685717018955},"usedName":{"typeName":{"identifier":"Routable"}},"qualification":null},{"reference":{"otherSlice":3307673299203228936},"usedName":{"typeName":{"identifier":"AddrRange"}},"qualification":null},{"reference":{"otherSlice":1924550579942252478},"usedName":{"typeName":{"identifier":"IPRTable"}},"qualification":null},{"reference":{"otherSlice":1924550579942252478},"usedName":{"constructorName":{"identifier":"Nil"},"constructorTypeName":{"identifier":"IPRTable"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"mzero"}},"qualification":null},{"reference":{"otherSlice":1924550579942252478},"usedName":{"constructorName":{"identifier":"Node"},"constructorTypeName":{"identifier":"IPRTable"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":7367103460460384252},"usedName":{"valueName":{"operator":">:>"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"mplus"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null}],"fragment":["findMatch ::\n            MonadPlus m =>\n              Routable k => AddrRange k -> IPRTable k a -> m (AddrRange k, a)","findMatch _ Nil = mzero\nfindMatch k1 (Node k2 _ Nothing l r)\n  | k1 >:> k2 = findMatch k1 l `mplus` findMatch k1 r\n  | k2 >:> k1 = findMatch k1 l `mplus` findMatch k1 r\n  | otherwise = mzero\nfindMatch k1 (Node k2 _ (Just vl) l r)\n  | k1 >:> k2 =\n    return (k2, vl) `mplus` findMatch k1 l `mplus` findMatch k1 r\n  | k2 >:> k1 = findMatch k1 l `mplus` findMatch k1 r\n  | otherwise = mzero"],"instances":[],"language":{"extensions":["MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}