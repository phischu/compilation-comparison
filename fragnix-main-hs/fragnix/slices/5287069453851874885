{"sliceID":5287069453851874885,"uses":[{"reference":{"otherSlice":8672789154543806589},"usedName":{"valueName":{"identifier":"std_in"}},"qualification":null},{"reference":{"otherSlice":4442390108599214996},"usedName":{"constructorName":{"identifier":"CreatePipe"},"constructorTypeName":{"identifier":"StdStream"}},"qualification":null},{"reference":{"otherSlice":8672789154543806589},"usedName":{"valueName":{"identifier":"std_out"}},"qualification":null},{"reference":{"otherSlice":6265620885121409195},"usedName":{"valueName":{"identifier":"withCreateProcess_"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Handle.Text"},"usedName":{"valueName":{"identifier":"hGetContents"}},"qualification":null},{"reference":{"otherSlice":871855967637030908},"usedName":{"valueName":{"identifier":"withForkWait"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO"},"usedName":{"valueName":{"identifier":"evaluate"}},"qualification":"C"},{"reference":{"otherSlice":6903489254356873001},"usedName":{"valueName":{"identifier":"rnf"}},"qualification":null},{"reference":{"builtinModule":"Control.Monad"},"usedName":{"valueName":{"identifier":"unless"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"null"}},"qualification":null},{"reference":{"otherSlice":7664629126941878077},"usedName":{"valueName":{"identifier":"ignoreSigPipe"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Handle.Text"},"usedName":{"valueName":{"identifier":"hPutStr"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Handle"},"usedName":{"valueName":{"identifier":"hClose"}},"qualification":null},{"reference":{"otherSlice":7835758549541460382},"usedName":{"valueName":{"identifier":"waitForProcess"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Exception"},"usedName":{"constructorName":{"identifier":"ExitSuccess"},"constructorTypeName":{"identifier":"ExitCode"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Exception"},"usedName":{"constructorName":{"identifier":"ExitFailure"},"constructorTypeName":{"identifier":"ExitCode"}},"qualification":null},{"reference":{"otherSlice":9151062451953277557},"usedName":{"valueName":{"identifier":"processFailedException"}},"qualification":null},{"reference":{"otherSlice":8672789154543806589},"usedName":{"constructorName":{"identifier":"CreateProcess"},"constructorTypeName":{"identifier":"CreateProcess"}},"qualification":null},{"reference":{"otherSlice":8672789154543806589},"usedName":{"valueName":{"identifier":"cmdspec"}},"qualification":null},{"reference":{"otherSlice":3918298467284229735},"usedName":{"constructorName":{"identifier":"ShellCommand"},"constructorTypeName":{"identifier":"CmdSpec"}},"qualification":null},{"reference":{"otherSlice":3918298467284229735},"usedName":{"constructorName":{"identifier":"RawCommand"},"constructorTypeName":{"identifier":"CmdSpec"}},"qualification":null},{"reference":{"otherSlice":8672789154543806589},"usedName":{"typeName":{"identifier":"CreateProcess"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"String"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null}],"fragment":["readCreateProcess :: CreateProcess -> String -> IO String","readCreateProcess cp input\n  = do let cp_opts = cp{std_in = CreatePipe, std_out = CreatePipe}\n       (ex, output) <- withCreateProcess_ \"readCreateProcess\" cp_opts $\n                         \\ (Just inh) (Just outh) _ ph ->\n                           do output <- hGetContents outh\n                              withForkWait (C.evaluate $ rnf output) $\n                                \\ waitOut ->\n                                  do unless (null input) $ ignoreSigPipe $ hPutStr inh input\n                                     ignoreSigPipe $ hClose inh\n                                     waitOut\n                                     hClose outh\n                              ex <- waitForProcess ph\n                              return (ex, output)\n       case ex of\n           ExitSuccess -> return output\n           ExitFailure r -> processFailedException \"readCreateProcess\" cmd\n                              args\n                              r\n  where cmd\n          = case cp of\n                CreateProcess{cmdspec = ShellCommand sc} -> sc\n                CreateProcess{cmdspec = RawCommand fp _} -> fp\n        args\n          = case cp of\n                CreateProcess{cmdspec = ShellCommand _} -> []\n                CreateProcess{cmdspec = RawCommand _ args'} -> args'"],"instances":[],"language":{"extensions":["ForeignFunctionInterface","InterruptibleFFI","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}