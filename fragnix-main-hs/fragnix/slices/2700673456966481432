{"sliceID":2700673456966481432,"uses":[{"reference":{"builtinModule":"GHC.Prim"},"usedName":{"valueName":{"identifier":"seq"}},"qualification":null},{"reference":{"otherSlice":5238870259857177711},"usedName":{"valueName":{"identifier":"unfoldr"}},"qualification":"Stream"},{"reference":{"otherSlice":1944804871504719928},"usedName":{"valueName":{"identifier":"sized"}},"qualification":"Stream"},{"reference":{"otherSlice":3501924119519436030},"usedName":{"constructorName":{"identifier":"Exact"},"constructorTypeName":{"identifier":"Size"}},"qualification":null},{"reference":{"otherSlice":7763721027765810954},"usedName":{"valueName":{"identifier":"length"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">="}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":8934491602005769172},"usedName":{"valueName":{"identifier":"basicUnsafeIndexM"}},"qualification":null},{"reference":{"otherSlice":891349225261059366},"usedName":{"constructorName":{"identifier":"Box"},"constructorTypeName":{"identifier":"Box"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":8934491602005769172},"usedName":{"typeName":{"identifier":"Vector"}},"qualification":null},{"reference":{"otherSlice":963393349676107981},"usedName":{"typeName":{"identifier":"Stream"}},"qualification":null}],"fragment":["stream :: Vector v a => v a -> Stream a","stream v\n  = v `seq` n `seq` (Stream.unfoldr get 0 `Stream.sized` Exact n)\n  where n = length v\n        \n        {-# INLINE get #-}\n        get i\n          | i >= n = Nothing\n          | otherwise =\n            case basicUnsafeIndexM v i of\n                Box x -> Just (x, i + 1)"],"instances":[],"language":{"extensions":["DeriveDataTypeable","Rank2Types","MultiParamTypeClasses","FlexibleContexts","TypeFamilies","ScopedTypeVariables","BangPatterns","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}