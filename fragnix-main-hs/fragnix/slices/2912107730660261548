{"sliceID":2912107730660261548,"uses":[{"reference":{"otherSlice":1673753023314990609},"usedName":{"constructorName":{"identifier":"Node3"},"constructorTypeName":{"identifier":"Node"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"otherSlice":6693068585238707304},"usedName":{"constructorName":{"identifier":"Full"},"constructorTypeName":{"identifier":"Del"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"otherSlice":6693068585238707304},"usedName":{"constructorName":{"identifier":"Defect"},"constructorTypeName":{"identifier":"Del"}},"qualification":null},{"reference":{"otherSlice":2658389187921074114},"usedName":{"valueName":{"identifier":"size"}},"qualification":null},{"reference":{"otherSlice":1673753023314990609},"usedName":{"constructorName":{"identifier":"Node2"},"constructorTypeName":{"identifier":"Node"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":2658389187921074114},"usedName":{"typeName":{"identifier":"Sized"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"otherSlice":1673753023314990609},"usedName":{"typeName":{"identifier":"Node"}},"qualification":null},{"reference":{"otherSlice":6693068585238707304},"usedName":{"typeName":{"identifier":"Del"}},"qualification":null}],"fragment":["delNode ::\n          Sized a =>\n          (Int -> Node a -> Del a) -> Int -> Node (Node a) -> Del (Node a)","delNode f i (Node3 s a b c)\n  | i < sa =\n    case f i a of\n        Full a' -> Full $ Node3 (s - 1) a' b c\n        Defect e -> let !se = size e in\n                      case b of\n                          Node3 sxyz x y z -> Full $\n                                                Node3 (s - 1) (Node2 (se + sx) e x)\n                                                  (Node2 (sxyz - sx) y z)\n                                                  c\n                            where !sx = size x\n                          Node2 sxy x y -> Full $ Node2 (s - 1) (Node3 (sxy + se) e x y) c\n  | i < sab =\n    case f (i - sa) b of\n        Full b' -> Full $ Node3 (s - 1) a b' c\n        Defect e -> let !se = size e in\n                      case a of\n                          Node3 sxyz x y z -> Full $\n                                                Node3 (s - 1) (Node2 (sxyz - sz) x y)\n                                                  (Node2 (sz + se) z e)\n                                                  c\n                            where !sz = size z\n                          Node2 sxy x y -> Full $ Node2 (s - 1) (Node3 (sxy + se) x y e) c\n  | otherwise =\n    case f (i - sab) c of\n        Full c' -> Full $ Node3 (s - 1) a b c'\n        Defect e -> let !se = size e in\n                      case b of\n                          Node3 sxyz x y z -> Full $\n                                                Node3 (s - 1) a (Node2 (sxyz - sz) x y)\n                                                  (Node2 (sz + se) z e)\n                            where !sz = size z\n                          Node2 sxy x y -> Full $ Node2 (s - 1) a (Node3 (sxy + se) x y e)\n  where sa = size a\n        sab = sa + size b\ndelNode f i (Node2 s a b)\n  | i < sa =\n    case f i a of\n        Full a' -> Full $ Node2 (s - 1) a' b\n        Defect e -> let !se = size e in\n                      case b of\n                          Node3 sxyz x y z -> Full $\n                                                Node2 (s - 1) (Node2 (se + sx) e x)\n                                                  (Node2 (sxyz - sx) y z)\n                            where !sx = size x\n                          Node2 _ x y -> Defect $ Node3 (s - 1) e x y\n  | otherwise =\n    case f (i - sa) b of\n        Full b' -> Full $ Node2 (s - 1) a b'\n        Defect e -> let !se = size e in\n                      case a of\n                          Node3 sxyz x y z -> Full $\n                                                Node2 (s - 1) (Node2 (sxyz - sz) x y)\n                                                  (Node2 (sz + se) z e)\n                            where !sz = size z\n                          Node2 _ x y -> Defect $ Node3 (s - 1) x y e\n  where sa = size a"],"instances":[],"language":{"extensions":["BangPatterns","DeriveDataTypeable","StandaloneDeriving","FlexibleInstances","ScopedTypeVariables","DeriveGeneric","TypeFamilies","PatternSynonyms","ViewPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}