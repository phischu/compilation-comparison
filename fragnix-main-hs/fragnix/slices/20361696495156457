{"sliceID":20361696495156457,"uses":[{"reference":{"otherSlice":2497553050502348575},"usedName":{"constructorName":{"identifier":"Deep"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"otherSlice":6073454630168832022},"usedName":{"constructorName":{"identifier":"Two"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"otherSlice":6073454630168832022},"usedName":{"constructorName":{"identifier":"Three"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"otherSlice":6350482485085305885},"usedName":{"valueName":{"identifier":"thin"}},"qualification":null},{"reference":{"otherSlice":6073454630168832022},"usedName":{"constructorName":{"identifier":"Four"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":2868168202132088990},"usedName":{"valueName":{"identifier":"node2"}},"qualification":null},{"reference":{"otherSlice":6823472599252253901},"usedName":{"valueName":{"identifier":"consTree"}},"qualification":null},{"reference":{"otherSlice":9166462973229140219},"usedName":{"valueName":{"identifier":"snocTree"}},"qualification":null},{"reference":{"otherSlice":6073454630168832022},"usedName":{"constructorName":{"identifier":"One"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"otherSlice":2497553050502348575},"usedName":{"constructorName":{"identifier":"Empty"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"otherSlice":7823183531276495350},"usedName":{"valueName":{"identifier":"viewLTree"}},"qualification":null},{"reference":{"otherSlice":1455843312851584907},"usedName":{"constructorName":{"identifier":"Just2"},"constructorTypeName":{"identifier":"Maybe2"}},"qualification":null},{"reference":{"otherSlice":4603056598885952374},"usedName":{"constructorName":{"identifier":"Node2"},"constructorTypeName":{"identifier":"Node"}},"qualification":null},{"reference":{"otherSlice":4603056598885952374},"usedName":{"constructorName":{"identifier":"Node3"},"constructorTypeName":{"identifier":"Node"}},"qualification":null},{"reference":{"otherSlice":1455843312851584907},"usedName":{"constructorName":{"identifier":"Nothing2"},"constructorTypeName":{"identifier":"Maybe2"}},"qualification":null},{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"error"}},"qualification":null},{"reference":{"otherSlice":6224433810839268361},"usedName":{"valueName":{"identifier":"viewRTree"}},"qualification":null},{"reference":{"otherSlice":2497553050502348575},"usedName":{"constructorName":{"identifier":"Single"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"otherSlice":3097725820661431075},"usedName":{"typeName":{"identifier":"Sized"}},"qualification":null},{"reference":{"otherSlice":2497553050502348575},"usedName":{"typeName":{"identifier":"FingerTree"}},"qualification":null}],"fragment":["rigidify :: Sized a => FingerTree a -> FingerTree a","rigidify (Deep s pr@Two{} m sf@Three{}) = Deep s pr (thin m) sf\nrigidify (Deep s pr@Three{} m sf@Three{}) = Deep s pr (thin m) sf\nrigidify (Deep s pr@Two{} m sf@Two{}) = Deep s pr (thin m) sf\nrigidify (Deep s pr@Three{} m sf@Two{}) = Deep s pr (thin m) sf\nrigidify (Deep s (Four a b c d) m sf)\n  = rigidify $ Deep s (Two a b) (node2 c d `consTree` m) sf\nrigidify (Deep s pr m (Four a b c d))\n  = rigidify $ Deep s pr (m `snocTree` node2 a b) (Two c d)\nrigidify (Deep s (One a) Empty (Three b c d))\n  = Deep s (Two a b) Empty (Two c d)\nrigidify (Deep s (One a) m sf)\n  = rigidify $\n      case viewLTree m of\n          Just2 (Node2 _ b c) m' -> Deep s (Three a b c) m' sf\n          Just2 (Node3 _ b c d) m' -> Deep s (Two a b)\n                                        (node2 c d `consTree` m')\n                                        sf\n          Nothing2 -> error \"rigidify: small tree\"\nrigidify (Deep s (Three a b c) Empty (One d))\n  = Deep s (Two a b) Empty (Two c d)\nrigidify (Deep s pr m (One e))\n  = rigidify $\n      case viewRTree m of\n          Just2 m' (Node2 _ a b) -> Deep s pr m' (Three a b e)\n          Just2 m' (Node3 _ a b c) -> Deep s pr (m' `snocTree` node2 a b)\n                                        (Two c e)\n          Nothing2 -> error \"rigidify: small tree\"\nrigidify Empty = error \"rigidify: empty tree\"\nrigidify Single{} = error \"rigidify: singleton\""],"instances":[],"language":{"extensions":["DeriveDataTypeable","StandaloneDeriving","TypeFamilies","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}