{"sliceID":653854388325290750,"uses":[{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<="}},"qualification":null},{"reference":{"builtinModule":"Foreign.C.Types"},"usedName":{"typeName":{"identifier":"CTime"}},"qualification":null},{"reference":{"builtinModule":"GHC.Int"},"usedName":{"typeName":{"identifier":"Int32"}},"qualification":null}],"fragment":["adjust :: CTime -> Int32 -> (CTime, Int32)","adjust sec usec\n  | sec >= 0 = ajp\n  | otherwise = ajm\n  where micro = 1000000\n        mmicro = -micro\n        ajp\n          | usec >= micro = (sec + 1, usec - micro)\n          | usec >= 0 = (sec, usec)\n          | otherwise = (sec - 1, usec + micro)\n        ajm\n          | usec <= mmicro = (sec - 1, usec + micro)\n          | usec <= 0 = (sec, usec)\n          | otherwise = (sec + 1, usec - micro)"],"instances":[],"language":{"extensions":["MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}