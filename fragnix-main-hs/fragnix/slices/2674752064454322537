{"sliceID":2674752064454322537,"uses":[{"reference":{"otherSlice":456988961920531281},"usedName":{"typeName":{"identifier":"MArray"}},"qualification":null},{"reference":{"builtinModule":"GHC.Arr"},"usedName":{"typeName":{"identifier":"STArray"}},"qualification":null},{"reference":{"builtinModule":"Control.Monad.ST.Lazy"},"usedName":{"typeName":{"identifier":"ST"}},"qualification":"Lazy"},{"reference":{"otherSlice":456988961920531281},"usedName":{"valueName":{"identifier":"getBounds"}},"qualification":null},{"reference":{"builtinModule":"Control.Monad.ST.Lazy"},"usedName":{"valueName":{"identifier":"strictToLazyST"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"Prelude"},"usedName":{"valueName":{"operator":"$!"}},"qualification":null},{"reference":{"builtinModule":"GHC.Arr"},"usedName":{"valueName":{"identifier":"boundsSTArray"}},"qualification":"ArrST"},{"reference":{"otherSlice":456988961920531281},"usedName":{"valueName":{"identifier":"getNumElements"}},"qualification":null},{"reference":{"builtinModule":"GHC.Arr"},"usedName":{"valueName":{"identifier":"numElementsSTArray"}},"qualification":"ArrST"},{"reference":{"otherSlice":456988961920531281},"usedName":{"valueName":{"identifier":"newArray"}},"qualification":null},{"reference":{"builtinModule":"GHC.Arr"},"usedName":{"valueName":{"identifier":"newSTArray"}},"qualification":"ArrST"},{"reference":{"otherSlice":456988961920531281},"usedName":{"valueName":{"identifier":"unsafeRead"}},"qualification":null},{"reference":{"builtinModule":"GHC.Arr"},"usedName":{"valueName":{"identifier":"unsafeReadSTArray"}},"qualification":"ArrST"},{"reference":{"otherSlice":456988961920531281},"usedName":{"valueName":{"identifier":"unsafeWrite"}},"qualification":null},{"reference":{"builtinModule":"GHC.Arr"},"usedName":{"valueName":{"identifier":"unsafeWriteSTArray"}},"qualification":"ArrST"}],"fragment":["instance MArray (STArray s) e (Lazy.ST s) where\n        {-# INLINE getBounds #-}\n        getBounds arr = strictToLazyST (return $! ArrST.boundsSTArray arr)\n        \n        {-# INLINE getNumElements #-}\n        getNumElements arr\n          = strictToLazyST (return $! ArrST.numElementsSTArray arr)\n        \n        {-# INLINE newArray #-}\n        newArray (l, u) e = strictToLazyST (ArrST.newSTArray (l, u) e)\n        \n        {-# INLINE unsafeRead #-}\n        unsafeRead arr i = strictToLazyST (ArrST.unsafeReadSTArray arr i)\n        \n        {-# INLINE unsafeWrite #-}\n        unsafeWrite arr i e\n          = strictToLazyST (ArrST.unsafeWriteSTArray arr i e)"],"instances":[],"language":{"extensions":["BangPatterns","RankNTypes","MagicHash","UnboxedTuples","MultiParamTypeClasses","FlexibleInstances","FlexibleContexts","DeriveDataTypeable","UnliftedFFITypes","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":true}}