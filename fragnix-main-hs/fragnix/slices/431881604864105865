{"sliceID":431881604864105865,"uses":[{"reference":{"otherSlice":3770287935488921004},"usedName":{"constructorName":{"identifier":"SResponse"},"constructorTypeName":{"identifier":"SResponse"}},"qualification":null},{"reference":{"otherSlice":3770287935488921004},"usedName":{"valueName":{"identifier":"simpleHeaders"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"lookup"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":6609792007434602814},"usedName":{"valueName":{"identifier":"assertString"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"concat"}},"qualification":null},{"reference":{"builtinModule":"GHC.Show"},"usedName":{"valueName":{"identifier":"show"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":6602700848724138777},"usedName":{"valueName":{"identifier":"assertBool"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":4197627946474533855},"usedName":{"valueName":{"identifier":"takeWhile"}},"qualification":"S8"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"/="}},"qualification":null},{"reference":{"otherSlice":8642306666063513779},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":null},{"reference":{"otherSlice":3770287935488921004},"usedName":{"typeName":{"identifier":"SResponse"}},"qualification":null},{"reference":{"otherSlice":1857161883750851484},"usedName":{"typeName":{"identifier":"Session"}},"qualification":null}],"fragment":["assertContentType :: ByteString -> SResponse -> Session ()","assertContentType ct SResponse{simpleHeaders = h}\n  = case lookup \"content-type\" h of\n        Nothing -> assertString $\n                     concat\n                       [\"Expected content type \", show ct,\n                        \", but no content type provided\"]\n        Just ct' -> assertBool\n                      (concat\n                         [\"Expected content type \", show ct, \", but received \", show ct'])\n                      (go ct == go ct')\n  where go = S8.takeWhile (/= ';')"],"instances":[],"language":{"extensions":["OverloadedStrings","DeriveDataTypeable","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}