{"sliceID":3439640504908467378,"uses":[{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Alternative"}},"qualification":null},{"reference":{"otherSlice":6497888655579684852},"usedName":{"typeName":{"identifier":"SmallArray"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"empty"}},"qualification":null},{"reference":{"otherSlice":6641233821998133120},"usedName":{"valueName":{"identifier":"emptySmallArray"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"<|>"}},"qualification":null},{"reference":{"otherSlice":7806011641631011927},"usedName":{"valueName":{"identifier":"createSmallArray"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"length"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":2833989017205590612},"usedName":{"valueName":{"identifier":"die"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":2018079638780074869},"usedName":{"valueName":{"identifier":"copySmallArray"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"*>"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"many"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"null"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"pure"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"some"}},"qualification":null}],"fragment":["instance Alternative SmallArray where\n        empty = emptySmallArray\n        sl <|> sr\n          = createSmallArray (length sl + length sr) (die \"<|>\" \"impossible\")\n              $\n              \\ sma ->\n                copySmallArray sma 0 sl 0 (length sl) *>\n                  copySmallArray sma (length sl) sr 0 (length sr)\n        many sa\n          | null sa = pure []\n          | otherwise = die \"many\" \"infinite arrays are not well defined\"\n        some sa\n          | null sa = emptySmallArray\n          | otherwise = die \"some\" \"infinite arrays are not well defined\""],"instances":[],"language":{"extensions":["MagicHash","RankNTypes","TypeFamilies","UnboxedTuples","DeriveTraversable","DeriveDataTypeable","GeneralizedNewtypeDeriving","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":true}}