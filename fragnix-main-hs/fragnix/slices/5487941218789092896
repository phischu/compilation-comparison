{"sliceID":5487941218789092896,"uses":[{"reference":{"otherSlice":8642306666063513779},"usedName":{"constructorName":{"identifier":"PS"},"constructorTypeName":{"identifier":"ByteString"}},"qualification":null},{"reference":{"builtinModule":"GHC.Word"},"usedName":{"constructorName":{"identifier":"W8#"},"constructorTypeName":{"identifier":"Word8"}},"qualification":null},{"reference":{"builtinModule":"GHC.Prim"},"usedName":{"valueName":{"identifier":"seq"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"False"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"undefined"}},"qualification":null},{"reference":{"otherSlice":8145273345818258303},"usedName":{"valueName":{"identifier":"withPtr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Prim"},"usedName":{"typeName":{"identifier":"Word#"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.Ptr"},"usedName":{"typeName":{"identifier":"Ptr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Word"},"usedName":{"typeName":{"identifier":"Word8"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"builtinModule":"GHC.ForeignPtr"},"usedName":{"typeName":{"identifier":"ForeignPtr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"otherSlice":8642306666063513779},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"Foreign.Storable"},"usedName":{"valueName":{"identifier":"peekElemOff"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null}],"fragment":["splitWith :: (Word8 -> Bool) -> ByteString -> [ByteString]","splitWith _pred (PS _ _ 0) = []\nsplitWith pred_ (PS fp off len) = splitWith0 pred# off len fp\n  where pred# c# = pred_ (W8# c#)\n        splitWith0 a b c d\n          | a `seq` b `seq` c `seq` d `seq` False = undefined\n        splitWith0 pred' off' len' fp'\n          = withPtr fp $ \\ p -> splitLoop pred' p 0 off' len' fp'\n        \n        splitLoop ::\n                  (Word# -> Bool) ->\n                    Ptr Word8 ->\n                      Int -> Int -> Int -> ForeignPtr Word8 -> IO [ByteString]\n        splitLoop pred' p idx' off' len' fp'\n          | idx' >= len' = return [PS fp' off' idx']\n          | otherwise =\n            do w <- peekElemOff p (off' + idx')\n               if\n                 pred'\n                   (case w of\n                        W8# w# -> w#)\n                 then\n                 return\n                   (PS fp' off' idx' :\n                      splitWith0 pred' (off' + idx' + 1) (len' - idx' - 1) fp')\n                 else splitLoop pred' p (idx' + 1) off' len' fp'"],"instances":[],"language":{"extensions":["MagicHash","UnboxedTuples","NamedFieldPuns","BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}