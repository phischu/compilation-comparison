{"sliceID":4046203682584921896,"uses":[{"reference":{"otherSlice":8468946667989408909},"usedName":{"constructorName":{"identifier":"Seq"},"constructorTypeName":{"identifier":"Seq"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":6500945367252731749},"usedName":{"constructorName":{"identifier":"Elem"},"constructorTypeName":{"identifier":"Elem"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"otherSlice":6500945367252731749},"usedName":{"typeName":{"identifier":"Elem"}},"qualification":null},{"reference":{"otherSlice":2497553050502348575},"usedName":{"typeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"otherSlice":4603056598885952374},"usedName":{"typeName":{"identifier":"Node"}},"qualification":null},{"reference":{"otherSlice":3097725820661431075},"usedName":{"typeName":{"identifier":"Sized"}},"qualification":null},{"reference":{"otherSlice":2497553050502348575},"usedName":{"constructorName":{"identifier":"Empty"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"otherSlice":2497553050502348575},"usedName":{"constructorName":{"identifier":"Single"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"otherSlice":2497553050502348575},"usedName":{"constructorName":{"identifier":"Deep"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"otherSlice":3097725820661431075},"usedName":{"valueName":{"identifier":"size"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"otherSlice":6073454630168832022},"usedName":{"typeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"otherSlice":6073454630168832022},"usedName":{"constructorName":{"identifier":"One"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"otherSlice":6073454630168832022},"usedName":{"constructorName":{"identifier":"Two"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"otherSlice":6073454630168832022},"usedName":{"constructorName":{"identifier":"Three"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"otherSlice":6073454630168832022},"usedName":{"constructorName":{"identifier":"Four"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":4603056598885952374},"usedName":{"constructorName":{"identifier":"Node2"},"constructorTypeName":{"identifier":"Node"}},"qualification":null},{"reference":{"otherSlice":4603056598885952374},"usedName":{"constructorName":{"identifier":"Node3"},"constructorTypeName":{"identifier":"Node"}},"qualification":null},{"reference":{"otherSlice":8468946667989408909},"usedName":{"typeName":{"identifier":"Seq"}},"qualification":null}],"fragment":["splitMap ::\n         (Int -> s -> (s, s)) -> (s -> a -> b) -> s -> Seq a -> Seq b","splitMap splt' = go\n  where go f s (Seq xs)\n          = Seq $ splitMapTree splt' (\\ s' (Elem a) -> Elem (f s' a)) s xs\n        \n        {-# SPECIALISE splitMapTree ::\n                         (Int -> s -> (s, s)) ->\n                           (s -> Elem y -> b) -> s -> FingerTree (Elem y) -> FingerTree b\n                       #-}\n        \n        {-# SPECIALISE splitMapTree ::\n                         (Int -> s -> (s, s)) ->\n                           (s -> Node y -> b) -> s -> FingerTree (Node y) -> FingerTree b\n                       #-}\n        \n        splitMapTree ::\n                       Sized a =>\n                       (Int -> s -> (s, s)) ->\n                         (s -> a -> b) -> s -> FingerTree a -> FingerTree b\n        splitMapTree _ _ _ Empty = Empty\n        splitMapTree _ f s (Single xs) = Single $ f s xs\n        splitMapTree splt f s (Deep n pr m sf)\n          = Deep n (splitMapDigit splt f prs pr)\n              (splitMapTree splt (splitMapNode splt f) ms m)\n              (splitMapDigit splt f sfs sf)\n          where (prs, r) = splt (size pr) s\n                (ms, sfs) = splt (n - size pr - size sf) r\n        \n        {-# SPECIALISE splitMapDigit ::\n                         (Int -> s -> (s, s)) ->\n                           (s -> Elem y -> b) -> s -> Digit (Elem y) -> Digit b\n                       #-}\n        \n        {-# SPECIALISE splitMapDigit ::\n                         (Int -> s -> (s, s)) ->\n                           (s -> Node y -> b) -> s -> Digit (Node y) -> Digit b\n                       #-}\n        \n        splitMapDigit ::\n                        Sized a =>\n                        (Int -> s -> (s, s)) -> (s -> a -> b) -> s -> Digit a -> Digit b\n        splitMapDigit _ f s (One a) = One (f s a)\n        splitMapDigit splt f s (Two a b) = Two (f first a) (f second b)\n          where (first, second) = splt (size a) s\n        splitMapDigit splt f s (Three a b c)\n          = Three (f first a) (f second b) (f third c)\n          where (first, r) = splt (size a) s\n                (second, third) = splt (size b) r\n        splitMapDigit splt f s (Four a b c d)\n          = Four (f first a) (f second b) (f third c) (f fourth d)\n          where (first, s') = splt (size a) s\n                (middle, fourth) = splt (size b + size c) s'\n                (second, third) = splt (size b) middle\n        \n        {-# SPECIALISE splitMapNode ::\n                         (Int -> s -> (s, s)) ->\n                           (s -> Elem y -> b) -> s -> Node (Elem y) -> Node b\n                       #-}\n        \n        {-# SPECIALISE splitMapNode ::\n                         (Int -> s -> (s, s)) ->\n                           (s -> Node y -> b) -> s -> Node (Node y) -> Node b\n                       #-}\n        \n        splitMapNode ::\n                       Sized a =>\n                       (Int -> s -> (s, s)) -> (s -> a -> b) -> s -> Node a -> Node b\n        splitMapNode splt f s (Node2 ns a b)\n          = Node2 ns (f first a) (f second b)\n          where (first, second) = splt (size a) s\n        splitMapNode splt f s (Node3 ns a b c)\n          = Node3 ns (f first a) (f second b) (f third c)\n          where (first, r) = splt (size a) s\n                (second, third) = splt (size b) r"],"instances":[],"language":{"extensions":["DeriveDataTypeable","StandaloneDeriving","TypeFamilies","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}