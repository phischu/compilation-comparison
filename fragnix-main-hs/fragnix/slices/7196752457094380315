{"sliceID":7196752457094380315,"uses":[{"reference":{"otherSlice":4041040564016882290},"usedName":{"constructorName":{"identifier":"Context"},"constructorTypeName":{"identifier":"Context"}},"qualification":null},{"reference":{"otherSlice":4041040564016882290},"usedName":{"valueName":{"identifier":"inputQ"}},"qualification":null},{"reference":{"otherSlice":4041040564016882290},"usedName":{"valueName":{"identifier":"controlQ"}},"qualification":null},{"reference":{"otherSlice":3556546335927670205},"usedName":{"valueName":{"identifier":"newStreamInfo"}},"qualification":null},{"reference":{"otherSlice":6457207593892082518},"usedName":{"valueName":{"identifier":"newThreadContinue"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"Control.Exception.Base"},"usedName":{"valueName":{"identifier":"bracket"}},"qualification":"E"},{"reference":{"otherSlice":330670892444552603},"usedName":{"valueName":{"identifier":"registerKillThread"}},"qualification":"T"},{"reference":{"otherSlice":7468154724272227973},"usedName":{"valueName":{"identifier":"cancel"}},"qualification":"T"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":4211538635895392527},"usedName":{"valueName":{"identifier":"setThreadContinue"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"True"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"Control.Exception.Base"},"usedName":{"valueName":{"identifier":"try"}},"qualification":"E"},{"reference":{"otherSlice":2025821085572104481},"usedName":{"valueName":{"identifier":"pause"}},"qualification":"T"},{"reference":{"otherSlice":3945285669814970459},"usedName":{"constructorName":{"identifier":"Input"},"constructorTypeName":{"identifier":"Input"}},"qualification":null},{"reference":{"builtinModule":"GHC.Conc.Sync"},"usedName":{"valueName":{"identifier":"atomically"}},"qualification":null},{"reference":{"otherSlice":6065381269424617342},"usedName":{"valueName":{"identifier":"readTQueue"}},"qualification":null},{"reference":{"otherSlice":8436056740436328102},"usedName":{"valueName":{"identifier":"setStreamInfo"}},"qualification":null},{"reference":{"otherSlice":2813677844884126619},"usedName":{"valueName":{"identifier":"resume"}},"qualification":"T"},{"reference":{"otherSlice":4684457803165284207},"usedName":{"valueName":{"identifier":"tickle"}},"qualification":"T"},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Right"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":3390914165584877492},"usedName":{"constructorName":{"identifier":"ResponseReceived"},"constructorTypeName":{"identifier":"ResponseReceived"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Left"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"builtinModule":"GHC.Exception"},"usedName":{"constructorName":{"identifier":"SomeException"},"constructorTypeName":{"identifier":"SomeException"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Exception"},"usedName":{"constructorName":{"identifier":"ThreadKilled"},"constructorTypeName":{"identifier":"AsyncException"}},"qualification":null},{"reference":{"builtinModule":"GHC.Exception"},"usedName":{"valueName":{"identifier":"fromException"}},"qualification":"E"},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"False"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":8539967653601106467},"usedName":{"constructorName":{"identifier":"TimeoutThread"},"constructorTypeName":{"identifier":"TimeoutThread"}},"qualification":"T"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":8102061523556146335},"usedName":{"valueName":{"identifier":"getThreadContinue"}},"qualification":null},{"reference":{"otherSlice":2120198619766430862},"usedName":{"valueName":{"identifier":"clearStreamInfo"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"when"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"otherSlice":2210757884868494530},"usedName":{"valueName":{"identifier":"getStreamInfo"}},"qualification":null},{"reference":{"otherSlice":5355904137995347472},"usedName":{"valueName":{"identifier":"closed"}},"qualification":null},{"reference":{"otherSlice":7308085713203672854},"usedName":{"constructorName":{"identifier":"Killed"},"constructorTypeName":{"identifier":"ClosedCode"}},"qualification":null},{"reference":{"otherSlice":7326433401287430113},"usedName":{"valueName":{"identifier":"resetFrame"}},"qualification":null},{"reference":{"otherSlice":5005511013097534442},"usedName":{"constructorName":{"identifier":"InternalError"},"constructorTypeName":{"identifier":"ErrorCodeId"}},"qualification":null},{"reference":{"otherSlice":2801635089134887690},"usedName":{"valueName":{"identifier":"streamNumber"}},"qualification":null},{"reference":{"otherSlice":2847764183293833005},"usedName":{"valueName":{"identifier":"enqueueControl"}},"qualification":null},{"reference":{"otherSlice":2096491001196216488},"usedName":{"constructorName":{"identifier":"CFrame"},"constructorTypeName":{"identifier":"Control"}},"qualification":null},{"reference":{"otherSlice":135941937043906956},"usedName":{"valueName":{"identifier":"settingsOnException"}},"qualification":"S"},{"reference":{"otherSlice":4041040564016882290},"usedName":{"typeName":{"identifier":"Context"}},"qualification":null},{"reference":{"otherSlice":135941937043906956},"usedName":{"typeName":{"identifier":"Settings"}},"qualification":"S"},{"reference":{"otherSlice":2503338423706628106},"usedName":{"typeName":{"identifier":"Application"}},"qualification":null},{"reference":{"otherSlice":5908636642571496174},"usedName":{"typeName":{"identifier":"Responder"}},"qualification":null},{"reference":{"otherSlice":9044087429012975082},"usedName":{"typeName":{"identifier":"Manager"}},"qualification":"T"},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null}],"fragment":["worker ::\n       Context ->\n         S.Settings -> Application -> Responder -> T.Manager -> IO ()","worker ctx@Context{inputQ, controlQ} set app responder tm\n  = do sinfo <- newStreamInfo\n       tcont <- newThreadContinue\n       let timeoutAction = return ()\n       E.bracket (T.registerKillThread tm timeoutAction) T.cancel $\n         go sinfo tcont\n  where go sinfo tcont th\n          = do setThreadContinue tcont True\n               ex <- E.try $\n                       do T.pause th\n                          inp@(Input strm req reqvt ii) <- atomically $ readTQueue inputQ\n                          setStreamInfo sinfo inp\n                          T.resume th\n                          T.tickle th\n                          app req $ responder ii reqvt tcont strm req\n               cont1 <- case ex of\n                            Right ResponseReceived -> return True\n                            Left e@(SomeException _) | Just ThreadKilled <- E.fromException e\n                                                       -> return False\n                                                     | Just T.TimeoutThread <- E.fromException e ->\n                                                       do cleanup sinfo Nothing\n                                                          return True\n                                                     | otherwise ->\n                                                       do cleanup sinfo $ Just e\n                                                          return True\n               cont2 <- getThreadContinue tcont\n               clearStreamInfo sinfo\n               when (cont1 && cont2) $ go sinfo tcont th\n        cleanup sinfo me\n          = do minp <- getStreamInfo sinfo\n               case minp of\n                   Nothing -> return ()\n                   Just (Input strm req _reqvt _ii) -> do closed ctx strm Killed\n                                                          let !frame\n                                                                = resetFrame InternalError\n                                                                    (streamNumber strm)\n                                                          enqueueControl controlQ $ CFrame frame\n                                                          case me of\n                                                              Nothing -> return ()\n                                                              Just e -> S.settingsOnException set\n                                                                          (Just req)\n                                                                          e"],"instances":[],"language":{"extensions":["NamedFieldPuns","PatternGuards","ScopedTypeVariables","OverloadedStrings","BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll"],"isInstance":false}}