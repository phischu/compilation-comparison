{"sliceID":559742740709860770,"uses":[{"reference":{"builtinModule":"System.IO.Error"},"usedName":{"valueName":{"identifier":"modifyIOError"}},"qualification":null},{"reference":{"otherSlice":6530490125521528221},"usedName":{"valueName":{"identifier":"ioeAddLocation"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"builtinModule":"System.IO.Error"},"usedName":{"valueName":{"identifier":"ioeSetFileName"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":8667189816506701156},"usedName":{"valueName":{"identifier":"dropTrailingPathSeparator"}},"qualification":null},{"reference":{"otherSlice":2838007907868950400},"usedName":{"valueName":{"identifier":"normalise"}},"qualification":null},{"reference":{"builtinModule":"Data.Functor"},"usedName":{"valueName":{"operator":"<$>"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"=<<"}},"qualification":null},{"reference":{"otherSlice":1969971827350685364},"usedName":{"valueName":{"identifier":"prependCurrentDirectory"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Encoding"},"usedName":{"valueName":{"identifier":"getFileSystemEncoding"}},"qualification":null},{"reference":{"builtinModule":"GHC.Foreign"},"usedName":{"valueName":{"identifier":"withCString"}},"qualification":"GHC"},{"reference":{"otherSlice":6163936666108736677},"usedName":{"valueName":{"identifier":"withRealpath"}},"qualification":null},{"reference":{"builtinModule":"GHC.Foreign"},"usedName":{"valueName":{"identifier":"peekCString"}},"qualification":"GHC"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"Control.Monad"},"usedName":{"valueName":{"operator":"<=<"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<="}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"reverse"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"zip"}},"qualification":null},{"reference":{"otherSlice":7823257967449662455},"usedName":{"valueName":{"identifier":"splitDirectories"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"scanl1"}},"qualification":null},{"reference":{"otherSlice":3970690690701501968},"usedName":{"valueName":{"operator":"</>"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"tail"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"scanr"}},"qualification":null},{"reference":{"otherSlice":5845540158979064418},"usedName":{"valueName":{"identifier":"doesPathExist"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"not"}},"qualification":null},{"reference":{"builtinModule":"System.IO.Error"},"usedName":{"valueName":{"identifier":"tryIOError"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Left"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Right"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":6866620546418597236},"usedName":{"valueName":{"identifier":"getSymbolicLinkTarget"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"valueName":{"identifier":"fromMaybe"}},"qualification":null},{"reference":{"otherSlice":632805761672225618},"usedName":{"valueName":{"identifier":"joinPath"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO"},"usedName":{"typeName":{"identifier":"FilePath"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null}],"fragment":["canonicalizePath :: FilePath -> IO FilePath","canonicalizePath\n  = \\ path ->\n      modifyIOError\n        ((`ioeAddLocation` \"canonicalizePath\") . (`ioeSetFileName` path))\n        $\n        dropTrailingPathSeparator . normalise <$>\n          (transform =<< prependCurrentDirectory path)\n  where transform path\n          = do encoding <- getFileSystemEncoding\n               let realpath path'\n                     = GHC.withCString encoding path'\n                         (`withRealpath` GHC.peekCString encoding)\n               attemptRealpath realpath path\n        simplify = return\n        attemptRealpath realpath\n          = attemptRealpathWith (64 :: Int) Nothing realpath <=< simplify\n        attemptRealpathWith n mFallback realpath path\n          = case mFallback of\n                Just fallback | n <= 0 -> return fallback\n                _ -> realpathPrefix (reverse (zip prefixes suffixes))\n          where segments = splitDirectories path\n                prefixes = scanl1 (</>) segments\n                suffixes = tail (scanr (</>) \"\" segments)\n                realpathPrefix candidates\n                  = case candidates of\n                        [] -> return path\n                        (prefix, suffix) : rest -> do exist <- doesPathExist prefix\n                                                      if not exist then realpathPrefix rest else\n                                                        do mp <- tryIOError (realpath prefix)\n                                                           case mp of\n                                                               Left _ -> realpathPrefix rest\n                                                               Right p -> realpathFurther\n                                                                            (p </> suffix)\n                                                                            p\n                                                                            suffix\n                realpathFurther fallback p suffix\n                  = case splitDirectories suffix of\n                        [] -> return fallback\n                        next : restSuffix -> do mTarget <- tryIOError\n                                                             (getSymbolicLinkTarget (p </> next))\n                                                case mTarget of\n                                                    Left _ -> return fallback\n                                                    Right target -> do let mFallback'\n                                                                             = Just\n                                                                                 (fromMaybe fallback\n                                                                                    mFallback)\n                                                                       path' <- simplify\n                                                                                  (p </> target </>\n                                                                                     joinPath\n                                                                                       restSuffix)\n                                                                       attemptRealpathWith (n - 1)\n                                                                         mFallback'\n                                                                         realpath\n                                                                         path'"],"instances":[],"language":{"extensions":["MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}