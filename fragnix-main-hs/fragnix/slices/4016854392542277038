{"sliceID":4016854392542277038,"uses":[{"reference":{"builtinModule":"GHC.Word"},"usedName":{"typeName":{"identifier":"Word16"}},"qualification":null},{"reference":{"otherSlice":7371230131560164710},"usedName":{"typeName":{"identifier":"HostAddress6"}},"qualification":null},{"reference":{"builtinModule":"GHC.Word"},"usedName":{"typeName":{"identifier":"Word32"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"identifier":"shiftL"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"operator":".|."}},"qualification":null}],"fragment":["tupleToHostAddress6 ::\n                    (Word16, Word16, Word16, Word16, Word16, Word16, Word16, Word16) ->\n                      HostAddress6","tupleToHostAddress6 (w7, w6, w5, w4, w3, w2, w1, w0)\n  = let add :: Word16 -> Word16 -> Word32\n        high `add` low\n          = (fromIntegral high `shiftL` 16) .|. (fromIntegral low)\n      in (w7 `add` w6, w5 `add` w4, w3 `add` w2, w1 `add` w0)"],"instances":[],"language":{"extensions":["DeriveDataTypeable","ForeignFunctionInterface","TypeSynonymInstances","FlexibleInstances","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}