{"sliceID":311145251947977821,"uses":[{"reference":{"builtinModule":"GHC.Real"},"usedName":{"typeName":{"identifier":"Fractional"}},"qualification":null},{"reference":{"otherSlice":5290961166819491409},"usedName":{"typeName":{"identifier":"Scientific"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"recip"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromRational"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"toRational"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"operator":"/"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Exception"},"usedName":{"valueName":{"identifier":"throw"}},"qualification":null},{"reference":{"builtinModule":"GHC.Exception"},"usedName":{"constructorName":{"identifier":"DivideByZero"},"constructorTypeName":{"identifier":"ArithException"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":4877895459445700057},"usedName":{"valueName":{"identifier":"positivize"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"numerator"}},"qualification":null},{"reference":{"builtinModule":"GHC.Integer.GMP.Internals"},"usedName":{"typeName":{"identifier":"Integer"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"otherSlice":5290961166819491409},"usedName":{"constructorName":{"identifier":"Scientific"},"constructorTypeName":{"identifier":"Scientific"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"*"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"GHC.Integer"},"usedName":{"valueName":{"identifier":"quotRemInteger"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"denominator"}},"qualification":null}],"fragment":["instance Fractional Scientific where\n        recip = fromRational . recip . toRational\n        x / y = fromRational $ toRational x / toRational y\n        fromRational rational\n          | d == 0 = throw DivideByZero\n          | otherwise = positivize (longDiv 0 0) (numerator rational)\n          where longDiv :: Integer -> Int -> (Integer -> Scientific)\n                longDiv !c !e 0 = Scientific c e\n                longDiv !c !e !n\n                  | n < d = longDiv (c * 10) (e - 1) (n * 10)\n                  | otherwise =\n                    case n `quotRemInteger` d of\n                        (# q, r #) -> longDiv (c + q) e r\n                d = denominator rational"],"instances":[],"language":{"extensions":["DeriveDataTypeable","BangPatterns","ScopedTypeVariables","UnboxedTuples","PatternGuards","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll"],"isInstance":true}}