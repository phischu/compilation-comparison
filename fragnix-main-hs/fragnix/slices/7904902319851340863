{"sliceID":7904902319851340863,"uses":[{"reference":{"otherSlice":2071755692096765236},"usedName":{"valueName":{"identifier":"liftIO"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":5822675882430045973},"usedName":{"valueName":{"identifier":"isStdStream"}},"qualification":null},{"reference":{"otherSlice":1376305120464643270},"usedName":{"valueName":{"identifier":"osStdStream"}},"qualification":null},{"reference":{"otherSlice":1924625844620005541},"usedName":{"valueName":{"identifier":"createProcess_"}},"qualification":"PI"},{"reference":{"otherSlice":6581712628843041540},"usedName":{"valueName":{"identifier":"std_in"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"valueName":{"identifier":"fromMaybe"}},"qualification":null},{"reference":{"otherSlice":6581712628843041540},"usedName":{"valueName":{"identifier":"std_out"}},"qualification":null},{"reference":{"otherSlice":6581712628843041540},"usedName":{"valueName":{"identifier":"std_err"}},"qualification":null},{"reference":{"builtinModule":"GHC.Conc.Sync"},"usedName":{"valueName":{"identifier":"atomically"}},"qualification":null},{"reference":{"otherSlice":4071092923615000611},"usedName":{"valueName":{"identifier":"newEmptyTMVar"}},"qualification":null},{"reference":{"builtinModule":"GHC.Conc.Sync"},"usedName":{"valueName":{"identifier":"forkIO"}},"qualification":null},{"reference":{"otherSlice":8891696559039043959},"usedName":{"valueName":{"identifier":"waitForProcess"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":">>="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"otherSlice":1182216502827509351},"usedName":{"valueName":{"identifier":"putTMVar"}},"qualification":null},{"reference":{"builtinModule":"Data.Functor"},"usedName":{"valueName":{"operator":"<$>"}},"qualification":null},{"reference":{"builtinModule":"Control.Applicative"},"usedName":{"valueName":{"operator":"<*>"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":2730524178292007518},"usedName":{"constructorName":{"identifier":"StreamingProcessHandle"},"constructorTypeName":{"identifier":"StreamingProcessHandle"}},"qualification":null},{"reference":{"otherSlice":2071755692096765236},"usedName":{"typeName":{"identifier":"MonadIO"}},"qualification":null},{"reference":{"otherSlice":5822675882430045973},"usedName":{"typeName":{"identifier":"InputSource"}},"qualification":null},{"reference":{"otherSlice":1376305120464643270},"usedName":{"typeName":{"identifier":"OutputSink"}},"qualification":null},{"reference":{"otherSlice":6581712628843041540},"usedName":{"typeName":{"identifier":"CreateProcess"}},"qualification":null},{"reference":{"otherSlice":2730524178292007518},"usedName":{"typeName":{"identifier":"StreamingProcessHandle"}},"qualification":null}],"fragment":["streamingProcess ::\n                   (MonadIO m, InputSource stdin, OutputSink stdout,\n                    OutputSink stderr) =>\n                   CreateProcess -> m (stdin, stdout, stderr, StreamingProcessHandle)","streamingProcess cp\n  = liftIO $\n      do let (getStdin, stdinStream) = isStdStream\n             (getStdout, stdoutStream) = osStdStream\n             (getStderr, stderrStream) = osStdStream\n         (stdinH, stdoutH, stderrH, ph) <- PI.createProcess_\n                                             \"streamingProcess\"\n                                             cp{std_in = fromMaybe (std_in cp) stdinStream,\n                                                std_out = fromMaybe (std_out cp) stdoutStream,\n                                                std_err = fromMaybe (std_err cp) stderrStream}\n         ec <- atomically newEmptyTMVar\n         _ <- forkIO $ waitForProcess ph >>= atomically . putTMVar ec\n         (,,,) <$> getStdin stdinH <*> getStdout stdoutH <*>\n           getStderr stderrH\n           <*> return (StreamingProcessHandle ph ec)"],"instances":[],"language":{"extensions":["DeriveDataTypeable","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}