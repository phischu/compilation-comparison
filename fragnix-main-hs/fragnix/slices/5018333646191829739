{"sliceID":5018333646191829739,"uses":[{"reference":{"builtinModule":"Control.Monad"},"usedName":{"valueName":{"identifier":"void"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO"},"usedName":{"valueName":{"identifier":"mask_"}},"qualification":null},{"reference":{"otherSlice":434762087089967263},"usedName":{"valueName":{"identifier":"gracefulShutdown"}},"qualification":null},{"reference":{"builtinModule":"Control.Exception"},"usedName":{"valueName":{"identifier":"allowInterrupt"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":8381774362646630699},"usedName":{"valueName":{"identifier":"fork"}},"qualification":null},{"reference":{"builtinModule":"Control.Exception.Base"},"usedName":{"valueName":{"identifier":"try"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Right"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Left"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":355629517602467088},"usedName":{"valueName":{"identifier":"onE"}},"qualification":null},{"reference":{"builtinModule":"GHC.Exception"},"usedName":{"valueName":{"identifier":"toException"}},"qualification":null},{"reference":{"builtinModule":"System.IO.Error"},"usedName":{"valueName":{"identifier":"isFullErrorType"}},"qualification":null},{"reference":{"builtinModule":"System.IO.Error"},"usedName":{"valueName":{"identifier":"ioeGetErrorType"}},"qualification":null},{"reference":{"builtinModule":"GHC.Conc.IO"},"usedName":{"valueName":{"identifier":"threadDelay"}},"qualification":null},{"reference":{"otherSlice":4040851656968671632},"usedName":{"typeName":{"identifier":"Settings"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"otherSlice":4881703223122348873},"usedName":{"typeName":{"identifier":"Connection"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":5051683172608853772},"usedName":{"typeName":{"identifier":"SockAddr"}},"qualification":null},{"reference":{"otherSlice":2500932139194697081},"usedName":{"typeName":{"identifier":"Application"}},"qualification":null},{"reference":{"otherSlice":4025988212302271313},"usedName":{"typeName":{"identifier":"DateCache"}},"qualification":"D"},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":7407983818533495161},"usedName":{"typeName":{"identifier":"MutableFdCache"}},"qualification":"F"},{"reference":{"otherSlice":7271469853572783616},"usedName":{"typeName":{"identifier":"Manager"}},"qualification":"T"},{"reference":{"otherSlice":3451900265030802778},"usedName":{"typeName":{"identifier":"Counter"}},"qualification":null}],"fragment":["acceptConnection ::\n                 Settings ->\n                   IO (IO (Connection, Bool), SockAddr) ->\n                     Application ->\n                       D.DateCache ->\n                         Maybe F.MutableFdCache -> T.Manager -> Counter -> IO ()","acceptConnection set getConnMaker app dc fc tm counter\n  = do void $ mask_ $ acceptLoop\n       gracefulShutdown counter\n  where acceptLoop\n          = do allowInterrupt\n               mx <- acceptNewConnection\n               case mx of\n                   Nothing -> return ()\n                   Just (mkConn, addr) -> do fork set mkConn addr app dc fc tm counter\n                                             acceptLoop\n        acceptNewConnection\n          = do ex <- try getConnMaker\n               case ex of\n                   Right x -> return $ Just x\n                   Left e -> do onE set Nothing $ toException e\n                                if isFullErrorType (ioeGetErrorType e) then\n                                  do threadDelay 1000000\n                                     acceptNewConnection\n                                  else return Nothing"],"instances":[],"language":{"extensions":["OverloadedStrings","ScopedTypeVariables","TupleSections","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}