{"sliceID":1423915840690297565,"uses":[{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":4388261176215324957},"usedName":{"constructorName":{"identifier":"ResponseRaw"},"constructorTypeName":{"identifier":"Response"}},"qualification":null},{"reference":{"otherSlice":4388261176215324957},"usedName":{"constructorName":{"identifier":"ResponseFile"},"constructorTypeName":{"identifier":"Response"}},"qualification":null},{"reference":{"otherSlice":7449822292869344379},"usedName":{"valueName":{"identifier":"gzipFiles"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":2444569450686623340},"usedName":{"constructorName":{"identifier":"GzipIgnore"},"constructorTypeName":{"identifier":"GzipFiles"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"elem"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"not"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":2444569450686623340},"usedName":{"constructorName":{"identifier":"GzipCacheFolder"},"constructorTypeName":{"identifier":"GzipFiles"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"lookup"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":7449822292869344379},"usedName":{"valueName":{"identifier":"gzipCheckMime"}},"qualification":null},{"reference":{"otherSlice":7993974687498276703},"usedName":{"valueName":{"identifier":"compressFile"}},"qualification":null},{"reference":{"otherSlice":1719992591707048686},"usedName":{"valueName":{"identifier":"compressE"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"valueName":{"identifier":"fromMaybe"}},"qualification":null},{"reference":{"otherSlice":109953164703501094},"usedName":{"valueName":{"identifier":"splitCommas"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"otherSlice":1940791894936628658},"usedName":{"valueName":{"identifier":"unpack"}},"qualification":"S8"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fmap"}},"qualification":null},{"reference":{"otherSlice":30758760526534613},"usedName":{"valueName":{"identifier":"requestHeaders"}},"qualification":null},{"reference":{"otherSlice":2320156228526443373},"usedName":{"valueName":{"identifier":"isInfixOf"}},"qualification":"S"},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"valueName":{"identifier":"isJust"}},"qualification":null},{"reference":{"otherSlice":2561030100759734952},"usedName":{"valueName":{"identifier":"responseHeaders"}},"qualification":null},{"reference":{"otherSlice":7449822292869344379},"usedName":{"typeName":{"identifier":"GzipSettings"}},"qualification":null},{"reference":{"otherSlice":3389037324188664509},"usedName":{"typeName":{"identifier":"Middleware"}},"qualification":null}],"fragment":["gzip :: GzipSettings -> Middleware","gzip set app env sendResponse\n  = app env $\n      \\ res ->\n        case res of\n            ResponseRaw{} -> sendResponse res\n            ResponseFile{} | gzipFiles set == GzipIgnore -> sendResponse res\n            _ -> if \"gzip\" `elem` enc && not isMSIE6 && not (isEncoded res)\n                   then\n                   case (res, gzipFiles set) of\n                       (ResponseFile s hs file Nothing, GzipCacheFolder cache) -> case\n                                                                                    lookup\n                                                                                      \"content-type\"\n                                                                                      hs\n                                                                                    of\n                                                                                      Just\n                                                                                        m | gzipCheckMime\n                                                                                              set\n                                                                                              m\n                                                                                            ->\n                                                                                            compressFile\n                                                                                              s\n                                                                                              hs\n                                                                                              file\n                                                                                              cache\n                                                                                              sendResponse\n                                                                                      _ -> sendResponse\n                                                                                             res\n                       _ -> compressE set res sendResponse\n                   else sendResponse res\n  where enc\n          = fromMaybe [] $\n              (splitCommas . S8.unpack) `fmap`\n                lookup \"Accept-Encoding\" (requestHeaders env)\n        ua = fromMaybe \"\" $ lookup \"user-agent\" $ requestHeaders env\n        isMSIE6 = \"MSIE 6\" `S.isInfixOf` ua\n        isEncoded res\n          = isJust $ lookup \"Content-Encoding\" $ responseHeaders res"],"instances":[],"language":{"extensions":["Rank2Types","ScopedTypeVariables","OverloadedStrings","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}