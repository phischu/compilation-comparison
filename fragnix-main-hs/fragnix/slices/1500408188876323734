{"sliceID":1500408188876323734,"uses":[{"reference":{"otherSlice":8587154504401928891},"usedName":{"typeName":{"identifier":"MonadCatch"}},"qualification":null},{"reference":{"otherSlice":5726095248707667203},"usedName":{"typeName":{"identifier":"ReaderT"}},"qualification":null},{"reference":{"otherSlice":8587154504401928891},"usedName":{"valueName":{"identifier":"catch"}},"qualification":null},{"reference":{"otherSlice":5726095248707667203},"usedName":{"constructorName":{"identifier":"ReaderT"},"constructorTypeName":{"identifier":"ReaderT"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":5726095248707667203},"usedName":{"valueName":{"identifier":"runReaderT"}},"qualification":null}],"fragment":["instance MonadCatch m => MonadCatch (ReaderT r m) where\n        catch (ReaderT m) c\n          = ReaderT $ \\ r -> m r `catch` \\ e -> runReaderT (c e) r"],"instances":[],"language":{"extensions":["ExistentialQuantification","GeneralizedNewtypeDeriving","RankNTypes","FlexibleInstances","MultiParamTypeClasses","UndecidableInstances","TypeFamilies","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":true}}