{"sliceID":225251557406626284,"uses":[{"reference":{"builtinModule":"Data.Functor"},"usedName":{"valueName":{"identifier":"void"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO"},"usedName":{"valueName":{"identifier":"mask_"}},"qualification":null},{"reference":{"otherSlice":4365899480996822628},"usedName":{"valueName":{"identifier":"gracefulShutdown"}},"qualification":null},{"reference":{"builtinModule":"Control.Exception"},"usedName":{"valueName":{"identifier":"allowInterrupt"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":5738268349577515154},"usedName":{"valueName":{"identifier":"fork"}},"qualification":null},{"reference":{"builtinModule":"Control.Exception.Base"},"usedName":{"valueName":{"identifier":"try"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Right"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Left"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"builtinModule":"Foreign.C.Error"},"usedName":{"valueName":{"identifier":"eCONNABORTED"}},"qualification":null},{"reference":{"builtinModule":"Foreign.C.Error"},"usedName":{"constructorName":{"identifier":"Errno"},"constructorTypeName":{"identifier":"Errno"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Exception"},"usedName":{"valueName":{"identifier":"ioe_errno"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":135941937043906956},"usedName":{"valueName":{"identifier":"settingsOnException"}},"qualification":null},{"reference":{"builtinModule":"GHC.Exception"},"usedName":{"valueName":{"identifier":"toException"}},"qualification":null},{"reference":{"otherSlice":135941937043906956},"usedName":{"typeName":{"identifier":"Settings"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"otherSlice":3086651893912105973},"usedName":{"typeName":{"identifier":"Connection"}},"qualification":null},{"reference":{"otherSlice":583013321701679463},"usedName":{"typeName":{"identifier":"Transport"}},"qualification":null},{"reference":{"otherSlice":3812070640366845611},"usedName":{"typeName":{"identifier":"SockAddr"}},"qualification":null},{"reference":{"otherSlice":2503338423706628106},"usedName":{"typeName":{"identifier":"Application"}},"qualification":null},{"reference":{"otherSlice":3980465316211716835},"usedName":{"typeName":{"identifier":"Counter"}},"qualification":null},{"reference":{"otherSlice":4216138742902646622},"usedName":{"typeName":{"identifier":"InternalInfo0"}},"qualification":null}],"fragment":["acceptConnection ::\n                 Settings ->\n                   IO (IO (Connection, Transport), SockAddr) ->\n                     Application -> Counter -> InternalInfo0 -> IO ()","acceptConnection set getConnMaker app counter ii0\n  = do void $ mask_ acceptLoop\n       gracefulShutdown set counter\n  where acceptLoop\n          = do allowInterrupt\n               mx <- acceptNewConnection\n               case mx of\n                   Nothing -> return ()\n                   Just (mkConn, addr) -> do fork set mkConn addr app counter ii0\n                                             acceptLoop\n        acceptNewConnection\n          = do ex <- try getConnMaker\n               case ex of\n                   Right x -> return $ Just x\n                   Left e -> do let eConnAborted = getErrno eCONNABORTED\n                                    getErrno (Errno cInt) = cInt\n                                if ioe_errno e == Just eConnAborted then acceptNewConnection else\n                                  do settingsOnException set Nothing $ toException e\n                                     return Nothing"],"instances":[],"language":{"extensions":["BangPatterns","OverloadedStrings","PackageImports","PatternGuards","ScopedTypeVariables","TupleSections","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll"],"isInstance":false}}