{"sliceID":5041230917188583793,"uses":[{"reference":{"otherSlice":675696118971413715},"usedName":{"valueName":{"identifier":"null"}},"qualification":"S"},{"reference":{"otherSlice":6084955845854900422},"usedName":{"valueName":{"identifier":"prependCycle"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"flip"}},"qualification":null},{"reference":{"otherSlice":3034579540352253626},"usedName":{"valueName":{"identifier":"chunk"}},"qualification":"LI"},{"reference":{"otherSlice":1699226608098321587},"usedName":{"constructorName":{"identifier":"Empty"},"constructorTypeName":{"identifier":"ByteString"}},"qualification":"LI"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":6258463563638113276},"usedName":{"valueName":{"identifier":"length"}},"qualification":"S"},{"reference":{"otherSlice":9014031542439400326},"usedName":{"valueName":{"identifier":"strictSearcher"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"False"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":6084955845854900422},"usedName":{"valueName":{"identifier":"substitution"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":6985366053944096403},"usedName":{"valueName":{"identifier":"drop"}},"qualification":"S"},{"reference":{"otherSlice":3093287715237579077},"usedName":{"valueName":{"identifier":"take"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":7483143390726870398},"usedName":{"valueName":{"identifier":"fromChunks"}},"qualification":"L"},{"reference":{"otherSlice":6084955845854900422},"usedName":{"typeName":{"identifier":"Substitution"}},"qualification":null},{"reference":{"otherSlice":8642306666063513779},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"S"},{"reference":{"otherSlice":1699226608098321587},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"L"}],"fragment":["replace ::\n          Substitution rep =>\n          S.ByteString -> rep -> S.ByteString -> L.ByteString","replace pat\n  | S.null pat = \\ sub -> prependCycle sub . flip LI.chunk LI.Empty\n  | otherwise =\n    let !patLen = S.length pat\n        searcher = strictSearcher False pat\n        repl sub\n          = let {-# NOINLINE subst #-}\n                !subst = substitution sub\n                replacer str\n                  | S.null str = []\n                  | otherwise =\n                    case searcher str of\n                        [] -> [str]\n                        (i : _) | i == 0 -> subst $ replacer (S.drop patLen str)\n                                | otherwise ->\n                                  S.take i str : subst (replacer (S.drop (i + patLen) str))\n              in replacer\n      in \\ sub -> L.fromChunks . repl sub"],"instances":[],"language":{"extensions":["BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}