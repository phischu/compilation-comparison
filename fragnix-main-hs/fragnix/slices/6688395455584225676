{"sliceID":6688395455584225676,"uses":[{"reference":{"otherSlice":4276299172465164126},"usedName":{"valueName":{"identifier":"gfoldlAccum"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":">>="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"Data.Data"},"usedName":{"typeName":{"identifier":"Data"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Monad"}},"qualification":null}],"fragment":["gmapAccumM ::\n             (Data d, Monad m) =>\n             (forall e . Data e => a -> e -> (a, m e)) -> a -> d -> (a, m d)","gmapAccumM f = gfoldlAccum k z\n  where k a c d\n          = let (a', d') = f a d in\n              (a', d' >>= \\ d'' -> c >>= \\ c' -> return (c' d''))\n        z a x = (a, return x)"],"instances":[],"language":{"extensions":["RankNTypes","ScopedTypeVariables","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}