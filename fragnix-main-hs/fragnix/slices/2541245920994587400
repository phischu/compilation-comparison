{"sliceID":2541245920994587400,"uses":[{"reference":{"otherSlice":1174079497962638576},"usedName":{"typeName":{"identifier":"Binary"}},"qualification":null},{"reference":{"builtinModule":"GHC.Integer.GMP.Internals"},"usedName":{"typeName":{"identifier":"Integer"}},"qualification":null},{"reference":{"otherSlice":1174079497962638576},"usedName":{"valueName":{"identifier":"put"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">="}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<="}},"qualification":null},{"reference":{"otherSlice":2604632970891854970},"usedName":{"valueName":{"identifier":"putBuilder"}},"qualification":null},{"reference":{"otherSlice":2465123707017502378},"usedName":{"valueName":{"identifier":"primFixed"}},"qualification":"Prim"},{"reference":{"otherSlice":3390176938190379452},"usedName":{"valueName":{"identifier":"word8"}},"qualification":"Prim"},{"reference":{"otherSlice":7081892127999897032},"usedName":{"valueName":{"operator":">*<"}},"qualification":"Prim"},{"reference":{"otherSlice":5724814892900499353},"usedName":{"valueName":{"identifier":"int32BE"}},"qualification":"Prim"},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"builtinModule":"GHC.Enum"},"usedName":{"valueName":{"identifier":"minBound"}},"qualification":null},{"reference":{"otherSlice":1397822283386726418},"usedName":{"typeName":{"identifier":"SmallInt"}},"qualification":null},{"reference":{"builtinModule":"GHC.Enum"},"usedName":{"valueName":{"identifier":"maxBound"}},"qualification":null},{"reference":{"otherSlice":1764179473011897752},"usedName":{"valueName":{"identifier":"putWord8"}},"qualification":null},{"reference":{"builtinModule":"Data.Monoid"},"usedName":{"valueName":{"operator":"<>"}},"qualification":null},{"reference":{"otherSlice":2925102518252140797},"usedName":{"valueName":{"identifier":"unroll"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"identifier":"abs"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"identifier":"signum"}},"qualification":null},{"reference":{"builtinModule":"GHC.Word"},"usedName":{"typeName":{"identifier":"Word8"}},"qualification":null},{"reference":{"otherSlice":1174079497962638576},"usedName":{"valueName":{"identifier":"get"}},"qualification":null},{"reference":{"otherSlice":7949339268674780491},"usedName":{"typeName":{"identifier":"Get"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"liftM"}},"qualification":null},{"reference":{"otherSlice":2259832227534940398},"usedName":{"valueName":{"identifier":"roll"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$!"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null}],"fragment":["instance Binary Integer where\n        {-# INLINE put #-}\n        put n\n          | n >= lo && n <= hi =\n            putBuilder\n              (Prim.primFixed (Prim.word8 Prim.>*< Prim.int32BE)\n                 (0, fromIntegral n))\n          where lo = fromIntegral (minBound :: SmallInt) :: Integer\n                hi = fromIntegral (maxBound :: SmallInt) :: Integer\n        put n = putWord8 1 <> put sign <> put (unroll (abs n))\n          where sign = fromIntegral (signum n) :: Word8\n        \n        {-# INLINE get #-}\n        get\n          = do tag <- get :: Get Word8\n               case tag of\n                   0 -> liftM fromIntegral (get :: Get SmallInt)\n                   _ -> do sign <- get\n                           bytes <- get\n                           let v = roll bytes\n                           return $! if sign == (1 :: Word8) then v else -v"],"instances":[],"language":{"extensions":["FlexibleContexts","DefaultSignatures","GADTs","ScopedTypeVariables","PatternGuards","PolyKinds","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll"],"isInstance":true}}