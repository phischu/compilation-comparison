{"sliceID":609154278291193738,"uses":[{"reference":{"otherSlice":502464163944568234},"usedName":{"valueName":{"identifier":"runSTUArray"}},"qualification":null},{"reference":{"otherSlice":7235567377809295464},"usedName":{"valueName":{"identifier":"length"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"otherSlice":7493882458078027726},"usedName":{"valueName":{"identifier":"unsafeIndex"}},"qualification":null},{"reference":{"otherSlice":1733872520989780713},"usedName":{"valueName":{"identifier":"kmpBorders"}},"qualification":null},{"reference":{"otherSlice":5632142578980093812},"usedName":{"valueName":{"identifier":"newArray"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"*"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"otherSlice":5632142578980093812},"usedName":{"valueName":{"identifier":"unsafeWrite"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"identifier":"shiftL"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":5632142578980093812},"usedName":{"valueName":{"identifier":"unsafeRead"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"when"}},"qualification":null},{"reference":{"otherSlice":3191844957948247487},"usedName":{"valueName":{"identifier":"unsafeAt"}},"qualification":null},{"reference":{"otherSlice":4010822550476529195},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"S"},{"reference":{"otherSlice":5288367503661172006},"usedName":{"typeName":{"identifier":"UArray"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null}],"fragment":["automaton :: S.ByteString -> UArray Int Int","automaton !pat\n  = runSTUArray\n      (do let !patLen = S.length pat\n              {-# INLINE patAt #-}\n              patAt !i = fromIntegral (unsafeIndex pat i)\n              !bord = kmpBorders pat\n          aut <- newArray (0, (patLen + 1) * 256 - 1) 0\n          unsafeWrite aut (patAt 0) 1\n          let loop !state\n                = do let !base = state `shiftL` 8\n                         inner j\n                           | j < 0 = if state == patLen then return aut else loop (state + 1)\n                           | otherwise =\n                             do let !i = base + patAt j\n                                s <- unsafeRead aut i\n                                when (s == 0) (unsafeWrite aut i (j + 1))\n                                inner (unsafeAt bord j)\n                     if state == patLen then inner (unsafeAt bord state) else\n                       inner state\n          loop 1)"],"instances":[],"language":{"extensions":["BangPatterns","FlexibleContexts","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}