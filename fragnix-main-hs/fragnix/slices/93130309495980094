{"sliceID":93130309495980094,"uses":[{"reference":{"otherSlice":2861246407237030394},"usedName":{"constructorName":{"identifier":"ProcessHandle"},"constructorTypeName":{"identifier":"ProcessHandle"}},"qualification":null},{"reference":{"otherSlice":6903952166701984617},"usedName":{"valueName":{"identifier":"modifyProcessHandle"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":1572667180660314883},"usedName":{"constructorName":{"identifier":"ClosedHandle"},"constructorTypeName":{"identifier":"ProcessHandle__"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"False"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":1572667180660314883},"usedName":{"constructorName":{"identifier":"OpenHandle"},"constructorTypeName":{"identifier":"ProcessHandle__"}},"qualification":null},{"reference":{"builtinModule":"Foreign.Marshal.Alloc"},"usedName":{"valueName":{"identifier":"alloca"}},"qualification":null},{"reference":{"builtinModule":"Foreign.C.Error"},"usedName":{"valueName":{"identifier":"throwErrnoIfMinus1Retry"}},"qualification":null},{"reference":{"otherSlice":839038351951524207},"usedName":{"valueName":{"identifier":"c_getProcessExitCode"}},"qualification":null},{"reference":{"builtinModule":"Foreign.Storable"},"usedName":{"valueName":{"identifier":"peek"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":4677921233358934748},"usedName":{"valueName":{"identifier":"closePHANDLE"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Exception"},"usedName":{"constructorName":{"identifier":"ExitSuccess"},"constructorTypeName":{"identifier":"ExitCode"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Exception"},"usedName":{"constructorName":{"identifier":"ExitFailure"},"constructorTypeName":{"identifier":"ExitCode"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"True"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"otherSlice":1176014855258186949},"usedName":{"valueName":{"identifier":"endDelegateControlC"}},"qualification":null},{"reference":{"otherSlice":2861246407237030394},"usedName":{"typeName":{"identifier":"ProcessHandle"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Exception"},"usedName":{"typeName":{"identifier":"ExitCode"}},"qualification":null}],"fragment":["getProcessExitCode :: ProcessHandle -> IO (Maybe ExitCode)","getProcessExitCode ph@(ProcessHandle _ delegating_ctlc)\n  = do (m_e, was_open) <- modifyProcessHandle ph $\n                            \\ p_ ->\n                              case p_ of\n                                  ClosedHandle e -> return (p_, (Just e, False))\n                                  OpenHandle h -> alloca $\n                                                    \\ pExitCode ->\n                                                      do res <- throwErrnoIfMinus1Retry\n                                                                  \"getProcessExitCode\"\n                                                                  $ c_getProcessExitCode h pExitCode\n                                                         code <- peek pExitCode\n                                                         if res == 0 then\n                                                           return (p_, (Nothing, False)) else\n                                                           do closePHANDLE h\n                                                              let e | code == 0 = ExitSuccess\n                                                                    | otherwise =\n                                                                      ExitFailure\n                                                                        (fromIntegral code)\n                                                              return\n                                                                (ClosedHandle e, (Just e, True))\n       case m_e of\n           Just e | was_open && delegating_ctlc -> endDelegateControlC e\n           _ -> return ()\n       return m_e"],"instances":[],"language":{"extensions":["ForeignFunctionInterface","InterruptibleFFI","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}