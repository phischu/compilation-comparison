{"sliceID":822849760418867646,"uses":[{"reference":{"otherSlice":8434830524291201891},"usedName":{"valueName":{"identifier":"control"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO"},"usedName":{"valueName":{"identifier":"mask"}},"qualification":"E"},{"reference":{"builtinModule":"Control.Exception.Base"},"usedName":{"valueName":{"identifier":"onException"}},"qualification":"E"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":2946060544503603071},"usedName":{"typeName":{"identifier":"MonadBaseControl"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null}],"fragment":["bracket_ ::\n           MonadBaseControl IO m => IO () -> IO () -> IO () -> m a -> m a","bracket_ alloc cleanupNormal cleanupExc inside\n  = control $\n      \\ run ->\n        E.mask $\n          \\ restore ->\n            do alloc\n               res <- restore (run inside) `E.onException` cleanupExc\n               cleanupNormal\n               return res"],"instances":[],"language":{"extensions":["FlexibleContexts","FlexibleInstances","MultiParamTypeClasses","UndecidableInstances","TypeFamilies","RankNTypes","DeriveDataTypeable","ImpredicativeTypes","ConstraintKinds","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}