{"sliceID":6695411892474709976,"uses":[{"reference":{"otherSlice":4063595801900659949},"usedName":{"typeName":{"identifier":"GSum"}},"qualification":null},{"reference":{"otherSlice":5557445221807377954},"usedName":{"typeName":{"identifier":"GBinary"}},"qualification":null},{"reference":{"otherSlice":249168336475869158},"usedName":{"typeName":{"identifier":"SumSize"}},"qualification":null},{"reference":{"builtinModule":"GHC.Generics"},"usedName":{"typeName":{"operator":":+:"}},"qualification":null},{"reference":{"otherSlice":5557445221807377954},"usedName":{"valueName":{"identifier":"gput"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<="}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"builtinModule":"GHC.Enum"},"usedName":{"valueName":{"identifier":"maxBound"}},"qualification":null},{"reference":{"builtinModule":"GHC.Word"},"usedName":{"typeName":{"identifier":"Word8"}},"qualification":null},{"reference":{"otherSlice":4063595801900659949},"usedName":{"valueName":{"identifier":"putSum"}},"qualification":null},{"reference":{"builtinModule":"GHC.Word"},"usedName":{"typeName":{"identifier":"Word16"}},"qualification":null},{"reference":{"builtinModule":"GHC.Word"},"usedName":{"typeName":{"identifier":"Word32"}},"qualification":null},{"reference":{"builtinModule":"GHC.Word"},"usedName":{"typeName":{"identifier":"Word64"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":1174612513107939638},"usedName":{"valueName":{"identifier":"sizeError"}},"qualification":null},{"reference":{"otherSlice":8257854058895158711},"usedName":{"valueName":{"identifier":"unTagged"}},"qualification":null},{"reference":{"otherSlice":249168336475869158},"usedName":{"valueName":{"identifier":"sumSize"}},"qualification":null},{"reference":{"otherSlice":8257854058895158711},"usedName":{"typeName":{"identifier":"Tagged"}},"qualification":null},{"reference":{"otherSlice":5557445221807377954},"usedName":{"valueName":{"identifier":"gget"}},"qualification":null},{"reference":{"otherSlice":7781639745957293926},"usedName":{"valueName":{"identifier":"get"}},"qualification":null},{"reference":{"otherSlice":2395809604474213102},"usedName":{"typeName":{"identifier":"Get"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":">>="}},"qualification":null},{"reference":{"otherSlice":5414438733571021650},"usedName":{"valueName":{"identifier":"checkGetSum"}},"qualification":null}],"fragment":["instance (GSum a, GSum b, GBinary a, GBinary b, SumSize a,\n          SumSize b) =>\n         GBinary (a :+: b) where\n        gput\n          | (size - 1) <= fromIntegral (maxBound :: Word8) =\n            putSum (0 :: Word8) (fromIntegral size)\n          | (size - 1) <= fromIntegral (maxBound :: Word16) =\n            putSum (0 :: Word16) (fromIntegral size)\n          | (size - 1) <= fromIntegral (maxBound :: Word32) =\n            putSum (0 :: Word32) (fromIntegral size)\n          | (size - 1) <= fromIntegral (maxBound :: Word64) =\n            putSum (0 :: Word64) (fromIntegral size)\n          | otherwise = sizeError \"encode\" size\n          where size = unTagged (sumSize :: Tagged (a :+: b) Word64)\n        gget\n          | (size - 1) <= fromIntegral (maxBound :: Word8) =\n            (get :: Get Word8) >>= checkGetSum (fromIntegral size)\n          | (size - 1) <= fromIntegral (maxBound :: Word16) =\n            (get :: Get Word16) >>= checkGetSum (fromIntegral size)\n          | (size - 1) <= fromIntegral (maxBound :: Word32) =\n            (get :: Get Word32) >>= checkGetSum (fromIntegral size)\n          | (size - 1) <= fromIntegral (maxBound :: Word64) =\n            (get :: Get Word64) >>= checkGetSum (fromIntegral size)\n          | otherwise = sizeError \"decode\" size\n          where size = unTagged (sumSize :: Tagged (a :+: b) Word64)"],"instances":[],"language":{"extensions":["BangPatterns","FlexibleInstances","KindSignatures","ScopedTypeVariables","TypeOperators","TypeSynonymInstances","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":true}}