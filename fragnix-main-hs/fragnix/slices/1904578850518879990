{"sliceID":1904578850518879990,"uses":[{"reference":{"otherSlice":1435151082723044833},"usedName":{"constructorName":{"identifier":"Tip"},"constructorTypeName":{"identifier":"Set"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"False"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":1435151082723044833},"usedName":{"constructorName":{"identifier":"Bin"},"constructorTypeName":{"identifier":"Set"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"compare"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"LT"},"constructorTypeName":{"identifier":"Ordering"}},"qualification":null},{"reference":{"otherSlice":242521402772331425},"usedName":{"valueName":{"identifier":"link"}},"qualification":null},{"reference":{"builtinModule":"GHC.Prim"},"usedName":{"valueName":{"identifier":"seq"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"GT"},"constructorTypeName":{"identifier":"Ordering"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"EQ"},"constructorTypeName":{"identifier":"Ordering"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"True"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"typeName":{"identifier":"Ord"}},"qualification":null},{"reference":{"otherSlice":1435151082723044833},"usedName":{"typeName":{"identifier":"Set"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null}],"fragment":["splitMember :: Ord a => a -> Set a -> (Set a, Bool, Set a)","splitMember _ Tip = (Tip, False, Tip)\nsplitMember x (Bin _ y l r)\n  = case compare x y of\n        LT -> let (lt, found, gt) = splitMember x l\n                  gt' = link y gt r\n                in gt' `seq` (lt, found, gt')\n        GT -> let (lt, found, gt) = splitMember x r\n                  lt' = link y l lt\n                in lt' `seq` (lt', found, gt)\n        EQ -> (l, True, r)"],"instances":[],"language":{"extensions":["DeriveDataTypeable","StandaloneDeriving","RoleAnnotations","TypeFamilies","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}