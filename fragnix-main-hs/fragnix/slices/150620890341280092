{"sliceID":150620890341280092,"uses":[{"reference":{"otherSlice":7233619382983855062},"usedName":{"constructorName":{"identifier":"Empty"},"constructorTypeName":{"identifier":"ByteString"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"EQ"},"constructorTypeName":{"identifier":"Ordering"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"LT"},"constructorTypeName":{"identifier":"Ordering"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"GT"},"constructorTypeName":{"identifier":"Ordering"}},"qualification":null},{"reference":{"otherSlice":7233619382983855062},"usedName":{"constructorName":{"identifier":"Chunk"},"constructorTypeName":{"identifier":"ByteString"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"compare"}},"qualification":null},{"reference":{"otherSlice":7235567377809295464},"usedName":{"valueName":{"identifier":"length"}},"qualification":"S"},{"reference":{"otherSlice":380767506459821795},"usedName":{"valueName":{"identifier":"take"}},"qualification":"S"},{"reference":{"otherSlice":3748312495235440417},"usedName":{"valueName":{"identifier":"drop"}},"qualification":"S"},{"reference":{"otherSlice":7233619382983855062},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Ordering"}},"qualification":null}],"fragment":["cmp :: ByteString -> ByteString -> Ordering","cmp Empty Empty = EQ\ncmp Empty _ = LT\ncmp _ Empty = GT\ncmp (Chunk a as) (Chunk b bs)\n  = case compare (S.length a) (S.length b) of\n        LT -> case compare a (S.take (S.length a) b) of\n                  EQ -> cmp as (Chunk (S.drop (S.length a) b) bs)\n                  result -> result\n        EQ -> case compare a b of\n                  EQ -> cmp as bs\n                  result -> result\n        GT -> case compare (S.take (S.length b) a) b of\n                  EQ -> cmp (Chunk (S.drop (S.length b) a) as) bs\n                  result -> result"],"instances":[],"language":{"extensions":["ForeignFunctionInterface","BangPatterns","DeriveDataTypeable","Unsafe","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}