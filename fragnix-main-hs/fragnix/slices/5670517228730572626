{"sliceID":5670517228730572626,"uses":[{"reference":{"otherSlice":1254073128444822395},"usedName":{"constructorName":{"identifier":"Stream"},"constructorTypeName":{"identifier":"Stream"}},"qualification":null},{"reference":{"otherSlice":2520777686612679157},"usedName":{"constructorName":{"identifier":"DropWhile_Drop"},"constructorTypeName":{"identifier":"DropWhile"}},"qualification":null},{"reference":{"otherSlice":2120320550836080743},"usedName":{"constructorName":{"identifier":"Yield"},"constructorTypeName":{"identifier":"Step"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":2120320550836080743},"usedName":{"constructorName":{"identifier":"Skip"},"constructorTypeName":{"identifier":"Step"}},"qualification":null},{"reference":{"otherSlice":2520777686612679157},"usedName":{"constructorName":{"identifier":"DropWhile_Yield"},"constructorTypeName":{"identifier":"DropWhile"}},"qualification":null},{"reference":{"otherSlice":2120320550836080743},"usedName":{"constructorName":{"identifier":"Done"},"constructorTypeName":{"identifier":"Step"}},"qualification":null},{"reference":{"otherSlice":2520777686612679157},"usedName":{"constructorName":{"identifier":"DropWhile_Next"},"constructorTypeName":{"identifier":"DropWhile"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"liftM"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Monad"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":1254073128444822395},"usedName":{"typeName":{"identifier":"Stream"}},"qualification":null}],"fragment":["dropWhileM :: Monad m => (a -> m Bool) -> Stream m a -> Stream m a","dropWhileM f (Stream step t) = Stream step' (DropWhile_Drop t)\n  where {-# INLINE [0] step' #-}\n        step' (DropWhile_Drop s)\n          = do r <- step s\n               case r of\n                   Yield x s' -> do b <- f x\n                                    return $\n                                      if b then Skip (DropWhile_Drop s') else\n                                        Skip (DropWhile_Yield x s')\n                   Skip s' -> return $ Skip (DropWhile_Drop s')\n                   Done -> return $ Done\n        step' (DropWhile_Yield x s) = return $ Yield x (DropWhile_Next s)\n        step' (DropWhile_Next s)\n          = liftM\n              (\\ r ->\n                 case r of\n                     Yield x s' -> Skip (DropWhile_Yield x s')\n                     Skip s' -> Skip (DropWhile_Next s')\n                     Done -> Done)\n              (step s)"],"instances":[],"language":{"extensions":["ExistentialQuantification","MultiParamTypeClasses","FlexibleInstances","Rank2Types","BangPatterns","KindSignatures","GADTs","ScopedTypeVariables","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}