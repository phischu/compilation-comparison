{"sliceID":2754729206829955327,"uses":[{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"typeName":{"identifier":"Eq"}},"qualification":null},{"reference":{"otherSlice":7421561743090722311},"usedName":{"typeName":{"identifier":"Array"}},"qualification":"A"},{"reference":{"otherSlice":9205917895425065335},"usedName":{"typeName":{"identifier":"Leaf"}},"qualification":null},{"reference":{"otherSlice":209150371396664684},"usedName":{"valueName":{"identifier":"length"}},"qualification":"A"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">="}},"qualification":null},{"reference":{"otherSlice":4624303957607166275},"usedName":{"valueName":{"identifier":"run"}},"qualification":"A"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":7916845059951741125},"usedName":{"valueName":{"identifier":"new_"}},"qualification":"A"},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":4823769411026476667},"usedName":{"valueName":{"identifier":"copy"}},"qualification":"A"},{"reference":{"otherSlice":5770064233821844047},"usedName":{"valueName":{"identifier":"write"}},"qualification":"A"},{"reference":{"otherSlice":9205917895425065335},"usedName":{"constructorName":{"identifier":"L"},"constructorTypeName":{"identifier":"Leaf"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":7169929954465792251},"usedName":{"valueName":{"identifier":"index"}},"qualification":"A"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":6823621386513732780},"usedName":{"valueName":{"identifier":"update"}},"qualification":"A"}],"fragment":["updateOrSnocWithKey ::\n                      Eq k =>\n                      (k -> v -> v -> v) ->\n                        k -> v -> A.Array (Leaf k v) -> A.Array (Leaf k v)","updateOrSnocWithKey f k0 v0 ary0 = go k0 v0 ary0 0 (A.length ary0)\n  where go !k v !ary !i !n\n          | i >= n =\n            A.run $\n              do mary <- A.new_ (n + 1)\n                 A.copy ary 0 mary 0 n\n                 A.write mary n (L k v)\n                 return mary\n          | otherwise =\n            case A.index ary i of\n                (L kx y) | k == kx -> A.update ary i (L k (f k v y))\n                         | otherwise -> go k v ary (i + 1) n"],"instances":[],"language":{"extensions":["BangPatterns","DeriveDataTypeable","MagicHash","ScopedTypeVariables","PatternGuards","RoleAnnotations","TypeFamilies","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll"],"isInstance":false}}