{"sliceID":5397248427656116905,"uses":[{"reference":{"otherSlice":4132404936174356097},"usedName":{"constructorName":{"identifier":"Stream"},"constructorTypeName":{"identifier":"Stream"}},"qualification":null},{"reference":{"otherSlice":7555484725095959922},"usedName":{"constructorName":{"identifier":"CC"},"constructorTypeName":{"identifier":"CC"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"False"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":4923910788515433777},"usedName":{"constructorName":{"operator":":*:"},"constructorTypeName":{"identifier":"PairS"}},"qualification":null},{"reference":{"otherSlice":2339004113504757537},"usedName":{"constructorName":{"identifier":"Done"},"constructorTypeName":{"identifier":"Step"}},"qualification":null},{"reference":{"otherSlice":2339004113504757537},"usedName":{"constructorName":{"identifier":"Skip"},"constructorTypeName":{"identifier":"Step"}},"qualification":null},{"reference":{"otherSlice":2339004113504757537},"usedName":{"constructorName":{"identifier":"Yield"},"constructorTypeName":{"identifier":"Step"}},"qualification":null},{"reference":{"otherSlice":6302496159944380919},"usedName":{"valueName":{"identifier":"lowerMapping"}},"qualification":null},{"reference":{"otherSlice":182861954176171994},"usedName":{"valueName":{"identifier":"titleMapping"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"Data.Char"},"usedName":{"valueName":{"identifier":"isLetter"}},"qualification":null},{"reference":{"otherSlice":4132404936174356097},"usedName":{"typeName":{"identifier":"Stream"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Char"}},"qualification":null}],"fragment":["toTitle :: Stream Char -> Stream Char","toTitle (Stream next0 s0 len)\n  = Stream next (CC (False :*: s0) '\\NUL' '\\NUL') len\n  where next (CC (letter :*: s) '\\NUL' _)\n          = case next0 s of\n                Done -> Done\n                Skip s' -> Skip (CC (letter :*: s') '\\NUL' '\\NUL')\n                Yield c s' | letter' ->\n                             if letter then lowerMapping c (letter' :*: s') else\n                               titleMapping c (letter' :*: s')\n                           | otherwise -> Yield c (CC (letter' :*: s') '\\NUL' '\\NUL')\n                  where letter' = isLetter c\n        next (CC s a b) = Yield a (CC s b '\\NUL')"],"instances":[],"language":{"extensions":["BangPatterns","MagicHash","Rank2Types","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}