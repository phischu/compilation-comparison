{"sliceID":8608142782080786915,"uses":[{"reference":{"otherSlice":1731443147056097110},"usedName":{"valueName":{"identifier":"lines"}},"qualification":"S8"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":1789281954059536802},"usedName":{"valueName":{"identifier":"filter"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"/="}},"qualification":null},{"reference":{"otherSlice":3180724628931462160},"usedName":{"valueName":{"identifier":"_cr"}},"qualification":null},{"reference":{"otherSlice":3086187158865698534},"usedName":{"valueName":{"identifier":"intercalate"}},"qualification":"S8"},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"valueName":{"identifier":"mapMaybe"}},"qualification":null},{"reference":{"otherSlice":6442903371538422373},"usedName":{"valueName":{"identifier":"uncons"}},"qualification":"S8"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"||"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"Data.Monoid"},"usedName":{"valueName":{"operator":"<>"}},"qualification":null},{"reference":{"otherSlice":4010822550476529195},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":null}],"fragment":["sanitizeHeaderValue :: ByteString -> ByteString","sanitizeHeaderValue v\n  = case S8.lines $ S.filter (/= _cr) v of\n        [] -> \"\"\n        x : xs -> S8.intercalate \"\\r\\n\" (x : mapMaybe addSpaceIfMissing xs)\n  where addSpaceIfMissing line\n          = case S8.uncons line of\n                Nothing -> Nothing\n                Just (first, _) | first == ' ' || first == '\\t' -> Just line\n                                | otherwise -> Just $ \" \" <> line"],"instances":[],"language":{"extensions":["OverloadedStrings","ScopedTypeVariables","TupleSections","RankNTypes","BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}