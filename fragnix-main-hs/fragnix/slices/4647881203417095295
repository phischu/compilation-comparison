{"sliceID":4647881203417095295,"uses":[{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"error"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"++"}},"qualification":null},{"reference":{"otherSlice":340423051304957331},"usedName":{"valueName":{"identifier":"encodeArgs"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"False"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":5961014460351920517},"usedName":{"valueName":{"identifier":"allNullaryToStringTag"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"all"}},"qualification":null},{"reference":{"otherSlice":1632293083861128092},"usedName":{"valueName":{"identifier":"isNullary"}},"qualification":null},{"reference":{"otherSlice":8202299163306084124},"usedName":{"valueName":{"identifier":"conStr"}},"qualification":null},{"reference":{"otherSlice":2460945805699770086},"usedName":{"valueName":{"identifier":"getConName"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"True"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":5961014460351920517},"usedName":{"typeName":{"identifier":"Options"}},"qualification":null}],"fragment":["consToJSON :: Options -> [Con] -> Q Exp","consToJSON _ []\n  = error $\n      \"Data.Aeson.TH.consToJSON: \" ++ \"Not a single constructor given!\"\nconsToJSON opts [con]\n  = do value <- newName \"value\"\n       lam1E (varP value) $ caseE (varE value) [encodeArgs opts False con]\nconsToJSON opts cons\n  = do value <- newName \"value\"\n       lam1E (varP value) $ caseE (varE value) matches\n  where matches\n          | allNullaryToStringTag opts && all isNullary cons =\n            [match (conP conName []) (normalB $ conStr opts conName) [] |\n             con <- cons, let conName = getConName con]\n          | otherwise = [encodeArgs opts True con | con <- cons]"],"instances":[],"language":{"extensions":["FlexibleInstances","IncoherentInstances","NamedFieldPuns","NoImplicitPrelude","OverlappingInstances","TemplateHaskell","UndecidableInstances","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}