{"sliceID":3103466876360881732,"uses":[{"reference":{"builtinModule":"GHC.Prim"},"usedName":{"valueName":{"identifier":"seq"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":3480565206993838535},"usedName":{"valueName":{"identifier":"unstream"}},"qualification":null},{"reference":{"otherSlice":875468918480052381},"usedName":{"valueName":{"identifier":"unbox"}},"qualification":"Bundle"},{"reference":{"otherSlice":6599205412397184998},"usedName":{"valueName":{"identifier":"map"}},"qualification":"Bundle"},{"reference":{"otherSlice":5483074428067105677},"usedName":{"valueName":{"identifier":"stream"}},"qualification":null},{"reference":{"otherSlice":6988752572666542133},"usedName":{"valueName":{"identifier":"length"}},"qualification":null},{"reference":{"otherSlice":2403735926070941450},"usedName":{"valueName":{"identifier":"checkIndex"}},"qualification":"Ck"},{"reference":{"otherSlice":4956884951746098628},"usedName":{"constructorName":{"identifier":"Unsafe"},"constructorTypeName":{"identifier":"Checks"}},"qualification":"Ck"},{"reference":{"otherSlice":8572689894313737623},"usedName":{"valueName":{"identifier":"basicUnsafeIndexM"}},"qualification":null},{"reference":{"otherSlice":8572689894313737623},"usedName":{"typeName":{"identifier":"Vector"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null}],"fragment":["unsafeBackpermute ::\n                    (Vector v a, Vector v Int) => v a -> v Int -> v a","unsafeBackpermute v is\n  = seq v $\n      seq n $ unstream $ Bundle.unbox $ Bundle.map index $ stream is\n  where n = length v\n        \n        {-# INLINE index #-}\n        index i\n          = ((Ck.checkIndex \"Data/Vector/Generic.hs\" 973) Ck.Unsafe)\n              \"unsafeBackpermute\"\n              i\n              n\n              $ basicUnsafeIndexM v i"],"instances":[],"language":{"extensions":["Rank2Types","MultiParamTypeClasses","FlexibleContexts","TypeFamilies","ScopedTypeVariables","BangPatterns","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}