{"sliceID":7572230209893385826,"uses":[{"reference":{"otherSlice":6971457567674446257},"usedName":{"valueName":{"identifier":"zipWithM"}},"qualification":null},{"reference":{"otherSlice":8099031004319445021},"usedName":{"valueName":{"identifier":"zip"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Monad"}},"qualification":null},{"reference":{"otherSlice":1254073128444822395},"usedName":{"typeName":{"identifier":"Stream"}},"qualification":null}],"fragment":["zipWith4M ::\n            Monad m =>\n            (a -> b -> c -> d -> m e) ->\n              Stream m a -> Stream m b -> Stream m c -> Stream m d -> Stream m e","zipWith4M f sa sb sc sd\n  = zipWithM (\\ (a, b) (c, d) -> f a b c d) (zip sa sb) (zip sc sd)"],"instances":[],"language":{"extensions":["ExistentialQuantification","MultiParamTypeClasses","FlexibleInstances","Rank2Types","BangPatterns","KindSignatures","GADTs","ScopedTypeVariables","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}