{"sliceID":3100190218908146489,"uses":[{"reference":{"otherSlice":300514431503665711},"usedName":{"valueName":{"identifier":"foldl'"}},"qualification":"T"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fmap"}},"qualification":null},{"reference":{"otherSlice":7202619932041323363},"usedName":{"valueName":{"identifier":"takeWhile1"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">="}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<="}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"||"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"identifier":"shiftL"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"operator":".|."}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"ord"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"typeName":{"identifier":"Integral"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"typeName":{"identifier":"Bits"}},"qualification":null},{"reference":{"otherSlice":915346971857185237},"usedName":{"typeName":{"identifier":"Parser"}},"qualification":null}],"fragment":["hexadecimal :: (Integral a, Bits a) => Parser a","hexadecimal = T.foldl' step 0 `fmap` takeWhile1 isHexDigit\n  where isHexDigit c\n          = (c >= '0' && c <= '9') ||\n              (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F')\n        step a c\n          | w >= 48 && w <= 57 = (a `shiftL` 4) .|. fromIntegral (w - 48)\n          | w >= 97 = (a `shiftL` 4) .|. fromIntegral (w - 87)\n          | otherwise = (a `shiftL` 4) .|. fromIntegral (w - 55)\n          where w = ord c"],"instances":[],"language":{"extensions":["BangPatterns","FlexibleInstances","TypeSynonymInstances","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}