{"sliceID":2190948584135927019,"uses":[{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"take"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"reverse"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"scanl1"}},"qualification":null},{"reference":{"otherSlice":3970690690701501968},"usedName":{"valueName":{"operator":"</>"}},"qualification":null},{"reference":{"otherSlice":7823257967449662455},"usedName":{"valueName":{"identifier":"splitDirectories"}},"qualification":null},{"reference":{"otherSlice":2838007907868950400},"usedName":{"valueName":{"identifier":"normalise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Exception"},"usedName":{"valueName":{"identifier":"ioError"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"System.IO.Error"},"usedName":{"valueName":{"identifier":"tryIOError"}},"qualification":null},{"reference":{"otherSlice":5996858234423064028},"usedName":{"valueName":{"identifier":"createDirectory"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Right"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Left"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"builtinModule":"System.IO.Error"},"usedName":{"valueName":{"identifier":"isDoesNotExistError"}},"qualification":null},{"reference":{"builtinModule":"System.IO.Error"},"usedName":{"valueName":{"identifier":"isAlreadyExistsError"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"||"}},"qualification":null},{"reference":{"builtinModule":"System.IO.Error"},"usedName":{"valueName":{"identifier":"isPermissionError"}},"qualification":null},{"reference":{"otherSlice":2436560868281621289},"usedName":{"valueName":{"identifier":"pathIsDirectory"}},"qualification":null},{"reference":{"builtinModule":"System.IO.Error"},"usedName":{"valueName":{"identifier":"catchIOError"}},"qualification":null},{"reference":{"builtinModule":"Control.Monad"},"usedName":{"valueName":{"identifier":"unless"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO"},"usedName":{"typeName":{"identifier":"FilePath"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null}],"fragment":["createDirectoryIfMissing :: Bool -> FilePath -> IO ()","createDirectoryIfMissing create_parents path0\n  | create_parents = createDirs (parents path0)\n  | otherwise = createDirs (take 1 (parents path0))\n  where parents\n          = reverse . scanl1 (</>) . splitDirectories . normalise\n        createDirs [] = return ()\n        createDirs (dir : []) = createDir dir ioError\n        createDirs (dir : dirs)\n          = createDir dir $\n              \\ _ ->\n                do createDirs dirs\n                   createDir dir ioError\n        createDir dir notExistHandler\n          = do r <- tryIOError (createDirectory dir)\n               case r of\n                   Right () -> return ()\n                   Left e | isDoesNotExistError e -> notExistHandler e\n                          | isAlreadyExistsError e || isPermissionError e ->\n                            do canIgnore <- pathIsDirectory dir `catchIOError`\n                                              \\ _ -> return (isAlreadyExistsError e)\n                               unless canIgnore (ioError e)\n                          | otherwise -> ioError e"],"instances":[],"language":{"extensions":["MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}