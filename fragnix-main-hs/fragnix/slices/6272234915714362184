{"sliceID":6272234915714362184,"uses":[{"reference":{"builtinModule":"Data.List.NonEmpty"},"usedName":{"typeName":{"identifier":"NonEmpty"}},"qualification":null},{"reference":{"builtinModule":"Data.List.NonEmpty"},"usedName":{"valueName":{"operator":"<|"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"++"}},"qualification":null},{"reference":{"builtinModule":"Data.List.NonEmpty"},"usedName":{"constructorName":{"operator":":|"},"constructorTypeName":{"identifier":"NonEmpty"}},"qualification":null}],"fragment":["uncurryTy :: Type -> (Cxt, NonEmpty Type)","uncurryTy (AppT (AppT ArrowT t1) t2)\n  = let (ctxt, tys) = uncurryTy t2 in (ctxt, t1 <| tys)\nuncurryTy (SigT t _) = uncurryTy t\nuncurryTy (ForallT _ ctxt t)\n  = let (ctxt', tys) = uncurryTy t in (ctxt ++ ctxt', tys)\nuncurryTy t = ([], t :| [])"],"instances":[],"language":{"extensions":["BangPatterns","FlexibleInstances","NamedFieldPuns","NoImplicitPrelude","UndecidableInstances","TemplateHaskellQuotes","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards","TemplateHaskell"],"isInstance":false}}