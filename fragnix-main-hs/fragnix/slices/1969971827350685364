{"sliceID":1969971827350685364,"uses":[{"reference":{"builtinModule":"System.IO.Error"},"usedName":{"valueName":{"identifier":"modifyIOError"}},"qualification":null},{"reference":{"otherSlice":6530490125521528221},"usedName":{"valueName":{"identifier":"ioeAddLocation"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"builtinModule":"System.IO.Error"},"usedName":{"valueName":{"identifier":"ioeSetFileName"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":1775607250812676085},"usedName":{"valueName":{"identifier":"isRelative"}},"qualification":null},{"reference":{"otherSlice":6534682633767302453},"usedName":{"valueName":{"identifier":"getCurrentDirectory"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"takeWhile"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"not"}},"qualification":null},{"reference":{"otherSlice":3968474258878345223},"usedName":{"valueName":{"identifier":"isPathSeparator"}},"qualification":null},{"reference":{"otherSlice":9054281548199752027},"usedName":{"valueName":{"identifier":"takeDrive"}},"qualification":null},{"reference":{"otherSlice":8220468764138365505},"usedName":{"valueName":{"identifier":"splitDrive"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":3970690690701501968},"usedName":{"valueName":{"operator":"</>"}},"qualification":null},{"reference":{"builtinModule":"GHC.Unicode"},"usedName":{"valueName":{"identifier":"toUpper"}},"qualification":null},{"reference":{"builtinModule":"Data.Functor"},"usedName":{"valueName":{"operator":"<$>"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"/="}},"qualification":null},{"reference":{"builtinModule":"Data.Monoid"},"usedName":{"valueName":{"operator":"<>"}},"qualification":null},{"reference":{"otherSlice":5462658786961972180},"usedName":{"valueName":{"identifier":"pathSeparator"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO"},"usedName":{"typeName":{"identifier":"FilePath"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null}],"fragment":["prependCurrentDirectory :: FilePath -> IO FilePath","prependCurrentDirectory path\n  = modifyIOError\n      ((`ioeAddLocation` \"prependCurrentDirectory\") .\n         (`ioeSetFileName` path))\n      $\n      if isRelative path then\n        do cwd <- getCurrentDirectory\n           let curDrive = takeWhile (not . isPathSeparator) (takeDrive cwd)\n           let (drive, subpath) = splitDrive path\n           return . (</> subpath) $\n             case drive of\n                 _ : _ | (toUpper <$> drive) /= (toUpper <$> curDrive) ->\n                         drive <> [pathSeparator]\n                 _ -> cwd\n        else return path"],"instances":[],"language":{"extensions":["MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}