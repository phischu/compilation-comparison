{"sliceID":8548209961791976618,"uses":[{"reference":{"otherSlice":9098680875200963354},"usedName":{"constructorName":{"identifier":"CalendarTime"},"constructorTypeName":{"identifier":"CalendarTime"}},"qualification":null},{"reference":{"builtinModule":"Foreign.C.Types"},"usedName":{"typeName":{"identifier":"CInt"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"||"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">"}},"qualification":null},{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"error"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO"},"usedName":{"valueName":{"identifier":"unsafePerformIO"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"Foreign.Marshal.Alloc"},"usedName":{"valueName":{"identifier":"allocaBytes"}},"qualification":null},{"reference":{"builtinModule":"Foreign.Storable"},"usedName":{"valueName":{"identifier":"pokeByteOff"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"builtinModule":"GHC.Enum"},"usedName":{"valueName":{"identifier":"fromEnum"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"Foreign.Marshal.Error"},"usedName":{"valueName":{"identifier":"throwIf"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":7301396320933232099},"usedName":{"valueName":{"identifier":"mktime"}},"qualification":null},{"reference":{"otherSlice":7416797052146559280},"usedName":{"valueName":{"identifier":"gmtoff"}},"qualification":null},{"reference":{"otherSlice":9116528788975050577},"usedName":{"valueName":{"identifier":"realToInteger"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":4570105521926962804},"usedName":{"constructorName":{"identifier":"TOD"},"constructorTypeName":{"identifier":"ClockTime"}},"qualification":null},{"reference":{"otherSlice":9098680875200963354},"usedName":{"typeName":{"identifier":"CalendarTime"}},"qualification":null},{"reference":{"otherSlice":4570105521926962804},"usedName":{"typeName":{"identifier":"ClockTime"}},"qualification":null}],"fragment":["toClockTime :: CalendarTime -> ClockTime","toClockTime\n  (CalendarTime year mon mday hour minute sec psec _wday _yday\n     _tzname tz _isdst)\n  = let isDst = -1 :: CInt in\n      if psec < 0 || psec > 999999999999 then\n        error \"Time.toClockTime: picoseconds out of range\" else\n        if tz < (-43200) || tz > 50400 then\n          error \"Time.toClockTime: timezone offset out of range\" else\n          unsafePerformIO $\n            do allocaBytes (56) $\n                 \\ p_tm ->\n                   do ((\\ hsc_ptr -> pokeByteOff hsc_ptr 0)) p_tm\n                        (fromIntegral sec :: CInt)\n                      ((\\ hsc_ptr -> pokeByteOff hsc_ptr 4)) p_tm\n                        (fromIntegral minute :: CInt)\n                      ((\\ hsc_ptr -> pokeByteOff hsc_ptr 8)) p_tm\n                        (fromIntegral hour :: CInt)\n                      ((\\ hsc_ptr -> pokeByteOff hsc_ptr 12)) p_tm\n                        (fromIntegral mday :: CInt)\n                      ((\\ hsc_ptr -> pokeByteOff hsc_ptr 16)) p_tm\n                        (fromIntegral (fromEnum mon) :: CInt)\n                      ((\\ hsc_ptr -> pokeByteOff hsc_ptr 20)) p_tm\n                        (fromIntegral year - 1900 :: CInt)\n                      ((\\ hsc_ptr -> pokeByteOff hsc_ptr 32)) p_tm isDst\n                      t <- throwIf (== -1) (\\ _ -> \"Time.toClockTime: invalid input\")\n                             (mktime p_tm)\n                      gmtoffset <- gmtoff p_tm\n                      let res\n                            = realToInteger t - fromIntegral tz + fromIntegral gmtoffset\n                      return (TOD res psec)"],"instances":[],"language":{"extensions":["MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}