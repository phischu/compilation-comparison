{"sliceID":8690797344715920909,"uses":[{"reference":{"otherSlice":985012931453993274},"usedName":{"valueName":{"identifier":"length"}},"qualification":"A"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">="}},"qualification":null},{"reference":{"otherSlice":4894374637017245596},"usedName":{"valueName":{"identifier":"run"}},"qualification":"A"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":1192963377051949147},"usedName":{"valueName":{"identifier":"new_"}},"qualification":"A"},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":3612670459716047767},"usedName":{"valueName":{"identifier":"copy"}},"qualification":"A"},{"reference":{"otherSlice":2897069700199654731},"usedName":{"valueName":{"identifier":"write"}},"qualification":"A"},{"reference":{"otherSlice":9131127258957915120},"usedName":{"constructorName":{"identifier":"L"},"constructorTypeName":{"identifier":"Leaf"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":4390823793232384339},"usedName":{"valueName":{"identifier":"index"}},"qualification":"A"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":5568294325725640449},"usedName":{"valueName":{"identifier":"update"}},"qualification":"A"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"typeName":{"identifier":"Eq"}},"qualification":null},{"reference":{"otherSlice":2678150379926168295},"usedName":{"typeName":{"identifier":"Array"}},"qualification":"A"},{"reference":{"otherSlice":9131127258957915120},"usedName":{"typeName":{"identifier":"Leaf"}},"qualification":null}],"fragment":["updateOrSnocWith ::\n                   Eq k =>\n                   (v -> v -> v) -> k -> v -> A.Array (Leaf k v) -> A.Array (Leaf k v)","updateOrSnocWith f k0 v0 ary0 = go k0 v0 ary0 0 (A.length ary0)\n  where go !k v !ary !i !n\n          | i >= n =\n            A.run $\n              do mary <- A.new_ (n + 1)\n                 A.copy ary 0 mary 0 n\n                 A.write mary n (L k v)\n                 return mary\n          | otherwise =\n            case A.index ary i of\n                (L kx y) | k == kx -> A.update ary i (L k (f v y))\n                         | otherwise -> go k v ary (i + 1) n"],"instances":[],"language":{"extensions":["BangPatterns","DeriveDataTypeable","MagicHash","ScopedTypeVariables","TypeFamilies","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}