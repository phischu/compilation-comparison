{"sliceID":3548686766426140881,"uses":[{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Applicative"}},"qualification":null},{"reference":{"otherSlice":6497888655579684852},"usedName":{"typeName":{"identifier":"SmallArray"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"pure"}},"qualification":null},{"reference":{"otherSlice":7806011641631011927},"usedName":{"valueName":{"identifier":"createSmallArray"}},"qualification":null},{"reference":{"otherSlice":8484253100598478685},"usedName":{"valueName":{"identifier":"noOp"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"*>"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"*"}},"qualification":null},{"reference":{"otherSlice":2833989017205590612},"usedName":{"valueName":{"identifier":"die"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"Data.Function"},"usedName":{"valueName":{"identifier":"fix"}},"qualification":null},{"reference":{"otherSlice":9036649515903686607},"usedName":{"valueName":{"operator":"?"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"when"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"otherSlice":2018079638780074869},"usedName":{"valueName":{"identifier":"copySmallArray"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"length"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"<*"}},"qualification":null},{"reference":{"otherSlice":1051985424738612364},"usedName":{"valueName":{"identifier":"indexSmallArray"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"otherSlice":6346859743251984807},"usedName":{"valueName":{"identifier":"writeSmallArray"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"<*>"}},"qualification":null}],"fragment":["instance Applicative SmallArray where\n        pure x = createSmallArray 1 x noOp\n        sa *> sb\n          = createSmallArray (la * lb) (die \"*>\" \"impossible\") $\n              \\ smb ->\n                fix ? 0 $\n                  \\ go i ->\n                    when (i < la) $ copySmallArray smb 0 sb 0 lb *> go (i + 1)\n          where la = length sa\n                lb = length sb\n        sa <* sb\n          = createSmallArray (la * lb) (indexSmallArray sa $ la - 1) $\n              \\ sma ->\n                fix ? 0 $\n                  \\ outer i ->\n                    when (i < la - 1) $\n                      do let a = indexSmallArray sa i\n                         fix ? 0 $\n                           \\ inner j ->\n                             when (j < lb) $ writeSmallArray sma (la * i + j) a *> inner (j + 1)\n                         outer $ i + 1\n          where la = length sa\n                lb = length sb\n        sf <*> sx\n          = createSmallArray (lf * lx) (die \"<*>\" \"impossible\") $\n              \\ smb ->\n                fix ? 0 $\n                  \\ outer i ->\n                    when (i < lf) $\n                      do let f = indexSmallArray sf i\n                         fix ? 0 $\n                           \\ inner j ->\n                             when (j < lx) $\n                               writeSmallArray smb (lf * i + j) (f $ indexSmallArray sx j) *>\n                                 inner (j + 1)\n                         outer $ i + 1\n          where lf = length sf\n                lx = length sx"],"instances":[],"language":{"extensions":["MagicHash","RankNTypes","TypeFamilies","UnboxedTuples","DeriveTraversable","DeriveDataTypeable","GeneralizedNewtypeDeriving","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":true}}