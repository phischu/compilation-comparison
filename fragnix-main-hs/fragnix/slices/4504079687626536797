{"sliceID":4504079687626536797,"uses":[{"reference":{"otherSlice":8413007277180029656},"usedName":{"constructorName":{"identifier":"Nil"},"constructorTypeName":{"identifier":"IntPSQ"}},"qualification":null},{"reference":{"otherSlice":8413007277180029656},"usedName":{"constructorName":{"identifier":"Tip"},"constructorTypeName":{"identifier":"IntPSQ"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"otherSlice":3362906547655862956},"usedName":{"valueName":{"identifier":"link"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":8413007277180029656},"usedName":{"constructorName":{"identifier":"Bin"},"constructorTypeName":{"identifier":"IntPSQ"}},"qualification":null},{"reference":{"otherSlice":247008661947521003},"usedName":{"valueName":{"identifier":"nomatch"}},"qualification":null},{"reference":{"otherSlice":6056057948688620316},"usedName":{"valueName":{"identifier":"merge"}},"qualification":null},{"reference":{"otherSlice":4077878355053370175},"usedName":{"valueName":{"identifier":"zero"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"typeName":{"identifier":"Ord"}},"qualification":null},{"reference":{"otherSlice":8719169224608495092},"usedName":{"typeName":{"identifier":"Key"}},"qualification":null},{"reference":{"otherSlice":8413007277180029656},"usedName":{"typeName":{"identifier":"IntPSQ"}},"qualification":null}],"fragment":["unsafeInsertNew ::\n                  Ord p => Key -> p -> v -> IntPSQ p v -> IntPSQ p v","unsafeInsertNew k p x = go\n  where go t\n          = case t of\n                Nil -> Tip k p x\n                Tip k' p' x' | (p, k) < (p', k') -> link k p x k' t Nil\n                             | otherwise -> link k' p' x' k (Tip k p x) Nil\n                Bin k' p' x' m l r | nomatch k k' m ->\n                                     if (p, k) < (p', k') then link k p x k' t Nil else\n                                       link k' p' x' k (Tip k p x) (merge m l r)\n                                   | otherwise ->\n                                     if (p, k) < (p', k') then\n                                       if zero k' m then Bin k p x m (unsafeInsertNew k' p' x' l) r\n                                         else Bin k p x m l (unsafeInsertNew k' p' x' r)\n                                       else\n                                       if zero k m then Bin k' p' x' m (unsafeInsertNew k p x l) r\n                                         else Bin k' p' x' m l (unsafeInsertNew k p x r)"],"instances":[],"language":{"extensions":["BangPatterns","DeriveFoldable","DeriveFunctor","DeriveTraversable","UnboxedTuples","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}