{"sliceID":8673508329598681772,"uses":[{"reference":{"otherSlice":9208044541903137161},"usedName":{"constructorName":{"identifier":"Seq"},"constructorTypeName":{"identifier":"Seq"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"otherSlice":3555949835188142327},"usedName":{"typeName":{"identifier":"Elem"}},"qualification":null},{"reference":{"otherSlice":2103754850612341338},"usedName":{"typeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"otherSlice":2103754850612341338},"usedName":{"constructorName":{"identifier":"EmptyT"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"otherSlice":2103754850612341338},"usedName":{"constructorName":{"identifier":"Single"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"otherSlice":2103754850612341338},"usedName":{"constructorName":{"identifier":"Deep"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"otherSlice":6856618864151171204},"usedName":{"constructorName":{"identifier":"One"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"otherSlice":6856618864151171204},"usedName":{"constructorName":{"identifier":"Two"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"otherSlice":6856618864151171204},"usedName":{"constructorName":{"identifier":"Three"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"otherSlice":1673753023314990609},"usedName":{"constructorName":{"identifier":"Node3"},"constructorTypeName":{"identifier":"Node"}},"qualification":null},{"reference":{"otherSlice":6856618864151171204},"usedName":{"typeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"otherSlice":1673753023314990609},"usedName":{"typeName":{"identifier":"Node"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":2658389187921074114},"usedName":{"valueName":{"identifier":"size"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"otherSlice":7122852752494258},"usedName":{"typeName":{"identifier":"ListFinal"}},"qualification":null},{"reference":{"otherSlice":7122852752494258},"usedName":{"constructorName":{"identifier":"LFinal"},"constructorTypeName":{"identifier":"ListFinal"}},"qualification":null},{"reference":{"otherSlice":7122852752494258},"usedName":{"constructorName":{"identifier":"LCons"},"constructorTypeName":{"identifier":"ListFinal"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"*"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$!"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Prim"},"usedName":{"valueName":{"identifier":"coerce"}},"qualification":null},{"reference":{"otherSlice":9208044541903137161},"usedName":{"typeName":{"identifier":"Seq"}},"qualification":null},{"reference":{"otherSlice":3555949835188142327},"usedName":{"constructorName":{"identifier":"Elem"},"constructorTypeName":{"identifier":"Elem"}},"qualification":null},{"reference":{"otherSlice":6856618864151171204},"usedName":{"constructorName":{"identifier":"Four"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"otherSlice":1673753023314990609},"usedName":{"constructorName":{"identifier":"Node2"},"constructorTypeName":{"identifier":"Node"}},"qualification":null}],"fragment":["fromList :: [a] -> Seq a","fromList = Seq . mkTree . map_elem\n  where mkTree :: forall a' . [Elem a'] -> FingerTree (Elem a')\n        mkTree [] = EmptyT\n        mkTree [x1] = Single x1\n        mkTree [x1, x2] = Deep 2 (One x1) EmptyT (One x2)\n        mkTree [x1, x2, x3] = Deep 3 (Two x1 x2) EmptyT (One x3)\n        mkTree [x1, x2, x3, x4] = Deep 4 (Two x1 x2) EmptyT (Two x3 x4)\n        mkTree [x1, x2, x3, x4, x5]\n          = Deep 5 (Three x1 x2 x3) EmptyT (Two x4 x5)\n        mkTree [x1, x2, x3, x4, x5, x6]\n          = Deep 6 (Three x1 x2 x3) EmptyT (Three x4 x5 x6)\n        mkTree [x1, x2, x3, x4, x5, x6, x7]\n          = Deep 7 (Two x1 x2) (Single (Node3 3 x3 x4 x5)) (Two x6 x7)\n        mkTree [x1, x2, x3, x4, x5, x6, x7, x8]\n          = Deep 8 (Three x1 x2 x3) (Single (Node3 3 x4 x5 x6)) (Two x7 x8)\n        mkTree [x1, x2, x3, x4, x5, x6, x7, x8, x9]\n          = Deep 9 (Three x1 x2 x3) (Single (Node3 3 x4 x5 x6))\n              (Three x7 x8 x9)\n        mkTree [x1, x2, x3, x4, x5, x6, x7, x8, y0, y1]\n          = Deep 10 (Two x1 x2)\n              (Deep 6 (One (Node3 3 x3 x4 x5)) EmptyT (One (Node3 3 x6 x7 x8)))\n              (Two y0 y1)\n        mkTree [x1, x2, x3, x4, x5, x6, x7, x8, x9, y0, y1]\n          = Deep 11 (Three x1 x2 x3)\n              (Deep 6 (One (Node3 3 x4 x5 x6)) EmptyT (One (Node3 3 x7 x8 x9)))\n              (Two y0 y1)\n        mkTree [x1, x2, x3, x4, x5, x6, x7, x8, x9, y0, y1, y2]\n          = Deep 12 (Three x1 x2 x3)\n              (Deep 6 (One (Node3 3 x4 x5 x6)) EmptyT (One (Node3 3 x7 x8 x9)))\n              (Three y0 y1 y2)\n        mkTree [x1, x2, x3, x4, x5, x6, x7, x8, y0, y1, y2, y3, y4]\n          = Deep 13 (Two x1 x2)\n              (Deep 9 (Two (Node3 3 x3 x4 x5) (Node3 3 x6 x7 x8)) EmptyT\n                 (One (Node3 3 y0 y1 y2)))\n              (Two y3 y4)\n        mkTree [x1, x2, x3, x4, x5, x6, x7, x8, x9, y0, y1, y2, y3, y4]\n          = Deep 14 (Three x1 x2 x3)\n              (Deep 9 (Two (Node3 3 x4 x5 x6) (Node3 3 x7 x8 x9)) EmptyT\n                 (One (Node3 3 y0 y1 y2)))\n              (Two y3 y4)\n        mkTree [x1, x2, x3, x4, x5, x6, x7, x8, x9, y0, y1, y2, y3, y4, y5]\n          = Deep 15 (Three x1 x2 x3)\n              (Deep 9 (Two (Node3 3 x4 x5 x6) (Node3 3 x7 x8 x9)) EmptyT\n                 (One (Node3 3 y0 y1 y2)))\n              (Three y3 y4 y5)\n        mkTree\n          (x1 :\n             (x2 :\n                (x3 :\n                   (x4 :\n                      (x5 :\n                         (x6 :\n                            (x7 :\n                               (x8 :\n                                  (x9 : (y0 : (y1 : (y2 : (y3 : (y4 : (y5 : (y6 : xs))))))))))))))))\n          = mkTreeC cont 9 (getNodes 3 (Node3 3 y3 y4 y5) y6 xs)\n          where d2 = Three x1 x2 x3\n                d1 = Three (Node3 3 x4 x5 x6) (Node3 3 x7 x8 x9) (Node3 3 y0 y1 y2)\n                \n                cont ::\n                     (Digit (Node (Elem a')), Digit (Elem a')) ->\n                       FingerTree (Node (Node (Elem a'))) -> FingerTree (Elem a')\n                cont (!r1, !r2) !sub\n                  = let !sub1 = Deep (9 + size r1 + size sub) d1 sub r1 in\n                      Deep (3 + size r2 + size sub1) d2 sub1 r2\n        \n        getNodes ::\n                 forall a .\n                   Int ->\n                     Node a ->\n                       a -> [a] -> ListFinal (Node (Node a)) (Digit (Node a), Digit a)\n        getNodes !_ n1 x1 [] = LFinal (One n1, One x1)\n        getNodes _ n1 x1 [x2] = LFinal (One n1, Two x1 x2)\n        getNodes _ n1 x1 [x2, x3] = LFinal (One n1, Three x1 x2 x3)\n        getNodes s n1 x1 [x2, x3, x4]\n          = LFinal (Two n1 (Node3 s x1 x2 x3), One x4)\n        getNodes s n1 x1 [x2, x3, x4, x5]\n          = LFinal (Two n1 (Node3 s x1 x2 x3), Two x4 x5)\n        getNodes s n1 x1 [x2, x3, x4, x5, x6]\n          = LFinal (Two n1 (Node3 s x1 x2 x3), Three x4 x5 x6)\n        getNodes s n1 x1 [x2, x3, x4, x5, x6, x7]\n          = LFinal (Three n1 (Node3 s x1 x2 x3) (Node3 s x4 x5 x6), One x7)\n        getNodes s n1 x1 [x2, x3, x4, x5, x6, x7, x8]\n          = LFinal\n              (Three n1 (Node3 s x1 x2 x3) (Node3 s x4 x5 x6), Two x7 x8)\n        getNodes s n1 x1 [x2, x3, x4, x5, x6, x7, x8, x9]\n          = LFinal\n              (Three n1 (Node3 s x1 x2 x3) (Node3 s x4 x5 x6), Three x7 x8 x9)\n        getNodes s n1 x1\n          (x2 : (x3 : (x4 : (x5 : (x6 : (x7 : (x8 : (x9 : (x10 : xs)))))))))\n          = LCons n10 (getNodes s (Node3 s x7 x8 x9) x10 xs)\n          where !n2 = Node3 s x1 x2 x3\n                !n3 = Node3 s x4 x5 x6\n                !n10 = Node3 (3 * s) n1 n2 n3\n        \n        mkTreeC ::\n                forall a b c .\n                  (b -> FingerTree (Node a) -> c) -> Int -> ListFinal (Node a) b -> c\n        mkTreeC cont !_ (LFinal b) = cont b EmptyT\n        mkTreeC cont _ (LCons x1 (LFinal b)) = cont b (Single x1)\n        mkTreeC cont s (LCons x1 (LCons x2 (LFinal b)))\n          = cont b (Deep (2 * s) (One x1) EmptyT (One x2))\n        mkTreeC cont s (LCons x1 (LCons x2 (LCons x3 (LFinal b))))\n          = cont b (Deep (3 * s) (Two x1 x2) EmptyT (One x3))\n        mkTreeC cont s\n          (LCons x1 (LCons x2 (LCons x3 (LCons x4 (LFinal b)))))\n          = cont b (Deep (4 * s) (Two x1 x2) EmptyT (Two x3 x4))\n        mkTreeC cont s\n          (LCons x1 (LCons x2 (LCons x3 (LCons x4 (LCons x5 (LFinal b))))))\n          = cont b (Deep (5 * s) (Three x1 x2 x3) EmptyT (Two x4 x5))\n        mkTreeC cont s\n          (LCons x1\n             (LCons x2 (LCons x3 (LCons x4 (LCons x5 (LCons x6 (LFinal b)))))))\n          = cont b (Deep (6 * s) (Three x1 x2 x3) EmptyT (Three x4 x5 x6))\n        mkTreeC cont s\n          (LCons x1\n             (LCons x2\n                (LCons x3 (LCons x4 (LCons x5 (LCons x6 (LCons x7 (LFinal b))))))))\n          = cont b\n              (Deep (7 * s) (Two x1 x2) (Single (Node3 (3 * s) x3 x4 x5))\n                 (Two x6 x7))\n        mkTreeC cont s\n          (LCons x1\n             (LCons x2\n                (LCons x3\n                   (LCons x4\n                      (LCons x5 (LCons x6 (LCons x7 (LCons x8 (LFinal b)))))))))\n          = cont b\n              (Deep (8 * s) (Three x1 x2 x3) (Single (Node3 (3 * s) x4 x5 x6))\n                 (Two x7 x8))\n        mkTreeC cont s\n          (LCons x1\n             (LCons x2\n                (LCons x3\n                   (LCons x4\n                      (LCons x5\n                         (LCons x6 (LCons x7 (LCons x8 (LCons x9 (LFinal b))))))))))\n          = cont b\n              (Deep (9 * s) (Three x1 x2 x3) (Single (Node3 (3 * s) x4 x5 x6))\n                 (Three x7 x8 x9))\n        mkTreeC cont s\n          (LCons x1\n             (LCons x2\n                (LCons x3\n                   (LCons x4\n                      (LCons x5\n                         (LCons x6\n                            (LCons x7 (LCons x8 (LCons y0 (LCons y1 (LFinal b)))))))))))\n          = cont b\n              (Deep (10 * s) (Two x1 x2)\n                 (Deep (6 * s) (One (Node3 (3 * s) x3 x4 x5)) EmptyT\n                    (One (Node3 (3 * s) x6 x7 x8)))\n                 (Two y0 y1))\n        mkTreeC cont s\n          (LCons x1\n             (LCons x2\n                (LCons x3\n                   (LCons x4\n                      (LCons x5\n                         (LCons x6\n                            (LCons x7\n                               (LCons x8 (LCons x9 (LCons y0 (LCons y1 (LFinal b))))))))))))\n          = cont b\n              (Deep (11 * s) (Three x1 x2 x3)\n                 (Deep (6 * s) (One (Node3 (3 * s) x4 x5 x6)) EmptyT\n                    (One (Node3 (3 * s) x7 x8 x9)))\n                 (Two y0 y1))\n        mkTreeC cont s\n          (LCons x1\n             (LCons x2\n                (LCons x3\n                   (LCons x4\n                      (LCons x5\n                         (LCons x6\n                            (LCons x7\n                               (LCons x8\n                                  (LCons x9 (LCons y0 (LCons y1 (LCons y2 (LFinal b)))))))))))))\n          = cont b\n              (Deep (12 * s) (Three x1 x2 x3)\n                 (Deep (6 * s) (One (Node3 (3 * s) x4 x5 x6)) EmptyT\n                    (One (Node3 (3 * s) x7 x8 x9)))\n                 (Three y0 y1 y2))\n        mkTreeC cont s\n          (LCons x1\n             (LCons x2\n                (LCons x3\n                   (LCons x4\n                      (LCons x5\n                         (LCons x6\n                            (LCons x7\n                               (LCons x8\n                                  (LCons y0\n                                     (LCons y1 (LCons y2 (LCons y3 (LCons y4 (LFinal b))))))))))))))\n          = cont b\n              (Deep (13 * s) (Two x1 x2)\n                 (Deep (9 * s)\n                    (Two (Node3 (3 * s) x3 x4 x5) (Node3 (3 * s) x6 x7 x8))\n                    EmptyT\n                    (One (Node3 (3 * s) y0 y1 y2)))\n                 (Two y3 y4))\n        mkTreeC cont s\n          (LCons x1\n             (LCons x2\n                (LCons x3\n                   (LCons x4\n                      (LCons x5\n                         (LCons x6\n                            (LCons x7\n                               (LCons x8\n                                  (LCons x9\n                                     (LCons y0\n                                        (LCons y1\n                                           (LCons y2 (LCons y3 (LCons y4 (LFinal b)))))))))))))))\n          = cont b\n              (Deep (14 * s) (Three x1 x2 x3)\n                 (Deep (9 * s)\n                    (Two (Node3 (3 * s) x4 x5 x6) (Node3 (3 * s) x7 x8 x9))\n                    EmptyT\n                    (One (Node3 (3 * s) y0 y1 y2)))\n                 (Two y3 y4))\n        mkTreeC cont s\n          (LCons x1\n             (LCons x2\n                (LCons x3\n                   (LCons x4\n                      (LCons x5\n                         (LCons x6\n                            (LCons x7\n                               (LCons x8\n                                  (LCons x9\n                                     (LCons y0\n                                        (LCons y1\n                                           (LCons y2\n                                              (LCons y3\n                                                 (LCons y4 (LCons y5 (LFinal b))))))))))))))))\n          = cont b\n              (Deep (15 * s) (Three x1 x2 x3)\n                 (Deep (9 * s)\n                    (Two (Node3 (3 * s) x4 x5 x6) (Node3 (3 * s) x7 x8 x9))\n                    EmptyT\n                    (One (Node3 (3 * s) y0 y1 y2)))\n                 (Three y3 y4 y5))\n        mkTreeC cont s\n          (LCons x1\n             (LCons x2\n                (LCons x3\n                   (LCons x4\n                      (LCons x5\n                         (LCons x6\n                            (LCons x7\n                               (LCons x8\n                                  (LCons x9\n                                     (LCons y0\n                                        (LCons y1\n                                           (LCons y2\n                                              (LCons y3\n                                                 (LCons y4 (LCons y5 (LCons y6 xs))))))))))))))))\n          = mkTreeC cont2 (9 * s)\n              (getNodesC (3 * s) (Node3 (3 * s) y3 y4 y5) y6 xs)\n          where cont2 ::\n                      (b, Digit (Node (Node a)), Digit (Node a)) ->\n                        FingerTree (Node (Node (Node a))) -> c\n                cont2 (b, r1, r2) !sub\n                  = let d2 = Three x1 x2 x3\n                        d1\n                          = Three (Node3 (3 * s) x4 x5 x6) (Node3 (3 * s) x7 x8 x9)\n                              (Node3 (3 * s) y0 y1 y2)\n                        !sub1 = Deep (9 * s + size r1 + size sub) d1 sub r1\n                      in cont b $! Deep (3 * s + size r2 + size sub1) d2 sub1 r2\n        \n        getNodesC ::\n                  Int ->\n                    Node a ->\n                      a ->\n                        ListFinal a b ->\n                          ListFinal (Node (Node a)) (b, Digit (Node a), Digit a)\n        getNodesC !_ n1 x1 (LFinal b) = LFinal $ (b, One n1, One x1)\n        getNodesC _ n1 x1 (LCons x2 (LFinal b))\n          = LFinal $ (b, One n1, Two x1 x2)\n        getNodesC _ n1 x1 (LCons x2 (LCons x3 (LFinal b)))\n          = LFinal $ (b, One n1, Three x1 x2 x3)\n        getNodesC s n1 x1 (LCons x2 (LCons x3 (LCons x4 (LFinal b))))\n          = let !n2 = Node3 s x1 x2 x3 in LFinal $ (b, Two n1 n2, One x4)\n        getNodesC s n1 x1\n          (LCons x2 (LCons x3 (LCons x4 (LCons x5 (LFinal b)))))\n          = let !n2 = Node3 s x1 x2 x3 in LFinal $ (b, Two n1 n2, Two x4 x5)\n        getNodesC s n1 x1\n          (LCons x2 (LCons x3 (LCons x4 (LCons x5 (LCons x6 (LFinal b))))))\n          = let !n2 = Node3 s x1 x2 x3 in\n              LFinal $ (b, Two n1 n2, Three x4 x5 x6)\n        getNodesC s n1 x1\n          (LCons x2\n             (LCons x3 (LCons x4 (LCons x5 (LCons x6 (LCons x7 (LFinal b)))))))\n          = let !n2 = Node3 s x1 x2 x3\n                !n3 = Node3 s x4 x5 x6\n              in LFinal $ (b, Three n1 n2 n3, One x7)\n        getNodesC s n1 x1\n          (LCons x2\n             (LCons x3\n                (LCons x4 (LCons x5 (LCons x6 (LCons x7 (LCons x8 (LFinal b))))))))\n          = let !n2 = Node3 s x1 x2 x3\n                !n3 = Node3 s x4 x5 x6\n              in LFinal $ (b, Three n1 n2 n3, Two x7 x8)\n        getNodesC s n1 x1\n          (LCons x2\n             (LCons x3\n                (LCons x4\n                   (LCons x5\n                      (LCons x6 (LCons x7 (LCons x8 (LCons x9 (LFinal b)))))))))\n          = let !n2 = Node3 s x1 x2 x3\n                !n3 = Node3 s x4 x5 x6\n              in LFinal $ (b, Three n1 n2 n3, Three x7 x8 x9)\n        getNodesC s n1 x1\n          (LCons x2\n             (LCons x3\n                (LCons x4\n                   (LCons x5\n                      (LCons x6 (LCons x7 (LCons x8 (LCons x9 (LCons x10 xs)))))))))\n          = LCons n10 $ getNodesC s (Node3 s x7 x8 x9) x10 xs\n          where !n2 = Node3 s x1 x2 x3\n                !n3 = Node3 s x4 x5 x6\n                !n10 = Node3 (3 * s) n1 n2 n3\n        \n        map_elem :: [a] -> [Elem a]\n        map_elem xs = coerce xs\n        \n        {-# INLINE map_elem #-}"],"instances":[],"language":{"extensions":["BangPatterns","DeriveDataTypeable","StandaloneDeriving","FlexibleInstances","ScopedTypeVariables","DeriveGeneric","TypeFamilies","PatternSynonyms","ViewPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}