{"sliceID":135557470213203346,"uses":[{"reference":{"otherSlice":8924003398132186113},"usedName":{"constructorName":{"identifier":"Empty"},"constructorTypeName":{"identifier":"HashMap"}},"qualification":null},{"reference":{"otherSlice":8924003398132186113},"usedName":{"constructorName":{"identifier":"Leaf"},"constructorTypeName":{"identifier":"HashMap"}},"qualification":null},{"reference":{"otherSlice":9131127258957915120},"usedName":{"constructorName":{"identifier":"L"},"constructorTypeName":{"identifier":"Leaf"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":4124277165950452858},"usedName":{"valueName":{"identifier":"collision"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":8924003398132186113},"usedName":{"constructorName":{"identifier":"Collision"},"constructorTypeName":{"identifier":"HashMap"}},"qualification":null},{"reference":{"otherSlice":8690797344715920909},"usedName":{"valueName":{"identifier":"updateOrSnocWith"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"flip"}},"qualification":null},{"reference":{"otherSlice":47660262073786283},"usedName":{"valueName":{"identifier":"updateOrConcatWith"}},"qualification":null},{"reference":{"otherSlice":8924003398132186113},"usedName":{"constructorName":{"identifier":"BitmapIndexed"},"constructorTypeName":{"identifier":"HashMap"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"operator":".|."}},"qualification":null},{"reference":{"otherSlice":8573914741828522848},"usedName":{"valueName":{"identifier":"unionArrayBy"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":623902709427273711},"usedName":{"valueName":{"identifier":"bitsPerSubkey"}},"qualification":null},{"reference":{"otherSlice":4500691058432795620},"usedName":{"valueName":{"identifier":"bitmapIndexedOrFull"}},"qualification":null},{"reference":{"otherSlice":8924003398132186113},"usedName":{"constructorName":{"identifier":"Full"},"constructorTypeName":{"identifier":"HashMap"}},"qualification":null},{"reference":{"otherSlice":8782780780252811798},"usedName":{"valueName":{"identifier":"fullNodeMask"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"operator":".&."}},"qualification":null},{"reference":{"otherSlice":6048804599545225467},"usedName":{"valueName":{"identifier":"insert"}},"qualification":"A"},{"reference":{"otherSlice":2918764402661299918},"usedName":{"valueName":{"identifier":"updateWith'"}},"qualification":"A"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":1590864845463237458},"usedName":{"valueName":{"identifier":"mask"}},"qualification":null},{"reference":{"otherSlice":3371961364943610728},"usedName":{"valueName":{"identifier":"sparseIndex"}},"qualification":null},{"reference":{"builtinModule":"Prelude"},"usedName":{"valueName":{"operator":"$!"}},"qualification":null},{"reference":{"otherSlice":5245304807376376639},"usedName":{"valueName":{"identifier":"index"}},"qualification":null},{"reference":{"otherSlice":5533630391524183996},"usedName":{"valueName":{"identifier":"update16With'"}},"qualification":null},{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"error"}},"qualification":null},{"reference":{"otherSlice":393133987522188677},"usedName":{"valueName":{"identifier":"singleton"}},"qualification":"A"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"otherSlice":4133525130794735914},"usedName":{"valueName":{"identifier":"pair"}},"qualification":"A"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"typeName":{"identifier":"Eq"}},"qualification":null},{"reference":{"otherSlice":7954954090554769191},"usedName":{"typeName":{"identifier":"Hashable"}},"qualification":null},{"reference":{"otherSlice":8924003398132186113},"usedName":{"typeName":{"identifier":"HashMap"}},"qualification":null}],"fragment":["unionWith ::\n            (Eq k, Hashable k) =>\n            (v -> v -> v) -> HashMap k v -> HashMap k v -> HashMap k v","unionWith f = go 0\n  where go !_ t1 Empty = t1\n        go _ Empty t2 = t2\n        go s t1@(Leaf h1 l1@(L k1 v1)) t2@(Leaf h2 l2@(L k2 v2))\n          | h1 == h2 =\n            if k1 == k2 then Leaf h1 (L k1 (f v1 v2)) else collision h1 l1 l2\n          | otherwise = goDifferentHash s h1 h2 t1 t2\n        go s t1@(Leaf h1 (L k1 v1)) t2@(Collision h2 ls2)\n          | h1 == h2 = Collision h1 (updateOrSnocWith f k1 v1 ls2)\n          | otherwise = goDifferentHash s h1 h2 t1 t2\n        go s t1@(Collision h1 ls1) t2@(Leaf h2 (L k2 v2))\n          | h1 == h2 = Collision h1 (updateOrSnocWith (flip f) k2 v2 ls1)\n          | otherwise = goDifferentHash s h1 h2 t1 t2\n        go s t1@(Collision h1 ls1) t2@(Collision h2 ls2)\n          | h1 == h2 = Collision h1 (updateOrConcatWith f ls1 ls2)\n          | otherwise = goDifferentHash s h1 h2 t1 t2\n        go s (BitmapIndexed b1 ary1) (BitmapIndexed b2 ary2)\n          = let b' = b1 .|. b2\n                ary' = unionArrayBy (go (s + bitsPerSubkey)) b1 b2 ary1 ary2\n              in bitmapIndexedOrFull b' ary'\n        go s (BitmapIndexed b1 ary1) (Full ary2)\n          = let ary'\n                  = unionArrayBy (go (s + bitsPerSubkey)) b1 fullNodeMask ary1 ary2\n              in Full ary'\n        go s (Full ary1) (BitmapIndexed b2 ary2)\n          = let ary'\n                  = unionArrayBy (go (s + bitsPerSubkey)) fullNodeMask b2 ary1 ary2\n              in Full ary'\n        go s (Full ary1) (Full ary2)\n          = let ary'\n                  = unionArrayBy (go (s + bitsPerSubkey)) fullNodeMask fullNodeMask\n                      ary1\n                      ary2\n              in Full ary'\n        go s (BitmapIndexed b1 ary1) t2\n          | b1 .&. m2 == 0 =\n            let ary' = A.insert ary1 i t2\n                b' = b1 .|. m2\n              in bitmapIndexedOrFull b' ary'\n          | otherwise =\n            let ary'\n                  = A.updateWith' ary1 i $ \\ st1 -> go (s + bitsPerSubkey) st1 t2\n              in BitmapIndexed b1 ary'\n          where h2 = leafHashCode t2\n                m2 = mask h2 s\n                i = sparseIndex b1 m2\n        go s t1 (BitmapIndexed b2 ary2)\n          | b2 .&. m1 == 0 =\n            let ary' = A.insert ary2 i $! t1\n                b' = b2 .|. m1\n              in bitmapIndexedOrFull b' ary'\n          | otherwise =\n            let ary'\n                  = A.updateWith' ary2 i $ \\ st2 -> go (s + bitsPerSubkey) t1 st2\n              in BitmapIndexed b2 ary'\n          where h1 = leafHashCode t1\n                m1 = mask h1 s\n                i = sparseIndex b2 m1\n        go s (Full ary1) t2\n          = let h2 = leafHashCode t2\n                i = index h2 s\n                ary'\n                  = update16With' ary1 i $ \\ st1 -> go (s + bitsPerSubkey) st1 t2\n              in Full ary'\n        go s t1 (Full ary2)\n          = let h1 = leafHashCode t1\n                i = index h1 s\n                ary'\n                  = update16With' ary2 i $ \\ st2 -> go (s + bitsPerSubkey) t1 st2\n              in Full ary'\n        leafHashCode (Leaf h _) = h\n        leafHashCode (Collision h _) = h\n        leafHashCode _ = error \"leafHashCode\"\n        goDifferentHash s h1 h2 t1 t2\n          | m1 == m2 =\n            BitmapIndexed m1 (A.singleton $! go (s + bitsPerSubkey) t1 t2)\n          | m1 < m2 = BitmapIndexed (m1 .|. m2) (A.pair t1 t2)\n          | otherwise = BitmapIndexed (m1 .|. m2) (A.pair t2 t1)\n          where m1 = mask h1 s\n                m2 = mask h2 s"],"instances":[],"language":{"extensions":["BangPatterns","DeriveDataTypeable","MagicHash","ScopedTypeVariables","TypeFamilies","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}