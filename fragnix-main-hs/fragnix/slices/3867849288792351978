{"sliceID":3867849288792351978,"uses":[{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":3377634759521931512},"usedName":{"typeName":{"identifier":"PrimMonad"}},"qualification":null},{"reference":{"otherSlice":3377634759521931512},"usedName":{"typeName":{"identifier":"PrimState"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"*"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":5256657168060225464},"usedName":{"valueName":{"identifier":"check"}},"qualification":"Ck"},{"reference":{"otherSlice":4579156144394400265},"usedName":{"constructorName":{"identifier":"Unsafe"},"constructorTypeName":{"identifier":"Checks"}},"qualification":"Ck"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"not"}},"qualification":null},{"reference":{"builtinModule":"GHC.Prim"},"usedName":{"valueName":{"identifier":"seq"}},"qualification":null},{"reference":{"otherSlice":722674047690492996},"usedName":{"valueName":{"identifier":"checkLength"}},"qualification":"Ck"}],"fragment":["unsafeCopy ::\n             (PrimMonad m, MVector v a) =>\n             v (PrimState m) a -> v (PrimState m) a -> m ()","unsafeCopy dst src\n  = ((Ck.check \"Data/Vector/Generic/Mutable.hs\" 688) Ck.Unsafe)\n      \"unsafeCopy\"\n      \"length mismatch\"\n      (length dst == length src)\n      $\n      ((Ck.check \"Data/Vector/Generic/Mutable.hs\" 690) Ck.Unsafe)\n        \"unsafeCopy\"\n        \"overlapping vectors\"\n        (not (dst `overlaps` src))\n        $ (dst `seq` src `seq` basicUnsafeCopy dst src)","clone ::\n        (PrimMonad m, MVector v a) =>\n        v (PrimState m) a -> m (v (PrimState m) a)","clone v\n  = do v' <- unsafeNew (length v)\n       unsafeCopy v' v\n       return v'","unsafeNew ::\n            (PrimMonad m, MVector v a) => Int -> m (v (PrimState m) a)","unsafeNew n\n  = ((Ck.checkLength \"Data/Vector/Generic/Mutable.hs\" 501) Ck.Unsafe)\n      \"unsafeNew\"\n      n\n      $ basicUnsafeNew n","overlaps :: MVector v a => v s a -> v s a -> Bool","overlaps = basicOverlaps","length :: MVector v a => v s a -> Int","length = basicLength","class MVector v a where\n        basicLength :: v s a -> Int\n        \n        basicUnsafeSlice :: Int -> Int -> v s a -> v s a\n        \n        basicOverlaps :: v s a -> v s a -> Bool\n        \n        basicUnsafeNew :: PrimMonad m => Int -> m (v (PrimState m) a)\n        \n        basicUnsafeReplicate ::\n                               PrimMonad m => Int -> a -> m (v (PrimState m) a)\n        \n        basicUnsafeRead :: PrimMonad m => v (PrimState m) a -> Int -> m a\n        \n        basicUnsafeWrite ::\n                           PrimMonad m => v (PrimState m) a -> Int -> a -> m ()\n        \n        basicClear :: PrimMonad m => v (PrimState m) a -> m ()\n        \n        basicSet :: PrimMonad m => v (PrimState m) a -> a -> m ()\n        \n        basicUnsafeCopy ::\n                          PrimMonad m => v (PrimState m) a -> v (PrimState m) a -> m ()\n        \n        basicUnsafeMove ::\n                          PrimMonad m => v (PrimState m) a -> v (PrimState m) a -> m ()\n        \n        basicUnsafeGrow ::\n                          PrimMonad m => v (PrimState m) a -> Int -> m (v (PrimState m) a)\n        \n        {-# INLINE basicUnsafeReplicate #-}\n        basicUnsafeReplicate n x\n          = do v <- basicUnsafeNew n\n               basicSet v x\n               return v\n        \n        {-# INLINE basicClear #-}\n        basicClear _ = return ()\n        \n        {-# INLINE basicSet #-}\n        basicSet !v x\n          | n == 0 = return ()\n          | otherwise =\n            do basicUnsafeWrite v 0 x\n               do_set 1\n          where !n = basicLength v\n                do_set i\n                  | 2 * i < n =\n                    do basicUnsafeCopy (basicUnsafeSlice i i v)\n                         (basicUnsafeSlice 0 i v)\n                       do_set (2 * i)\n                  | otherwise =\n                    basicUnsafeCopy (basicUnsafeSlice i (n - i) v)\n                      (basicUnsafeSlice 0 (n - i) v)\n        \n        {-# INLINE basicUnsafeCopy #-}\n        basicUnsafeCopy !dst !src = do_copy 0\n          where !n = basicLength src\n                do_copy i\n                  | i < n =\n                    do x <- basicUnsafeRead src i\n                       basicUnsafeWrite dst i x\n                       do_copy (i + 1)\n                  | otherwise = return ()\n        \n        {-# INLINE basicUnsafeMove #-}\n        basicUnsafeMove !dst !src\n          | basicOverlaps dst src =\n            do srcCopy <- clone src\n               basicUnsafeCopy dst srcCopy\n          | otherwise = basicUnsafeCopy dst src\n        \n        {-# INLINE basicUnsafeGrow #-}\n        basicUnsafeGrow v by\n          = do v' <- basicUnsafeNew (n + by)\n               basicUnsafeCopy (basicUnsafeSlice 0 n v') v\n               return v'\n          where n = basicLength v"],"instances":[{"instanceID":5057418499153085307,"instancePart":"OfClass"},{"instanceID":1594958064710786806,"instancePart":"OfClass"},{"instanceID":6750672013854950940,"instancePart":"OfClass"},{"instanceID":6683170150368415670,"instancePart":"OfClass"},{"instanceID":5767623651874913379,"instancePart":"OfClass"},{"instanceID":3537343313993406077,"instancePart":"OfClass"},{"instanceID":2636563898006301377,"instancePart":"OfClass"},{"instanceID":8755151558993149229,"instancePart":"OfClass"},{"instanceID":7351441133420943137,"instancePart":"OfClass"},{"instanceID":6360542687586953171,"instancePart":"OfClass"},{"instanceID":946926005641244856,"instancePart":"OfClass"},{"instanceID":7227040756674792100,"instancePart":"OfClass"},{"instanceID":6449022969838966700,"instancePart":"OfClass"},{"instanceID":1446980864038731432,"instancePart":"OfClass"},{"instanceID":5698452491924333639,"instancePart":"OfClass"},{"instanceID":4807710291351487903,"instancePart":"OfClass"},{"instanceID":1884380370253375209,"instancePart":"OfClass"},{"instanceID":6956150694380102231,"instancePart":"OfClass"},{"instanceID":4343822640076583878,"instancePart":"OfClass"},{"instanceID":3268093302394198716,"instancePart":"OfClass"},{"instanceID":2927050611761247926,"instancePart":"OfClass"},{"instanceID":2543351079129283961,"instancePart":"OfClass"},{"instanceID":8629023051645878603,"instancePart":"OfClass"},{"instanceID":3046200884182192488,"instancePart":"OfClass"}],"language":{"extensions":["DeriveDataTypeable","MultiParamTypeClasses","BangPatterns","ScopedTypeVariables","TypeFamilies","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}