{"sliceID":3439203726703982937,"uses":[{"reference":{"otherSlice":5700351957984311116},"usedName":{"constructorName":{"identifier":"Empty"},"constructorTypeName":{"identifier":"Text"}},"qualification":null},{"reference":{"otherSlice":2413618958552884936},"usedName":{"valueName":{"identifier":"empty"}},"qualification":null},{"reference":{"otherSlice":5509292296907774377},"usedName":{"constructorName":{"operator":":*:"},"constructorTypeName":{"identifier":"PairS"}},"qualification":null},{"reference":{"otherSlice":5700351957984311116},"usedName":{"constructorName":{"identifier":"Chunk"},"constructorTypeName":{"identifier":"Text"}},"qualification":null},{"reference":{"otherSlice":2241541392207318616},"usedName":{"constructorName":{"identifier":"Text"},"constructorTypeName":{"identifier":"Text"}},"qualification":"T"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">="}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":3184837019436048138},"usedName":{"valueName":{"identifier":"chunk"}},"qualification":null},{"reference":{"otherSlice":8422374095318209233},"usedName":{"valueName":{"identifier":"text"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Int"},"usedName":{"typeName":{"identifier":"Int64"}},"qualification":null},{"reference":{"otherSlice":5700351957984311116},"usedName":{"typeName":{"identifier":"Text"}},"qualification":null},{"reference":{"otherSlice":5509292296907774377},"usedName":{"typeName":{"identifier":"PairS"}},"qualification":null}],"fragment":["splitAtWord :: Int64 -> Text -> PairS Text Text","splitAtWord _ Empty = empty :*: empty\nsplitAtWord x (Chunk c@(T.Text arr off len) cs)\n  | y >= len =\n    let h :*: t = splitAtWord (x - fromIntegral len) cs in\n      Chunk c h :*: t\n  | otherwise =\n    chunk (text arr off y) empty :*:\n      chunk (text arr (off + y) (len - y)) cs\n  where y = fromIntegral x"],"instances":[],"language":{"extensions":["BangPatterns","MagicHash","TypeFamilies","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}