{"sliceID":6508371859249495307,"uses":[{"reference":{"otherSlice":3281333190237423352},"usedName":{"valueName":{"identifier":"unstreamM"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":7728950129673121783},"usedName":{"valueName":{"identifier":"zipWithM"}},"qualification":"Bundle"},{"reference":{"otherSlice":5483074428067105677},"usedName":{"valueName":{"identifier":"stream"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Monad"}},"qualification":null},{"reference":{"otherSlice":8572689894313737623},"usedName":{"typeName":{"identifier":"Vector"}},"qualification":null}],"fragment":["zipWithM ::\n           (Monad m, Vector v a, Vector v b, Vector v c) =>\n           (a -> b -> m c) -> v a -> v b -> m (v c)","zipWithM f\n  = \\ as bs -> unstreamM $ Bundle.zipWithM f (stream as) (stream bs)"],"instances":[],"language":{"extensions":["Rank2Types","MultiParamTypeClasses","FlexibleContexts","TypeFamilies","ScopedTypeVariables","BangPatterns","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}