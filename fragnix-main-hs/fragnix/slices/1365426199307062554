{"sliceID":1365426199307062554,"uses":[{"reference":{"otherSlice":8642306666063513779},"usedName":{"constructorName":{"identifier":"PS"},"constructorTypeName":{"identifier":"ByteString"}},"qualification":null},{"reference":{"builtinModule":"Foreign.ForeignPtr"},"usedName":{"valueName":{"identifier":"withForeignPtr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"Control.Monad"},"usedName":{"valueName":{"identifier":"when"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO"},"usedName":{"valueName":{"identifier":"throwIO"}},"qualification":null},{"reference":{"builtinModule":"GHC.Ptr"},"usedName":{"valueName":{"identifier":"plusPtr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"otherSlice":9169233734204210519},"usedName":{"valueName":{"identifier":"memchr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Ptr"},"usedName":{"valueName":{"identifier":"nullPtr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"||"}},"qualification":null},{"reference":{"builtinModule":"GHC.Ptr"},"usedName":{"valueName":{"identifier":"minusPtr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":2109377013281436257},"usedName":{"valueName":{"identifier":"empty"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":8547266307614062940},"usedName":{"constructorName":{"identifier":"BadFirstLine"},"constructorTypeName":{"identifier":"InvalidRequest"}},"qualification":null},{"reference":{"otherSlice":1940791894936628658},"usedName":{"valueName":{"identifier":"unpack"}},"qualification":"B"},{"reference":{"builtinModule":"GHC.Ptr"},"usedName":{"typeName":{"identifier":"Ptr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Word"},"usedName":{"typeName":{"identifier":"Word8"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"builtinModule":"Foreign.Storable"},"usedName":{"valueName":{"identifier":"peek"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"/="}},"qualification":null},{"reference":{"otherSlice":8547266307614062940},"usedName":{"constructorName":{"identifier":"NonHttp"},"constructorTypeName":{"identifier":"InvalidRequest"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"otherSlice":4727366450451163319},"usedName":{"valueName":{"identifier":"http11"}},"qualification":"H"},{"reference":{"otherSlice":6311065145957480590},"usedName":{"valueName":{"identifier":"http10"}},"qualification":"H"},{"reference":{"otherSlice":8642306666063513779},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":null},{"reference":{"otherSlice":3271949581132027504},"usedName":{"typeName":{"identifier":"Method"}},"qualification":"H"},{"reference":{"otherSlice":9081086120732775883},"usedName":{"typeName":{"identifier":"HttpVersion"}},"qualification":"H"}],"fragment":["parseRequestLine ::\n                 ByteString -> IO (H.Method, ByteString, ByteString, H.HttpVersion)","parseRequestLine requestLine@(PS fptr off len)\n  = withForeignPtr fptr $\n      \\ ptr ->\n        do when (len < 14) $ throwIO baderr\n           let methodptr = ptr `plusPtr` off\n               limptr = methodptr `plusPtr` len\n               lim0 = fromIntegral len\n           pathptr0 <- memchr methodptr 32 lim0\n           when (pathptr0 == nullPtr || (limptr `minusPtr` pathptr0) < 11) $\n             throwIO baderr\n           let pathptr = pathptr0 `plusPtr` 1\n               lim1 = fromIntegral (limptr `minusPtr` pathptr0)\n           httpptr0 <- memchr pathptr 32 lim1\n           when (httpptr0 == nullPtr || (limptr `minusPtr` httpptr0) < 9) $\n             throwIO baderr\n           let httpptr = httpptr0 `plusPtr` 1\n               lim2 = fromIntegral (httpptr0 `minusPtr` pathptr)\n           checkHTTP httpptr\n           !hv <- httpVersion httpptr\n           queryptr <- memchr pathptr 63 lim2\n           let !method = bs ptr methodptr pathptr0\n               !path\n                 | queryptr == nullPtr = bs ptr pathptr httpptr0\n                 | otherwise = bs ptr pathptr queryptr\n               !query\n                 | queryptr == nullPtr = S.empty\n                 | otherwise = bs ptr queryptr httpptr0\n           return (method, path, query, hv)\n  where baderr = BadFirstLine $ B.unpack requestLine\n        \n        check :: Ptr Word8 -> Int -> Word8 -> IO ()\n        check p n w\n          = do w0 <- peek $ p `plusPtr` n\n               when (w0 /= w) $ throwIO NonHttp\n        checkHTTP httpptr\n          = do check httpptr 0 72\n               check httpptr 1 84\n               check httpptr 2 84\n               check httpptr 3 80\n               check httpptr 4 47\n               check httpptr 6 46\n        httpVersion httpptr\n          = do major <- peek $ httpptr `plusPtr` 5\n               minor <- peek $ httpptr `plusPtr` 7\n               return $\n                 if major == (49 :: Word8) && minor == (49 :: Word8) then H.http11\n                   else H.http10\n        bs ptr p0 p1 = PS fptr o l\n          where o = p0 `minusPtr` ptr\n                l = p1 `minusPtr` p0"],"instances":[],"language":{"extensions":["OverloadedStrings","BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}