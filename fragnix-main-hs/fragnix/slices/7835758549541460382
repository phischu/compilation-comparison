{"sliceID":7835758549541460382,"uses":[{"reference":{"otherSlice":2972184915614019242},"usedName":{"constructorName":{"identifier":"ProcessHandle"},"constructorTypeName":{"identifier":"ProcessHandle"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":5130259164710316056},"usedName":{"valueName":{"identifier":"modifyProcessHandle"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":2359080457521311454},"usedName":{"constructorName":{"identifier":"ClosedHandle"},"constructorTypeName":{"identifier":"ProcessHandle__"}},"qualification":null},{"reference":{"otherSlice":2359080457521311454},"usedName":{"constructorName":{"identifier":"OpenHandle"},"constructorTypeName":{"identifier":"ProcessHandle__"}},"qualification":null},{"reference":{"builtinModule":"Foreign.Marshal.Alloc"},"usedName":{"valueName":{"identifier":"alloca"}},"qualification":null},{"reference":{"builtinModule":"Foreign.C.Error"},"usedName":{"valueName":{"identifier":"throwErrnoIfMinus1Retry_"}},"qualification":null},{"reference":{"otherSlice":280266451865234858},"usedName":{"valueName":{"identifier":"c_waitForProcess"}},"qualification":null},{"reference":{"otherSlice":2359080457521311454},"usedName":{"constructorName":{"identifier":"OpenExtHandle"},"constructorTypeName":{"identifier":"ProcessHandle__"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Exception"},"usedName":{"constructorName":{"identifier":"ExitFailure"},"constructorTypeName":{"identifier":"ExitCode"}},"qualification":null},{"reference":{"otherSlice":3157000245021190803},"usedName":{"valueName":{"identifier":"closePHANDLE"}},"qualification":null},{"reference":{"builtinModule":"Foreign.Storable"},"usedName":{"valueName":{"identifier":"peek"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Exception"},"usedName":{"constructorName":{"identifier":"ExitSuccess"},"constructorTypeName":{"identifier":"ExitCode"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"when"}},"qualification":null},{"reference":{"otherSlice":4971887791210092355},"usedName":{"valueName":{"identifier":"endDelegateControlC"}},"qualification":null},{"reference":{"builtinModule":"Control.Concurrent.MVar"},"usedName":{"valueName":{"identifier":"withMVar"}},"qualification":null},{"reference":{"otherSlice":2972184915614019242},"usedName":{"valueName":{"identifier":"waitpidLock"}},"qualification":null},{"reference":{"otherSlice":2972184915614019242},"usedName":{"typeName":{"identifier":"ProcessHandle"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Exception"},"usedName":{"typeName":{"identifier":"ExitCode"}},"qualification":null}],"fragment":["waitForProcess :: ProcessHandle -> IO ExitCode","waitForProcess ph@(ProcessHandle _ delegating_ctlc _)\n  = lockWaitpid $\n      do p_ <- modifyProcessHandle ph $ \\ p_ -> return (p_, p_)\n         case p_ of\n             ClosedHandle e -> return e\n             OpenHandle h -> do e <- alloca $\n                                       \\ pret ->\n                                         do throwErrnoIfMinus1Retry_ \"waitForProcess\"\n                                              (c_waitForProcess h pret)\n                                            modifyProcessHandle ph $\n                                              \\ p_' ->\n                                                case p_' of\n                                                    ClosedHandle e -> return (p_', e)\n                                                    OpenExtHandle{} -> return\n                                                                         (p_', ExitFailure (-1))\n                                                    OpenHandle ph' -> do closePHANDLE ph'\n                                                                         code <- peek pret\n                                                                         let e = if (code == 0) then\n                                                                                   ExitSuccess else\n                                                                                   (ExitFailure\n                                                                                      (fromIntegral\n                                                                                         code))\n                                                                         return (ClosedHandle e, e)\n                                when delegating_ctlc $ endDelegateControlC e\n                                return e\n             OpenExtHandle _ _job _iocp -> return $ ExitFailure (-1)\n  where lockWaitpid m = withMVar (waitpidLock ph) $ \\ () -> m"],"instances":[],"language":{"extensions":["ForeignFunctionInterface","InterruptibleFFI","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}