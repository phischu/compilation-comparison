{"sliceID":5751583031630995248,"uses":[{"reference":{"otherSlice":2921449568316915535},"usedName":{"typeName":{"identifier":"Parser"}},"qualification":null},{"reference":{"otherSlice":8838403415977070196},"usedName":{"typeName":{"identifier":"Value"}},"qualification":null},{"reference":{"otherSlice":9102435058156373170},"usedName":{"typeName":{"identifier":"IResult"}},"qualification":null},{"reference":{"otherSlice":7233619382983855062},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"L"},{"reference":{"builtinModule":"Data.Either"},"usedName":{"typeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":2431639079978755785},"usedName":{"typeName":{"identifier":"JSONPath"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"String"}},"qualification":null},{"reference":{"otherSlice":635170926782682468},"usedName":{"valueName":{"identifier":"parse"}},"qualification":"L"},{"reference":{"otherSlice":756416052076698915},"usedName":{"constructorName":{"identifier":"Done"},"constructorTypeName":{"identifier":"Result"}},"qualification":"L"},{"reference":{"otherSlice":9102435058156373170},"usedName":{"constructorName":{"identifier":"ISuccess"},"constructorTypeName":{"identifier":"IResult"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Right"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":9102435058156373170},"usedName":{"constructorName":{"identifier":"IError"},"constructorTypeName":{"identifier":"IResult"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Left"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":756416052076698915},"usedName":{"constructorName":{"identifier":"Fail"},"constructorTypeName":{"identifier":"Result"}},"qualification":"L"}],"fragment":["eitherDecodeWith ::\n                 Parser Value ->\n                   (Value -> IResult a) -> L.ByteString -> Either (JSONPath, String) a","eitherDecodeWith p to s\n  = case L.parse p s of\n        L.Done _ v -> case to v of\n                          ISuccess a -> Right a\n                          IError path msg -> Left (path, msg)\n        L.Fail _ _ msg -> Left ([], msg)"],"instances":[],"language":{"extensions":["BangPatterns","OverloadedStrings","MagicHash","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}