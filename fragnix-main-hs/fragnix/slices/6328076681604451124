{"sliceID":6328076681604451124,"uses":[{"reference":{"builtinModule":"Control.Monad"},"usedName":{"valueName":{"identifier":"mapM"}},"qualification":"Prelude"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Monad"}},"qualification":null},{"reference":{"otherSlice":2302287400431637102},"usedName":{"typeName":{"identifier":"Forest"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":2302287400431637102},"usedName":{"constructorName":{"identifier":"Node"},"constructorTypeName":{"identifier":"Tree"}},"qualification":null},{"reference":{"otherSlice":2302287400431637102},"usedName":{"typeName":{"identifier":"Tree"}},"qualification":null}],"fragment":["unfoldForestM ::\n                Monad m => (b -> m (a, [b])) -> [b] -> m (Forest a)","unfoldForestM f = Prelude.mapM (unfoldTreeM f)","unfoldTreeM :: Monad m => (b -> m (a, [b])) -> b -> m (Tree a)","unfoldTreeM f b\n  = do (a, bs) <- f b\n       ts <- unfoldForestM f bs\n       return (Node a ts)"],"instances":[],"language":{"extensions":["DeriveDataTypeable","StandaloneDeriving","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}