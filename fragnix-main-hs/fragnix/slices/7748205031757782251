{"sliceID":7748205031757782251,"uses":[{"reference":{"otherSlice":2071755692096765236},"usedName":{"typeName":{"identifier":"MonadIO"}},"qualification":null},{"reference":{"otherSlice":2677767377697130686},"usedName":{"typeName":{"identifier":"ScottyError"}},"qualification":null},{"reference":{"otherSlice":5828371041114264500},"usedName":{"typeName":{"identifier":"ActionT"}},"qualification":null},{"reference":{"otherSlice":2071755692096765236},"usedName":{"valueName":{"identifier":"liftIO"}},"qualification":null},{"reference":{"otherSlice":5828371041114264500},"usedName":{"constructorName":{"identifier":"ActionT"},"constructorTypeName":{"identifier":"ActionT"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"Control.Monad"},"usedName":{"valueName":{"identifier":"liftM"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Right"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"builtinModule":"Control.Exception.Base"},"usedName":{"valueName":{"identifier":"catch"}},"qualification":"E"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Left"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":2677767377697130686},"usedName":{"valueName":{"identifier":"stringError"}},"qualification":null},{"reference":{"builtinModule":"GHC.Show"},"usedName":{"valueName":{"identifier":"show"}},"qualification":null},{"reference":{"builtinModule":"GHC.Exception"},"usedName":{"typeName":{"identifier":"SomeException"}},"qualification":"E"},{"reference":{"builtinModule":"Data.Either"},"usedName":{"valueName":{"identifier":"either"}},"qualification":null},{"reference":{"otherSlice":2824110155630133856},"usedName":{"valueName":{"identifier":"throwError"}},"qualification":null}],"fragment":["instance (MonadIO m, ScottyError e) => MonadIO (ActionT e m) where\n        liftIO io\n          = ActionT $\n              do r <- liftIO $\n                        liftM Right io `E.catch`\n                          (\\ e -> return $ Left $ stringError $ show (e :: E.SomeException))\n                 either throwError return r"],"instances":[],"language":{"extensions":["GeneralizedNewtypeDeriving","FlexibleInstances","MultiParamTypeClasses","UndecidableInstances","TypeFamilies","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":true}}