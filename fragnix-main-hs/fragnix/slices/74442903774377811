{"sliceID":74442903774377811,"uses":[{"reference":{"otherSlice":8924003398132186113},"usedName":{"constructorName":{"identifier":"Empty"},"constructorTypeName":{"identifier":"HashMap"}},"qualification":null},{"reference":{"otherSlice":8924003398132186113},"usedName":{"constructorName":{"identifier":"Leaf"},"constructorTypeName":{"identifier":"HashMap"}},"qualification":null},{"reference":{"otherSlice":9131127258957915120},"usedName":{"constructorName":{"identifier":"L"},"constructorTypeName":{"identifier":"Leaf"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":8924003398132186113},"usedName":{"constructorName":{"identifier":"BitmapIndexed"},"constructorTypeName":{"identifier":"HashMap"}},"qualification":null},{"reference":{"otherSlice":8924003398132186113},"usedName":{"constructorName":{"identifier":"Full"},"constructorTypeName":{"identifier":"HashMap"}},"qualification":null},{"reference":{"otherSlice":8782780780252811798},"usedName":{"valueName":{"identifier":"fullNodeMask"}},"qualification":null},{"reference":{"otherSlice":8924003398132186113},"usedName":{"constructorName":{"identifier":"Collision"},"constructorTypeName":{"identifier":"HashMap"}},"qualification":null},{"reference":{"otherSlice":985012931453993274},"usedName":{"valueName":{"identifier":"length"}},"qualification":"A"},{"reference":{"otherSlice":7947663641176110531},"usedName":{"valueName":{"identifier":"runST"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":1192963377051949147},"usedName":{"valueName":{"identifier":"new_"}},"qualification":"A"},{"reference":{"otherSlice":2678150379926168295},"usedName":{"typeName":{"identifier":"Array"}},"qualification":"A"},{"reference":{"otherSlice":8924003398132186113},"usedName":{"typeName":{"identifier":"HashMap"}},"qualification":null},{"reference":{"otherSlice":6807528283265738356},"usedName":{"typeName":{"identifier":"MArray"}},"qualification":"A"},{"reference":{"otherSlice":4393645809670501261},"usedName":{"typeName":{"identifier":"Bitmap"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"builtinModule":"GHC.ST"},"usedName":{"typeName":{"identifier":"ST"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":6110553199036334723},"usedName":{"valueName":{"identifier":"read"}},"qualification":"A"},{"reference":{"otherSlice":1224281502980059939},"usedName":{"valueName":{"identifier":"isLeafOrCollision"}},"qualification":null},{"reference":{"builtinModule":"Data.Functor"},"usedName":{"valueName":{"operator":"<$>"}},"qualification":null},{"reference":{"otherSlice":9062268342365681118},"usedName":{"valueName":{"identifier":"trim"}},"qualification":null},{"reference":{"builtinModule":"Prelude"},"usedName":{"valueName":{"operator":"$!"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":1479377275412739571},"usedName":{"valueName":{"identifier":"maxChildren"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"operator":".&."}},"qualification":null},{"reference":{"otherSlice":5287918648649459658},"usedName":{"valueName":{"identifier":"unsafeShiftL"}},"qualification":null},{"reference":{"otherSlice":4390823793232384339},"usedName":{"valueName":{"identifier":"index"}},"qualification":"A"},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"identifier":"complement"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":2897069700199654731},"usedName":{"valueName":{"identifier":"write"}},"qualification":"A"},{"reference":{"otherSlice":9131127258957915120},"usedName":{"typeName":{"identifier":"Leaf"}},"qualification":null},{"reference":{"otherSlice":6158037683058372635},"usedName":{"valueName":{"identifier":"unsafeFreeze"}},"qualification":"A"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":">>"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null}],"fragment":["filterWithKey ::\n              forall k v . (k -> v -> Bool) -> HashMap k v -> HashMap k v","filterWithKey pred = go\n  where go Empty = Empty\n        go t@(Leaf _ (L k v))\n          | pred k v = t\n          | otherwise = Empty\n        go (BitmapIndexed b ary) = filterA ary b\n        go (Full ary) = filterA ary fullNodeMask\n        go (Collision h ary) = filterC ary h\n        filterA ary0 b0\n          = let !n = A.length ary0 in\n              runST $\n                do mary <- A.new_ n\n                   step ary0 mary b0 0 0 1 n\n          where step ::\n                     A.Array (HashMap k v) ->\n                       A.MArray s (HashMap k v) ->\n                         Bitmap -> Int -> Int -> Bitmap -> Int -> ST s (HashMap k v)\n                step !ary !mary !b i !j !bi n\n                  | i >= n =\n                    case j of\n                        0 -> return Empty\n                        1 -> do ch <- A.read mary 0\n                                case ch of\n                                    t | isLeafOrCollision t -> return t\n                                    _ -> BitmapIndexed b <$> trim mary 1\n                        _ -> do ary2 <- trim mary j\n                                return $!\n                                  if j == maxChildren then Full ary2 else BitmapIndexed b ary2\n                  | bi .&. b == 0 = step ary mary b i j (bi `unsafeShiftL` 1) n\n                  | otherwise =\n                    case go (A.index ary i) of\n                        Empty -> step ary mary (b .&. complement bi) (i + 1) j\n                                   (bi `unsafeShiftL` 1)\n                                   n\n                        t -> do A.write mary j t\n                                step ary mary b (i + 1) (j + 1) (bi `unsafeShiftL` 1) n\n        filterC ary0 h\n          = let !n = A.length ary0 in\n              runST $\n                do mary <- A.new_ n\n                   step ary0 mary 0 0 n\n          where step ::\n                     A.Array (Leaf k v) ->\n                       A.MArray s (Leaf k v) -> Int -> Int -> Int -> ST s (HashMap k v)\n                step !ary !mary i !j n\n                  | i >= n =\n                    case j of\n                        0 -> return Empty\n                        1 -> do l <- A.read mary 0\n                                return $! Leaf h l\n                        _ | i == j ->\n                            do ary2 <- A.unsafeFreeze mary\n                               return $! Collision h ary2\n                          | otherwise ->\n                            do ary2 <- trim mary j\n                               return $! Collision h ary2\n                  | pred k v = A.write mary j el >> step ary mary (i + 1) (j + 1) n\n                  | otherwise = step ary mary (i + 1) j n\n                  where el@(L k v) = A.index ary i"],"instances":[],"language":{"extensions":["BangPatterns","DeriveDataTypeable","MagicHash","ScopedTypeVariables","TypeFamilies","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}