{"sliceID":251179250823587161,"uses":[{"reference":{"otherSlice":2044668842516496025},"usedName":{"valueName":{"identifier":"gets"}},"qualification":null},{"reference":{"otherSlice":2725792303499905596},"usedName":{"valueName":{"identifier":"input"}},"qualification":null},{"reference":{"otherSlice":7235567377809295464},"usedName":{"valueName":{"identifier":"length"}},"qualification":"B"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">="}},"qualification":null},{"reference":{"otherSlice":8765781573885839946},"usedName":{"valueName":{"identifier":"put"}},"qualification":null},{"reference":{"otherSlice":2725792303499905596},"usedName":{"constructorName":{"identifier":"S"},"constructorTypeName":{"identifier":"S"}},"qualification":null},{"reference":{"otherSlice":188135503957969977},"usedName":{"valueName":{"identifier":"unsafeDrop"}},"qualification":"B"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":">>"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":2833648163881947677},"usedName":{"valueName":{"identifier":"unsafeTake"}},"qualification":"B"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fail"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Monad"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"otherSlice":171938334774731537},"usedName":{"typeName":{"identifier":"ZeptoT"}},"qualification":null},{"reference":{"otherSlice":4010822550476529195},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":null}],"fragment":["take :: Monad m => Int -> ZeptoT m ByteString","take !n\n  = do s <- gets input\n       if B.length s >= n then\n         put (S (B.unsafeDrop n s)) >> return (B.unsafeTake n s) else\n         fail \"insufficient input\""],"instances":[],"language":{"extensions":["BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}