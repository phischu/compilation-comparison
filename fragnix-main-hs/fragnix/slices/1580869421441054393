{"sliceID":1580869421441054393,"uses":[{"reference":{"otherSlice":827314421331199196},"usedName":{"constructorName":{"identifier":"ISource"},"constructorTypeName":{"identifier":"ISource"}},"qualification":null},{"reference":{"builtinModule":"GHC.IORef"},"usedName":{"valueName":{"identifier":"readIORef"}},"qualification":"I"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":7459617743278403755},"usedName":{"valueName":{"identifier":"empty"}},"qualification":"S"},{"reference":{"otherSlice":5305167733554199752},"usedName":{"valueName":{"identifier":"readSource"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"when"}},"qualification":null},{"reference":{"otherSlice":7202692338078551997},"usedName":{"valueName":{"identifier":"null"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO"},"usedName":{"valueName":{"identifier":"throwIO"}},"qualification":null},{"reference":{"otherSlice":5741664915825101086},"usedName":{"constructorName":{"identifier":"ConnectionClosedByPeer"},"constructorTypeName":{"identifier":"InvalidRequest"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"min"}},"qualification":null},{"reference":{"otherSlice":7235567377809295464},"usedName":{"valueName":{"identifier":"length"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">"}},"qualification":null},{"reference":{"builtinModule":"GHC.IORef"},"usedName":{"valueName":{"identifier":"writeIORef"}},"qualification":"I"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":3681333600918143498},"usedName":{"valueName":{"identifier":"splitAt"}},"qualification":"S"},{"reference":{"otherSlice":7354041575699665051},"usedName":{"valueName":{"identifier":"leftoverSource"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"assert"}},"qualification":null},{"reference":{"otherSlice":827314421331199196},"usedName":{"typeName":{"identifier":"ISource"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"otherSlice":4010822550476529195},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":null}],"fragment":["readISource :: ISource -> IO ByteString","readISource (ISource src ref)\n  = do count <- I.readIORef ref\n       if count == 0 then return S.empty else\n         do bs <- readSource src\n            when (S.null bs) $ throwIO ConnectionClosedByPeer\n            let toSend = min count (S.length bs)\n                count' = count - toSend\n            case () of\n                () | count' > 0 ->\n                     do I.writeIORef ref count'\n                        return bs\n                   | otherwise ->\n                     do let (x, y) = S.splitAt toSend bs\n                        leftoverSource src y\n                        assert (count' == 0) $ I.writeIORef ref count'\n                        return x"],"instances":[],"language":{"extensions":["MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}