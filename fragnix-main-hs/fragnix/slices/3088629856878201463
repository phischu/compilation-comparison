{"sliceID":3088629856878201463,"uses":[{"reference":{"otherSlice":4582696675459476349},"usedName":{"valueName":{"identifier":"accum_stream"}},"qualification":null},{"reference":{"otherSlice":6319130439146192198},"usedName":{"valueName":{"identifier":"zipWith"}},"qualification":"Bundle"},{"reference":{"otherSlice":5483074428067105677},"usedName":{"valueName":{"identifier":"stream"}},"qualification":null},{"reference":{"otherSlice":8572689894313737623},"usedName":{"typeName":{"identifier":"Vector"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null}],"fragment":["accumulate_ ::\n              (Vector v a, Vector v Int, Vector v b) =>\n              (a -> b -> a) -> v a -> v Int -> v b -> v a","accumulate_ f v is xs\n  = accum_stream f v (Bundle.zipWith (,) (stream is) (stream xs))"],"instances":[],"language":{"extensions":["Rank2Types","MultiParamTypeClasses","FlexibleContexts","TypeFamilies","ScopedTypeVariables","BangPatterns","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}