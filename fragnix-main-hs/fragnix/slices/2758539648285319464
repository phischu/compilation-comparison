{"sliceID":2758539648285319464,"uses":[{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":5901223744124078229},"usedName":{"valueName":{"identifier":"randomIvalInteger"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"toInteger"}},"qualification":null},{"reference":{"builtinModule":"GHC.Enum"},"usedName":{"valueName":{"identifier":"minBound"}},"qualification":null},{"reference":{"builtinModule":"GHC.Int"},"usedName":{"typeName":{"identifier":"Int32"}},"qualification":null},{"reference":{"builtinModule":"GHC.Enum"},"usedName":{"valueName":{"identifier":"maxBound"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"*"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"operator":"/"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"realToFrac"}},"qualification":null},{"reference":{"otherSlice":5037508788481627499},"usedName":{"valueName":{"identifier":"int32Count"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"otherSlice":5307396205382476041},"usedName":{"typeName":{"identifier":"RandomGen"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"typeName":{"identifier":"Fractional"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Double"}},"qualification":null}],"fragment":["randomIvalDouble ::\n                   (RandomGen g, Fractional a) =>\n                   (Double, Double) -> (Double -> a) -> g -> (a, g)","randomIvalDouble (l, h) fromDouble rng\n  | l > h = randomIvalDouble (h, l) fromDouble rng\n  | otherwise =\n    case\n      (randomIvalInteger\n         (toInteger (minBound :: Int32), toInteger (maxBound :: Int32))\n         rng)\n      of\n        (x, rng') -> let scaled_x\n                           = fromDouble (0.5 * l + 0.5 * h) +\n                               fromDouble ((0.5 * h - 0.5 * l) / (0.5 * realToFrac int32Count)) *\n                                 fromIntegral (x :: Int32)\n                       in (scaled_x, rng')"],"instances":[],"language":{"extensions":["MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}