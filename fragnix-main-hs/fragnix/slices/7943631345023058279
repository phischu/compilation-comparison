{"sliceID":7943631345023058279,"uses":[{"reference":{"otherSlice":7233619382983855062},"usedName":{"constructorName":{"identifier":"Empty"},"constructorTypeName":{"identifier":"ByteString"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":7233619382983855062},"usedName":{"constructorName":{"identifier":"Chunk"},"constructorTypeName":{"identifier":"ByteString"}},"qualification":null},{"reference":{"otherSlice":3403683285013352545},"usedName":{"valueName":{"identifier":"w2c"}},"qualification":null},{"reference":{"otherSlice":1912991223311208085},"usedName":{"valueName":{"identifier":"unsafeHead"}},"qualification":"B"},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"True"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":1053797585940503682},"usedName":{"valueName":{"identifier":"unsafeTail"}},"qualification":"B"},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"False"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"otherSlice":4010822550476529195},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"S"},{"reference":{"otherSlice":7233619382983855062},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":7202692338078551997},"usedName":{"valueName":{"identifier":"null"}},"qualification":"B"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">="}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<="}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"*"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"GHC.Prim"},"usedName":{"valueName":{"identifier":"seq"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"identifier":"negate"}},"qualification":null},{"reference":{"otherSlice":4512551499485129340},"usedName":{"valueName":{"identifier":"chunk"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$!"}},"qualification":null}],"fragment":["readInt :: ByteString -> Maybe (Int, ByteString)","readInt Empty = Nothing\nreadInt (Chunk x xs)\n  = case w2c (B.unsafeHead x) of\n        '-' -> loop True 0 0 (B.unsafeTail x) xs\n        '+' -> loop False 0 0 (B.unsafeTail x) xs\n        _ -> loop False 0 0 x xs\n  where loop ::\n             Bool ->\n               Int -> Int -> S.ByteString -> ByteString -> Maybe (Int, ByteString)\n        loop neg !i !n !c cs\n          | B.null c =\n            case cs of\n                Empty -> end neg i n c cs\n                (Chunk c' cs') -> loop neg i n c' cs'\n          | otherwise =\n            case B.unsafeHead c of\n                w | w >= 48 && w <= 57 ->\n                    loop neg (i + 1) (n * 10 + (fromIntegral w - 48)) (B.unsafeTail c)\n                      cs\n                  | otherwise -> end neg i n c cs\n        \n        {-# INLINE end #-}\n        end _ 0 _ _ _ = Nothing\n        end neg _ n c cs = e `seq` e\n          where n' = if neg then negate n else n\n                c' = chunk c cs\n                e = n' `seq` c' `seq` Just $! (n', c')"],"instances":[],"language":{"extensions":["BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}