{"sliceID":5657305476543125467,"uses":[{"reference":{"otherSlice":4041040564016882290},"usedName":{"constructorName":{"identifier":"Context"},"constructorTypeName":{"identifier":"Context"}},"qualification":null},{"reference":{"otherSlice":4041040564016882290},"usedName":{"valueName":{"identifier":"outputQ"}},"qualification":null},{"reference":{"otherSlice":4041040564016882290},"usedName":{"valueName":{"identifier":"controlQ"}},"qualification":null},{"reference":{"otherSlice":4041040564016882290},"usedName":{"valueName":{"identifier":"connectionWindow"}},"qualification":null},{"reference":{"otherSlice":4041040564016882290},"usedName":{"valueName":{"identifier":"encodeDynamicTable"}},"qualification":null},{"reference":{"otherSlice":3086651893912105973},"usedName":{"constructorName":{"identifier":"Connection"},"constructorTypeName":{"identifier":"Connection"}},"qualification":null},{"reference":{"otherSlice":3086651893912105973},"usedName":{"valueName":{"identifier":"connWriteBuffer"}},"qualification":null},{"reference":{"otherSlice":3086651893912105973},"usedName":{"valueName":{"identifier":"connBufferSize"}},"qualification":null},{"reference":{"otherSlice":3086651893912105973},"usedName":{"valueName":{"identifier":"connSendAll"}},"qualification":null},{"reference":{"builtinModule":"Control.Exception.Base"},"usedName":{"valueName":{"identifier":"catch"}},"qualification":"E"},{"reference":{"otherSlice":7284922138018320859},"usedName":{"valueName":{"identifier":"isEmptyTQueue"}},"qualification":null},{"reference":{"builtinModule":"GHC.Conc.Sync"},"usedName":{"valueName":{"identifier":"readTVar"}},"qualification":null},{"reference":{"otherSlice":3328126793074092201},"usedName":{"valueName":{"identifier":"check"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">"}},"qualification":null},{"reference":{"otherSlice":8085844097782297232},"usedName":{"valueName":{"identifier":"isEmptySTM"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"/="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":180054705252453062},"usedName":{"constructorName":{"identifier":"Flush"},"constructorTypeName":{"identifier":"Switch"}},"qualification":null},{"reference":{"builtinModule":"GHC.Conc.Sync"},"usedName":{"valueName":{"identifier":"retry"}},"qualification":null},{"reference":{"otherSlice":180054705252453062},"usedName":{"constructorName":{"identifier":"O"},"constructorTypeName":{"identifier":"Switch"}},"qualification":null},{"reference":{"builtinModule":"Data.Functor"},"usedName":{"valueName":{"operator":"<$>"}},"qualification":null},{"reference":{"otherSlice":7954289930460186820},"usedName":{"valueName":{"identifier":"dequeueSTM"}},"qualification":null},{"reference":{"otherSlice":180054705252453062},"usedName":{"constructorName":{"identifier":"C"},"constructorTypeName":{"identifier":"Switch"}},"qualification":null},{"reference":{"otherSlice":6065381269424617342},"usedName":{"valueName":{"identifier":"readTQueue"}},"qualification":null},{"reference":{"builtinModule":"GHC.Conc.Sync"},"usedName":{"valueName":{"identifier":"atomically"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"when"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">="}},"qualification":null},{"reference":{"otherSlice":5282735146373457799},"usedName":{"valueName":{"identifier":"outputStream"}},"qualification":null},{"reference":{"builtinModule":"GHC.IORef"},"usedName":{"valueName":{"identifier":"writeIORef"}},"qualification":null},{"reference":{"otherSlice":2801635089134887690},"usedName":{"valueName":{"identifier":"streamPrecedence"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":">>"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":2096491001196216488},"usedName":{"constructorName":{"identifier":"CFinish"},"constructorTypeName":{"identifier":"Control"}},"qualification":null},{"reference":{"otherSlice":2096491001196216488},"usedName":{"constructorName":{"identifier":"CGoaway"},"constructorTypeName":{"identifier":"Control"}},"qualification":null},{"reference":{"otherSlice":2096491001196216488},"usedName":{"constructorName":{"identifier":"CFrame"},"constructorTypeName":{"identifier":"Control"}},"qualification":null},{"reference":{"otherSlice":2096491001196216488},"usedName":{"constructorName":{"identifier":"CSettings"},"constructorTypeName":{"identifier":"Control"}},"qualification":null},{"reference":{"otherSlice":2096491001196216488},"usedName":{"constructorName":{"identifier":"CSettings0"},"constructorTypeName":{"identifier":"Control"}},"qualification":null},{"reference":{"builtinModule":"GHC.Ptr"},"usedName":{"valueName":{"identifier":"plusPtr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":7235567377809295464},"usedName":{"valueName":{"identifier":"length"}},"qualification":"BS"},{"reference":{"otherSlice":6389867443957913839},"usedName":{"valueName":{"identifier":"copy"}},"qualification":null},{"reference":{"builtinModule":"Data.Functor"},"usedName":{"valueName":{"identifier":"void"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"lookup"}},"qualification":null},{"reference":{"otherSlice":7059752014033838103},"usedName":{"constructorName":{"identifier":"SettingsHeaderTableSize"},"constructorTypeName":{"identifier":"SettingsKeyId"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":6307743778929746214},"usedName":{"valueName":{"identifier":"setLimitForEncoding"}},"qualification":null},{"reference":{"otherSlice":5282735146373457799},"usedName":{"constructorName":{"identifier":"Output"},"constructorTypeName":{"identifier":"Output"}},"qualification":null},{"reference":{"otherSlice":4719170801006655827},"usedName":{"constructorName":{"identifier":"ONext"},"constructorTypeName":{"identifier":"OutputType"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"otherSlice":6632841070279347397},"usedName":{"constructorName":{"identifier":"Next"},"constructorTypeName":{"identifier":"Next"}},"qualification":null},{"reference":{"otherSlice":4719170801006655827},"usedName":{"constructorName":{"identifier":"ORspn"},"constructorTypeName":{"identifier":"OutputType"}},"qualification":null},{"reference":{"otherSlice":2801635089134887690},"usedName":{"valueName":{"identifier":"streamNumber"}},"qualification":null},{"reference":{"otherSlice":2350851251923448425},"usedName":{"constructorName":{"identifier":"RspnNobody"},"constructorTypeName":{"identifier":"Rspn"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"True"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"False"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":5321468202570768376},"usedName":{"valueName":{"identifier":"addNecessaryHeaders"}},"qualification":null},{"reference":{"otherSlice":829999802279960389},"usedName":{"valueName":{"identifier":"frameHeaderLength"}},"qualification":null},{"reference":{"otherSlice":5355904137995347472},"usedName":{"valueName":{"identifier":"closed"}},"qualification":null},{"reference":{"otherSlice":7308085713203672854},"usedName":{"constructorName":{"identifier":"Finished"},"constructorTypeName":{"identifier":"ClosedCode"}},"qualification":null},{"reference":{"otherSlice":2350851251923448425},"usedName":{"constructorName":{"identifier":"RspnFile"},"constructorTypeName":{"identifier":"Rspn"}},"qualification":null},{"reference":{"otherSlice":2810477755019206986},"usedName":{"valueName":{"identifier":"fillFileBodyGetNext"}},"qualification":null},{"reference":{"otherSlice":2350851251923448425},"usedName":{"constructorName":{"identifier":"RspnBuilder"},"constructorTypeName":{"identifier":"Rspn"}},"qualification":null},{"reference":{"otherSlice":221396986878720704},"usedName":{"valueName":{"identifier":"fillBuilderBodyGetNext"}},"qualification":null},{"reference":{"otherSlice":2350851251923448425},"usedName":{"constructorName":{"identifier":"RspnStreaming"},"constructorTypeName":{"identifier":"Rspn"}},"qualification":null},{"reference":{"otherSlice":8438301176044369767},"usedName":{"valueName":{"identifier":"fillStreamBodyGetNext"}},"qualification":null},{"reference":{"otherSlice":4719170801006655827},"usedName":{"constructorName":{"identifier":"OPush"},"constructorTypeName":{"identifier":"OutputType"}},"qualification":null},{"reference":{"otherSlice":5282735146373457799},"usedName":{"valueName":{"identifier":"outputType"}},"qualification":null},{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"undefined"}},"qualification":null},{"reference":{"builtinModule":"Control.Exception.Base"},"usedName":{"valueName":{"identifier":"handle"}},"qualification":"E"},{"reference":{"builtinModule":"GHC.IORef"},"usedName":{"valueName":{"identifier":"readIORef"}},"qualification":null},{"reference":{"otherSlice":2801635089134887690},"usedName":{"valueName":{"identifier":"streamState"}},"qualification":null},{"reference":{"otherSlice":5782410434553599282},"usedName":{"valueName":{"identifier":"isClosed"}},"qualification":null},{"reference":{"otherSlice":4719170801006655827},"usedName":{"constructorName":{"identifier":"OWait"},"constructorTypeName":{"identifier":"OutputType"}},"qualification":null},{"reference":{"otherSlice":5282735146373457799},"usedName":{"valueName":{"identifier":"outputHook"}},"qualification":null},{"reference":{"otherSlice":111088241923357801},"usedName":{"valueName":{"identifier":"forkAndEnqueueWhenReady"}},"qualification":null},{"reference":{"otherSlice":2070046199888586910},"usedName":{"valueName":{"identifier":"outputMaybeTBQueue"}},"qualification":null},{"reference":{"otherSlice":1044972806463725950},"usedName":{"valueName":{"identifier":"isEmptyTBQueue"}},"qualification":null},{"reference":{"otherSlice":6063091927523271365},"usedName":{"valueName":{"identifier":"waitStreaming"}},"qualification":null},{"reference":{"otherSlice":44438079082898041},"usedName":{"valueName":{"identifier":"getStreamWindowSize"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":6111667618474124922},"usedName":{"valueName":{"identifier":"waitStreamWindowSize"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"min"}},"qualification":null},{"reference":{"otherSlice":7308085713203672854},"usedName":{"constructorName":{"identifier":"ResetByMe"},"constructorTypeName":{"identifier":"ClosedCode"}},"qualification":null},{"reference":{"otherSlice":7326433401287430113},"usedName":{"valueName":{"identifier":"resetFrame"}},"qualification":null},{"reference":{"otherSlice":5005511013097534442},"usedName":{"constructorName":{"identifier":"InternalError"},"constructorTypeName":{"identifier":"ErrorCodeId"}},"qualification":null},{"reference":{"otherSlice":2847764183293833005},"usedName":{"valueName":{"identifier":"enqueueControl"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"otherSlice":8946614909990212196},"usedName":{"valueName":{"identifier":"bufferIO"}},"qualification":null},{"reference":{"otherSlice":5502786471796415952},"usedName":{"valueName":{"identifier":"hpackEncodeHeader"}},"qualification":null},{"reference":{"otherSlice":129222537609892313},"usedName":{"valueName":{"identifier":"setEndHeader"}},"qualification":null},{"reference":{"otherSlice":1926734013123657302},"usedName":{"valueName":{"identifier":"defaultFlags"}},"qualification":null},{"reference":{"otherSlice":4290038076494971251},"usedName":{"valueName":{"identifier":"setEndStream"}},"qualification":null},{"reference":{"otherSlice":3404358292982908639},"usedName":{"constructorName":{"identifier":"FrameHeaders"},"constructorTypeName":{"identifier":"FrameTypeId"}},"qualification":null},{"reference":{"otherSlice":3088340349979716598},"usedName":{"valueName":{"identifier":"hpackEncodeHeaderLoop"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO"},"usedName":{"valueName":{"identifier":"throwIO"}},"qualification":"E"},{"reference":{"otherSlice":3799123115806425041},"usedName":{"constructorName":{"identifier":"ConnectionError"},"constructorTypeName":{"identifier":"HTTP2Error"}},"qualification":null},{"reference":{"otherSlice":5005511013097534442},"usedName":{"constructorName":{"identifier":"CompressionError"},"constructorTypeName":{"identifier":"ErrorCodeId"}},"qualification":null},{"reference":{"otherSlice":3404358292982908639},"usedName":{"constructorName":{"identifier":"FrameContinuation"},"constructorTypeName":{"identifier":"FrameTypeId"}},"qualification":null},{"reference":{"otherSlice":5282735146373457799},"usedName":{"typeName":{"identifier":"Output"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":6632841070279347397},"usedName":{"typeName":{"identifier":"DynaNext"}},"qualification":null},{"reference":{"otherSlice":2445850687209195321},"usedName":{"valueName":{"identifier":"enqueueOutput"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"otherSlice":2801635089134887690},"usedName":{"constructorName":{"identifier":"Stream"},"constructorTypeName":{"identifier":"Stream"}},"qualification":null},{"reference":{"otherSlice":2801635089134887690},"usedName":{"valueName":{"identifier":"streamWindow"}},"qualification":null},{"reference":{"otherSlice":1125335483618056843},"usedName":{"valueName":{"identifier":"http2dataTrailers"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"null"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"valueName":{"identifier":"isNothing"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"otherSlice":3404358292982908639},"usedName":{"constructorName":{"identifier":"FrameData"},"constructorTypeName":{"identifier":"FrameTypeId"}},"qualification":null},{"reference":{"otherSlice":4506410967786313778},"usedName":{"valueName":{"identifier":"modifyTVar'"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"identifier":"subtract"}},"qualification":null},{"reference":{"otherSlice":1149201892968836616},"usedName":{"valueName":{"identifier":"toHeaderTable"}},"qualification":null},{"reference":{"otherSlice":7522545687964447808},"usedName":{"valueName":{"identifier":"poke32"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"otherSlice":3404358292982908639},"usedName":{"constructorName":{"identifier":"FramePushPromise"},"constructorTypeName":{"identifier":"FrameTypeId"}},"qualification":null},{"reference":{"otherSlice":9031490084431850773},"usedName":{"valueName":{"identifier":"encodeFrameHeaderBuf"}},"qualification":null},{"reference":{"otherSlice":1285600184885925655},"usedName":{"constructorName":{"identifier":"FrameHeader"},"constructorTypeName":{"identifier":"FrameHeader"}},"qualification":null},{"reference":{"builtinModule":"GHC.Exception"},"usedName":{"typeName":{"identifier":"SomeException"}},"qualification":"E"},{"reference":{"otherSlice":4041040564016882290},"usedName":{"typeName":{"identifier":"Context"}},"qualification":null},{"reference":{"otherSlice":3086651893912105973},"usedName":{"typeName":{"identifier":"Connection"}},"qualification":null},{"reference":{"otherSlice":135941937043906956},"usedName":{"typeName":{"identifier":"Settings"}},"qualification":"S"},{"reference":{"otherSlice":7046325130647915595},"usedName":{"typeName":{"identifier":"Manager"}},"qualification":null}],"fragment":["frameSender ::\n            Context -> Connection -> S.Settings -> Manager -> IO ()","frameSender\n  ctx@Context{outputQ, controlQ, connectionWindow,\n              encodeDynamicTable}\n  conn@Connection{connWriteBuffer, connBufferSize, connSendAll}\n  settings mgr = loop 0 `E.catch` ignore\n  where dequeue off\n          = do isEmpty <- isEmptyTQueue controlQ\n               if isEmpty then\n                 do w <- readTVar connectionWindow\n                    check (w > 0)\n                    emp <- isEmptySTM outputQ\n                    if emp then if off /= 0 then return Flush else retry else\n                      O <$> dequeueSTM outputQ\n                 else C <$> readTQueue controlQ\n        loop off\n          = do x <- atomically $ dequeue off\n               case x of\n                   C ctl -> do when (off /= 0) $ flushN off\n                               off' <- control ctl off\n                               when (off' >= 0) $ loop off'\n                   O (_, pre, out) -> do let strm = outputStream out\n                                         writeIORef (streamPrecedence strm) pre\n                                         off' <- outputOrEnqueueAgain out off\n                                         case off' of\n                                             0 -> loop 0\n                                             _ | off' > 15872 -> flushN off' >> loop 0\n                                               | otherwise -> loop off'\n                   Flush -> flushN off >> loop 0\n        control CFinish _ = return (-1)\n        control (CGoaway frame) _ = connSendAll frame >> return (-1)\n        control (CFrame frame) _ = connSendAll frame >> return 0\n        control (CSettings frame alist) _\n          = do connSendAll frame\n               setLimit alist\n               return 0\n        control (CSettings0 frame1 frame2 alist) off\n          = do let !buf = connWriteBuffer `plusPtr` off\n                   !off' = off + BS.length frame1 + BS.length frame2\n               buf' <- copy buf frame1\n               void $ copy buf' frame2\n               setLimit alist\n               return off'\n        \n        {-# INLINE setLimit #-}\n        setLimit alist\n          = case lookup SettingsHeaderTableSize alist of\n                Nothing -> return ()\n                Just siz -> setLimitForEncoding siz encodeDynamicTable\n        output out@(Output strm _ _ tell getH2D (ONext curr)) off0 lim\n          = do let !buf = connWriteBuffer `plusPtr` off0\n                   !siz = connBufferSize - off0\n               Next datPayloadLen mnext <- curr buf siz lim\n               off <- fillDataHeader strm off0 datPayloadLen mnext tell getH2D\n               maybeEnqueueNext out mnext\n               return off\n        output out@(Output strm rspn ii tell getH2D ORspn) off0 lim\n          = do let !sid = streamNumber strm\n                   !endOfStream\n                     = case rspn of\n                           RspnNobody _ _ -> True\n                           _ -> False\n               ths <- addNecessaryHeaders ctx rspn ii settings\n               kvlen <- headerContinue sid ths endOfStream off0\n               off <- sendHeadersIfNecessary $ off0 + frameHeaderLength + kvlen\n               case rspn of\n                   RspnNobody _ _ -> do closed ctx strm Finished\n                                        return off\n                   RspnFile _ _ path mpart -> do let payloadOff\n                                                       = off + frameHeaderLength\n                                                 Next datPayloadLen mnext <- fillFileBodyGetNext\n                                                                               conn\n                                                                               ii\n                                                                               payloadOff\n                                                                               lim\n                                                                               path\n                                                                               mpart\n                                                 off' <- fillDataHeader strm off datPayloadLen mnext\n                                                           tell\n                                                           getH2D\n                                                 maybeEnqueueNext out mnext\n                                                 return off'\n                   RspnBuilder _ _ builder -> do let payloadOff\n                                                       = off + frameHeaderLength\n                                                 Next datPayloadLen mnext <- fillBuilderBodyGetNext\n                                                                               conn\n                                                                               ii\n                                                                               payloadOff\n                                                                               lim\n                                                                               builder\n                                                 off' <- fillDataHeader strm off datPayloadLen mnext\n                                                           tell\n                                                           getH2D\n                                                 maybeEnqueueNext out mnext\n                                                 return off'\n                   RspnStreaming _ _ tbq -> do let payloadOff\n                                                     = off + frameHeaderLength\n                                               Next datPayloadLen mnext <- fillStreamBodyGetNext\n                                                                             conn\n                                                                             payloadOff\n                                                                             lim\n                                                                             tbq\n                                                                             strm\n                                               off' <- fillDataHeader strm off datPayloadLen mnext\n                                                         tell\n                                                         getH2D\n                                               maybeEnqueueNext out mnext\n                                               return off'\n        output out@(Output strm _ _ _ _ (OPush ths pid)) off0 lim\n          = do let !sid = streamNumber strm\n               len <- pushPromise pid sid ths off0\n               off <- sendHeadersIfNecessary $ off0 + frameHeaderLength + len\n               output out{outputType = ORspn} off lim\n        output _ _ _ = undefined\n        outputOrEnqueueAgain out off\n          = E.handle resetStream $\n              do state <- readIORef $ streamState strm\n                 if isClosed state then return off else\n                   case out of\n                       Output _ _ _ wait _ OWait -> do let out'\n                                                             = out{outputHook = return (),\n                                                                   outputType = ORspn}\n                                                       forkAndEnqueueWhenReady wait outputQ out' mgr\n                                                       return off\n                       _ -> case mtbq of\n                                Just tbq -> checkStreaming tbq\n                                _ -> checkStreamWindowSize\n          where strm = outputStream out\n                mtbq = outputMaybeTBQueue out\n                checkStreaming tbq\n                  = do isEmpty <- atomically $ isEmptyTBQueue tbq\n                       if isEmpty then\n                         do forkAndEnqueueWhenReady (waitStreaming tbq) outputQ out mgr\n                            return off\n                         else checkStreamWindowSize\n                checkStreamWindowSize\n                  = do sws <- getStreamWindowSize strm\n                       if sws == 0 then\n                         do forkAndEnqueueWhenReady (waitStreamWindowSize strm) outputQ out\n                              mgr\n                            return off\n                         else\n                         do cws <- atomically $ readTVar connectionWindow\n                            let !lim = min cws sws\n                            output out off lim\n                resetStream e\n                  = do closed ctx strm (ResetByMe e)\n                       let !rst = resetFrame InternalError $ streamNumber strm\n                       enqueueControl controlQ $ CFrame rst\n                       return off\n        \n        {-# INLINE flushN #-}\n        \n        flushN :: Int -> IO ()\n        flushN n = bufferIO connWriteBuffer n connSendAll\n        headerContinue sid ths endOfStream off\n          = do let !offkv = off + frameHeaderLength\n               let !bufkv = connWriteBuffer `plusPtr` offkv\n                   !limkv = connBufferSize - offkv\n               (hs, kvlen) <- hpackEncodeHeader ctx bufkv limkv ths\n               let flag0\n                     = case hs of\n                           [] -> setEndHeader defaultFlags\n                           _ -> defaultFlags\n                   flag = if endOfStream then setEndStream flag0 else flag0\n               let buf = connWriteBuffer `plusPtr` off\n               fillFrameHeader FrameHeaders kvlen sid flag buf\n               continue sid kvlen hs\n        !bufHeaderPayload = connWriteBuffer `plusPtr` frameHeaderLength\n        !headerPayloadLim = connBufferSize - frameHeaderLength\n        continue _ kvlen [] = return kvlen\n        continue sid kvlen ths\n          = do flushN $ kvlen + frameHeaderLength\n               (ths', kvlen') <- hpackEncodeHeaderLoop ctx bufHeaderPayload\n                                   headerPayloadLim\n                                   ths\n               when (ths == ths') $\n                 E.throwIO $\n                   ConnectionError CompressionError \"cannot compress the header\"\n               let flag\n                     = case ths' of\n                           [] -> setEndHeader defaultFlags\n                           _ -> defaultFlags\n               fillFrameHeader FrameContinuation kvlen' sid flag connWriteBuffer\n               continue sid kvlen' ths'\n        \n        {-# INLINE maybeEnqueueNext #-}\n        \n        maybeEnqueueNext :: Output -> Maybe DynaNext -> IO ()\n        maybeEnqueueNext _ Nothing = return ()\n        maybeEnqueueNext out (Just next) = enqueueOutput outputQ out'\n          where !out' = out{outputType = ONext next}\n        \n        {-# INLINE sendHeadersIfNecessary #-}\n        sendHeadersIfNecessary off\n          | off + frameHeaderLength < connBufferSize = return off\n          | otherwise =\n            do flushN off\n               return 0\n        fillDataHeader strm@Stream{streamWindow, streamNumber} off\n          datPayloadLen mnext tell getH2D\n          = do mh2d <- getH2D\n               let (!trailers, !noTrailers)\n                     = case http2dataTrailers <$> mh2d of\n                           Nothing -> ([], True)\n                           Just ts -> (ts, null ts)\n                   !buf = connWriteBuffer `plusPtr` off\n                   !off' = off + frameHeaderLength + datPayloadLen\n                   !noMoreBody = isNothing mnext\n                   flag\n                     | noMoreBody && noTrailers = setEndStream defaultFlags\n                     | otherwise = defaultFlags\n               fillFrameHeader FrameData datPayloadLen streamNumber flag buf\n               off'' <- handleEndOfBody noMoreBody off' noTrailers trailers\n               atomically $ modifyTVar' connectionWindow (subtract datPayloadLen)\n               atomically $ modifyTVar' streamWindow (subtract datPayloadLen)\n               return off''\n          where handleTrailers True off0 _ = return off0\n                handleTrailers _ off0 trailers\n                  = do (ths, _) <- toHeaderTable trailers\n                       kvlen <- headerContinue streamNumber ths True off0\n                       sendHeadersIfNecessary $ off0 + frameHeaderLength + kvlen\n                handleEndOfBody True off0 noTrailers trailers\n                  = do off1 <- handleTrailers noTrailers off0 trailers\n                       void $ tell\n                       closed ctx strm Finished\n                       return off1\n                handleEndOfBody False off0 _ _ = return off0\n        pushPromise pid sid ths off\n          = do let !offsid = off + frameHeaderLength\n                   !bufsid = connWriteBuffer `plusPtr` offsid\n               poke32 bufsid $ fromIntegral sid\n               let !offkv = offsid + 4\n                   !bufkv = connWriteBuffer `plusPtr` offkv\n                   !limkv = connBufferSize - offkv\n               (_, kvlen) <- hpackEncodeHeader ctx bufkv limkv ths\n               let !flag = setEndHeader defaultFlags\n                   !buf = connWriteBuffer `plusPtr` off\n                   !len = kvlen + 4\n               fillFrameHeader FramePushPromise len pid flag buf\n               return len\n        \n        {-# INLINE fillFrameHeader #-}\n        fillFrameHeader ftyp len sid flag buf\n          = encodeFrameHeaderBuf ftyp hinfo buf\n          where hinfo = FrameHeader len flag sid\n        \n        {-# INLINE ignore #-}\n        \n        ignore :: E.SomeException -> IO ()\n        ignore _ = return ()"],"instances":[],"language":{"extensions":["OverloadedStrings","BangPatterns","NamedFieldPuns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}