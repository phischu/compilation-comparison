{"sliceID":2480353814218234987,"uses":[{"reference":{"otherSlice":1699226608098321587},"usedName":{"constructorName":{"identifier":"Chunk"},"constructorTypeName":{"identifier":"ByteString"}},"qualification":"B"},{"reference":{"otherSlice":6109735683314530702},"usedName":{"valueName":{"identifier":"streamDecodeUtf8With"}},"qualification":"TE"},{"reference":{"otherSlice":3854948120027470085},"usedName":{"constructorName":{"identifier":"Some"},"constructorTypeName":{"identifier":"Decoding"}},"qualification":"TE"},{"reference":{"otherSlice":420952891824589826},"usedName":{"valueName":{"identifier":"chunk"}},"qualification":null},{"reference":{"otherSlice":675696118971413715},"usedName":{"valueName":{"identifier":"null"}},"qualification":"S"},{"reference":{"otherSlice":3206583878039194784},"usedName":{"valueName":{"identifier":"empty"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":4261797841410981906},"usedName":{"valueName":{"identifier":"unsafeHead"}},"qualification":"B"},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":467388924411627541},"usedName":{"valueName":{"identifier":"singleton"}},"qualification":"L"},{"reference":{"otherSlice":663156760748332554},"usedName":{"typeName":{"identifier":"OnDecodeError"}},"qualification":null},{"reference":{"otherSlice":1699226608098321587},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"B"},{"reference":{"otherSlice":3835980439088584228},"usedName":{"typeName":{"identifier":"Text"}},"qualification":null}],"fragment":["decodeUtf8With :: OnDecodeError -> B.ByteString -> Text","decodeUtf8With onErr (B.Chunk b0 bs0)\n  = case TE.streamDecodeUtf8With onErr b0 of\n        TE.Some t l f -> chunk t (go f l bs0)\n  where go f0 _ (B.Chunk b bs)\n          = case f0 b of\n                TE.Some t l f -> chunk t (go f l bs)\n        go _ l _\n          | S.null l = empty\n          | otherwise =\n            case onErr desc (Just (B.unsafeHead l)) of\n                Nothing -> empty\n                Just c -> L.singleton c\n        desc\n          = \"Data.Text.Lazy.Encoding.decodeUtf8With: Invalid UTF-8 stream\"\ndecodeUtf8With _ _ = empty"],"instances":[],"language":{"extensions":["BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}