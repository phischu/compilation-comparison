{"sliceID":5980915668591843659,"uses":[{"reference":{"otherSlice":870353161139163292},"usedName":{"valueName":{"identifier":"fromDistinctAscList"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Prim"},"usedName":{"valueName":{"identifier":"seq"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"typeName":{"identifier":"Eq"}},"qualification":null},{"reference":{"otherSlice":4406277257444163371},"usedName":{"typeName":{"identifier":"Map"}},"qualification":null}],"fragment":["fromAscListWithKey ::\n                     Eq k => (k -> a -> a -> a) -> [(k, a)] -> Map k a","fromAscListWithKey f xs = fromDistinctAscList (combineEq f xs)\n  where combineEq _ xs'\n          = case xs' of\n                [] -> []\n                [x] -> [x]\n                (x : xx) -> combineEq' x xx\n        combineEq' z [] = [z]\n        combineEq' z@(kz, zz) (x@(kx, xx) : xs')\n          | kx == kz =\n            let yy = f kx xx zz in yy `seq` combineEq' (kx, yy) xs'\n          | otherwise = z : combineEq' x xs'"],"instances":[],"language":{"extensions":["BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}