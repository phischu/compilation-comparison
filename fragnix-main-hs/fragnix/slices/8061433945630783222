{"sliceID":8061433945630783222,"uses":[{"reference":{"otherSlice":3867849288792351978},"usedName":{"valueName":{"identifier":"length"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":8048411296556366704},"usedName":{"valueName":{"identifier":"unsafeRead"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"otherSlice":1358554234100414793},"usedName":{"valueName":{"identifier":"unsafeWrite"}},"qualification":null},{"reference":{"otherSlice":3377634759521931512},"usedName":{"typeName":{"identifier":"PrimMonad"}},"qualification":null},{"reference":{"otherSlice":3867849288792351978},"usedName":{"typeName":{"identifier":"MVector"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":3377634759521931512},"usedName":{"typeName":{"identifier":"PrimState"}},"qualification":null}],"fragment":["unstablePartition ::\n                  forall m v a . (PrimMonad m, MVector v a) =>\n                    (a -> Bool) -> v (PrimState m) a -> m Int","unstablePartition f !v = from_left 0 (length v)\n  where from_left :: Int -> Int -> m Int\n        from_left i j\n          | i == j = return i\n          | otherwise =\n            do x <- unsafeRead v i\n               if f x then from_left (i + 1) j else from_right i (j - 1)\n        \n        from_right :: Int -> Int -> m Int\n        from_right i j\n          | i == j = return i\n          | otherwise =\n            do x <- unsafeRead v j\n               if f x then\n                 do y <- unsafeRead v i\n                    unsafeWrite v i x\n                    unsafeWrite v j y\n                    from_left (i + 1) j\n                 else from_right i (j - 1)"],"instances":[],"language":{"extensions":["DeriveDataTypeable","MultiParamTypeClasses","BangPatterns","ScopedTypeVariables","TypeFamilies","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}