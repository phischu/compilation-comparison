{"sliceID":9002614240295709465,"uses":[{"reference":{"otherSlice":3215441896288524948},"usedName":{"constructorName":{"identifier":"Bin"},"constructorTypeName":{"identifier":"IntMap"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">="}},"qualification":null},{"reference":{"otherSlice":3488744216033821233},"usedName":{"valueName":{"identifier":"union"}},"qualification":null},{"reference":{"builtinModule":"GHC.Prim"},"usedName":{"valueName":{"identifier":"seq"}},"qualification":null},{"reference":{"otherSlice":2654114007802303743},"usedName":{"valueName":{"identifier":"nomatch"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":3215441896288524948},"usedName":{"constructorName":{"identifier":"Nil"},"constructorTypeName":{"identifier":"IntMap"}},"qualification":null},{"reference":{"otherSlice":4724247418787711009},"usedName":{"valueName":{"identifier":"zero"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":3215441896288524948},"usedName":{"constructorName":{"identifier":"Tip"},"constructorTypeName":{"identifier":"IntMap"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":937490584395345141},"usedName":{"typeName":{"identifier":"Key"}},"qualification":null},{"reference":{"otherSlice":3215441896288524948},"usedName":{"typeName":{"identifier":"IntMap"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null}],"fragment":["splitLookup :: Key -> IntMap a -> (IntMap a, Maybe a, IntMap a)","splitLookup k t\n  = case t of\n        Bin _ m l r | m < 0 ->\n                      if k >= 0 then\n                        case go k l of\n                            (lt, fnd, gt) -> let lt' = union r lt in lt' `seq` (lt', fnd, gt)\n                        else\n                        case go k r of\n                            (lt, fnd, gt) -> let gt' = union gt l in gt' `seq` (lt, fnd, gt')\n        _ -> go k t\n  where go k' t'@(Bin p m l r)\n          | nomatch k' p m =\n            if k' > p then (t', Nothing, Nil) else (Nil, Nothing, t')\n          | zero k' m =\n            case go k' l of\n                (lt, fnd, gt) -> let gt' = union gt r in gt' `seq` (lt, fnd, gt')\n          | otherwise =\n            case go k' r of\n                (lt, fnd, gt) -> let lt' = union l lt in lt' `seq` (lt', fnd, gt)\n        go k' t'@(Tip ky y)\n          | k' > ky = (t', Nothing, Nil)\n          | k' < ky = (Nil, Nothing, t')\n          | otherwise = (Nil, Just y, Nil)\n        go _ Nil = (Nil, Nothing, Nil)"],"instances":[],"language":{"extensions":["MagicHash","DeriveDataTypeable","StandaloneDeriving","ScopedTypeVariables","TypeFamilies","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}