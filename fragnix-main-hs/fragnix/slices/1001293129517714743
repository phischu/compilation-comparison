{"sliceID":1001293129517714743,"uses":[{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"otherSlice":7656308987823753789},"usedName":{"valueName":{"identifier":"toChunks"}},"qualification":"L"},{"reference":{"otherSlice":3497946061830860787},"usedName":{"valueName":{"identifier":"lazyBreak"}},"qualification":null},{"reference":{"otherSlice":677049321249320014},"usedName":{"valueName":{"identifier":"fromChunks"}},"qualification":"L"},{"reference":{"otherSlice":4010822550476529195},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"S"},{"reference":{"otherSlice":7233619382983855062},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"L"}],"fragment":["breakSubstringL ::\n                S.ByteString -> L.ByteString -> (L.ByteString, L.ByteString)","breakSubstringL pat = breaker . L.toChunks\n  where lbrk = lazyBreak pat\n        breaker strs\n          = let (f, b) = lbrk strs in (L.fromChunks f, L.fromChunks b)"],"instances":[],"language":{"extensions":["BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}