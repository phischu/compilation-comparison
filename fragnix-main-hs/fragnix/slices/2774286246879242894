{"sliceID":2774286246879242894,"uses":[{"reference":{"otherSlice":4360120424655547227},"usedName":{"valueName":{"identifier":"defaultHints"}},"qualification":"NS"},{"reference":{"otherSlice":327701426414781642},"usedName":{"valueName":{"identifier":"addrFlags"}},"qualification":"NS"},{"reference":{"otherSlice":5386083940265316368},"usedName":{"constructorName":{"identifier":"AI_PASSIVE"},"constructorTypeName":{"identifier":"AddrInfoFlag"}},"qualification":"NS"},{"reference":{"otherSlice":5386083940265316368},"usedName":{"constructorName":{"identifier":"AI_NUMERICSERV"},"constructorTypeName":{"identifier":"AddrInfoFlag"}},"qualification":"NS"},{"reference":{"otherSlice":5386083940265316368},"usedName":{"constructorName":{"identifier":"AI_NUMERICHOST"},"constructorTypeName":{"identifier":"AddrInfoFlag"}},"qualification":"NS"},{"reference":{"otherSlice":327701426414781642},"usedName":{"valueName":{"identifier":"addrSocketType"}},"qualification":"NS"},{"reference":{"otherSlice":6029755790839632201},"usedName":{"constructorName":{"identifier":"Host"},"constructorTypeName":{"identifier":"HostPreference"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"builtinModule":"GHC.Show"},"usedName":{"valueName":{"identifier":"show"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":2990950460556442721},"usedName":{"valueName":{"identifier":"getAddrInfo"}},"qualification":"NS"},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"filter"}},"qualification":null},{"reference":{"otherSlice":327701426414781642},"usedName":{"valueName":{"identifier":"addrFamily"}},"qualification":"NS"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"/="}},"qualification":null},{"reference":{"otherSlice":6366556555504853542},"usedName":{"constructorName":{"identifier":"AF_INET6"},"constructorTypeName":{"identifier":"Family"}},"qualification":"NS"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":6029755790839632201},"usedName":{"constructorName":{"identifier":"HostIPv4"},"constructorTypeName":{"identifier":"HostPreference"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"++"}},"qualification":null},{"reference":{"otherSlice":6029755790839632201},"usedName":{"constructorName":{"identifier":"HostIPv4Only"},"constructorTypeName":{"identifier":"HostPreference"}},"qualification":null},{"reference":{"otherSlice":6029755790839632201},"usedName":{"constructorName":{"identifier":"HostIPv6"},"constructorTypeName":{"identifier":"HostPreference"}},"qualification":null},{"reference":{"otherSlice":6029755790839632201},"usedName":{"constructorName":{"identifier":"HostIPv6Only"},"constructorTypeName":{"identifier":"HostPreference"}},"qualification":null},{"reference":{"builtinModule":"Control.Exception.Base"},"usedName":{"valueName":{"identifier":"catch"}},"qualification":"E"},{"reference":{"builtinModule":"GHC.IO.Exception"},"usedName":{"typeName":{"identifier":"IOException"}},"qualification":null},{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"error"}},"qualification":null},{"reference":{"builtinModule":"Control.Exception.Base"},"usedName":{"valueName":{"identifier":"bracketOnError"}},"qualification":null},{"reference":{"otherSlice":4272420466188907908},"usedName":{"valueName":{"identifier":"socket"}},"qualification":"NS"},{"reference":{"otherSlice":327701426414781642},"usedName":{"valueName":{"identifier":"addrProtocol"}},"qualification":"NS"},{"reference":{"otherSlice":1691131710779787624},"usedName":{"valueName":{"identifier":"close"}},"qualification":"NS"},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"mapM_"}},"qualification":null},{"reference":{"otherSlice":7642706057452917817},"usedName":{"valueName":{"identifier":"setSocketOption"}},"qualification":"NS"},{"reference":{"otherSlice":8664137520116127459},"usedName":{"valueName":{"identifier":"bind"}},"qualification":"NS"},{"reference":{"otherSlice":327701426414781642},"usedName":{"valueName":{"identifier":"addrAddress"}},"qualification":"NS"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":5653121259726360349},"usedName":{"typeName":{"identifier":"SocketOption"}},"qualification":"NS"},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"otherSlice":5966676263279217999},"usedName":{"typeName":{"identifier":"SocketType"}},"qualification":null},{"reference":{"otherSlice":6029755790839632201},"usedName":{"typeName":{"identifier":"HostPreference"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"otherSlice":1546470151414195006},"usedName":{"typeName":{"identifier":"Socket"}},"qualification":null}],"fragment":["bindPortGenEx ::\n              [(NS.SocketOption, Int)] ->\n                SocketType -> Int -> HostPreference -> IO Socket","bindPortGenEx sockOpts sockettype p s\n  = do let hints\n             = NS.defaultHints{NS.addrFlags =\n                                 [NS.AI_PASSIVE, NS.AI_NUMERICSERV, NS.AI_NUMERICHOST],\n                               NS.addrSocketType = sockettype}\n           host\n             = case s of\n                   Host s' -> Just s'\n                   _ -> Nothing\n           port = Just . show $ p\n       addrs <- NS.getAddrInfo (Just hints) host port\n       let addrs4 = filter (\\ x -> NS.addrFamily x /= NS.AF_INET6) addrs\n           addrs6 = filter (\\ x -> NS.addrFamily x == NS.AF_INET6) addrs\n           addrs'\n             = case s of\n                   HostIPv4 -> addrs4 ++ addrs6\n                   HostIPv4Only -> addrs4\n                   HostIPv6 -> addrs6 ++ addrs4\n                   HostIPv6Only -> addrs6\n                   _ -> addrs\n           tryAddrs (addr1 : rest@(_ : _))\n             = E.catch (theBody addr1) (\\ (_ :: IOException) -> tryAddrs rest)\n           tryAddrs (addr1 : []) = theBody addr1\n           tryAddrs _ = error \"bindPort: addrs is empty\"\n           theBody addr\n             = bracketOnError\n                 (NS.socket (NS.addrFamily addr) (NS.addrSocketType addr)\n                    (NS.addrProtocol addr))\n                 NS.close\n                 (\\ sock ->\n                    do mapM_ (\\ (opt, v) -> NS.setSocketOption sock opt v) sockOpts\n                       NS.bind sock (NS.addrAddress addr)\n                       return sock)\n       tryAddrs addrs'"],"instances":[],"language":{"extensions":["ScopedTypeVariables","BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}