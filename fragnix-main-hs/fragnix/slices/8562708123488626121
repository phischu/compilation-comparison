{"sliceID":8562708123488626121,"uses":[{"reference":{"builtinModule":"GHC.Conc.IO"},"usedName":{"valueName":{"identifier":"ensureIOManagerIsRunning"}},"qualification":null},{"reference":{"otherSlice":1981978258778653908},"usedName":{"constructorName":{"identifier":"Ignore"},"constructorTypeName":{"identifier":"Handler"}},"qualification":null},{"reference":{"otherSlice":2782927366988064739},"usedName":{"valueName":{"identifier":"stg_sig_install"}},"qualification":null},{"reference":{"builtinModule":"GHC.Ptr"},"usedName":{"valueName":{"identifier":"nullPtr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Conc.Signal"},"usedName":{"valueName":{"identifier":"setHandler"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":1981978258778653908},"usedName":{"constructorName":{"identifier":"Default"},"constructorTypeName":{"identifier":"Handler"}},"qualification":null},{"reference":{"builtinModule":"Data.Dynamic"},"usedName":{"valueName":{"identifier":"toDyn"}},"qualification":null},{"reference":{"otherSlice":1981978258778653908},"usedName":{"constructorName":{"identifier":"Catch"},"constructorTypeName":{"identifier":"Handler"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"const"}},"qualification":null},{"reference":{"otherSlice":1981978258778653908},"usedName":{"constructorName":{"identifier":"CatchOnce"},"constructorTypeName":{"identifier":"Handler"}},"qualification":null},{"reference":{"otherSlice":1981978258778653908},"usedName":{"constructorName":{"identifier":"CatchInfo"},"constructorTypeName":{"identifier":"Handler"}},"qualification":null},{"reference":{"otherSlice":4464645673157702439},"usedName":{"valueName":{"identifier":"getinfo"}},"qualification":null},{"reference":{"otherSlice":1981978258778653908},"usedName":{"constructorName":{"identifier":"CatchInfoOnce"},"constructorTypeName":{"identifier":"Handler"}},"qualification":null},{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"error"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"Data.Dynamic"},"usedName":{"valueName":{"identifier":"fromDynamic"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":7507069968562713503},"usedName":{"typeName":{"identifier":"Signal"}},"qualification":null},{"reference":{"otherSlice":1981978258778653908},"usedName":{"typeName":{"identifier":"Handler"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":2733811048022258973},"usedName":{"typeName":{"identifier":"SignalSet"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null}],"fragment":["installHandler ::\n               Signal -> Handler -> Maybe SignalSet -> IO Handler","installHandler sig handler _maybe_mask\n  = do ensureIOManagerIsRunning\n       (old_action, old_handler) <- case handler of\n                                        Ignore -> do old_action <- stg_sig_install sig (-2) nullPtr\n                                                     old_handler <- setHandler sig Nothing\n                                                     return (old_action, old_handler)\n                                        Default -> do old_action <- stg_sig_install sig (-1) nullPtr\n                                                      old_handler <- setHandler sig Nothing\n                                                      return (old_action, old_handler)\n                                        _some_kind_of_catch -> do let dyn = toDyn handler\n                                                                  old_handler <- case handler of\n                                                                                     Catch\n                                                                                       action -> setHandler\n                                                                                                   sig\n                                                                                                   (Just\n                                                                                                      (const\n                                                                                                         action,\n                                                                                                       dyn))\n                                                                                     CatchOnce\n                                                                                       action -> setHandler\n                                                                                                   sig\n                                                                                                   (Just\n                                                                                                      (const\n                                                                                                         action,\n                                                                                                       dyn))\n                                                                                     CatchInfo\n                                                                                       action -> setHandler\n                                                                                                   sig\n                                                                                                   (Just\n                                                                                                      (getinfo\n                                                                                                         action,\n                                                                                                       dyn))\n                                                                                     CatchInfoOnce\n                                                                                       action -> setHandler\n                                                                                                   sig\n                                                                                                   (Just\n                                                                                                      (getinfo\n                                                                                                         action,\n                                                                                                       dyn))\n                                                                                     _ -> error\n                                                                                            \"installHandler\"\n                                                                  let action\n                                                                        = case handler of\n                                                                              Catch _ -> (-4)\n                                                                              CatchOnce _ -> (-5)\n                                                                              CatchInfo _ -> (-4)\n                                                                              CatchInfoOnce\n                                                                                _ -> (-5)\n                                                                              _ -> error\n                                                                                     \"installHandler\"\n                                                                  old_action <- stg_sig_install sig\n                                                                                  action\n                                                                                  nullPtr\n                                                                  return (old_action, old_handler)\n       case (old_handler, old_action) of\n           (_, (-1)) -> return $ Default\n           (_, (-2)) -> return $ Ignore\n           (Nothing, _) -> return $ Ignore\n           (Just (_, dyn), _) | Just h <- fromDynamic dyn -> return h\n                              | Just io <- fromDynamic dyn -> return (Catch io)\n                              | otherwise -> return Default"],"instances":[],"language":{"extensions":["CApiFFI","DeriveDataTypeable","NondecreasingIndentation","MultiParamTypeClasses","ExplicitForAll","PatternGuards"],"isInstance":false}}