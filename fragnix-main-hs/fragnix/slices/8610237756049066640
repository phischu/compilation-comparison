{"sliceID":8610237756049066640,"uses":[{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Left"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":6468298682039186647},"usedName":{"valueName":{"identifier":"reifyConTys"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"pure"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Right"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":5895018335791130541},"usedName":{"valueName":{"identifier":"parseNullaryMatches"}},"qualification":null},{"reference":{"otherSlice":3342457406893132225},"usedName":{"valueName":{"identifier":"matchCases"}},"qualification":null},{"reference":{"otherSlice":8067251363920493555},"usedName":{"valueName":{"identifier":"parseUnaryMatches"}},"qualification":null},{"reference":{"builtinModule":"Data.List"},"usedName":{"valueName":{"identifier":"genericLength"}},"qualification":null},{"reference":{"otherSlice":7370964239181221487},"usedName":{"valueName":{"identifier":"parseProduct"}},"qualification":null},{"reference":{"otherSlice":7924077293322552009},"usedName":{"valueName":{"identifier":"parseRecord"}},"qualification":null},{"reference":{"otherSlice":4512247588159674237},"usedName":{"valueName":{"identifier":"unwrapUnaryRecords"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"True"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":8838403415977070196},"usedName":{"constructorName":{"identifier":"Object"},"constructorTypeName":{"identifier":"Value"}},"qualification":null},{"reference":{"otherSlice":5879732638212515577},"usedName":{"valueName":{"identifier":"matchFailed"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"head"}},"qualification":null},{"reference":{"otherSlice":3790782889836978137},"usedName":{"typeName":{"identifier":"JSONClass"}},"qualification":null},{"reference":{"otherSlice":4512247588159674237},"usedName":{"typeName":{"identifier":"Options"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"typeName":{"identifier":"Either"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"String"}},"qualification":null}],"fragment":["parseArgs ::\n          JSONClass ->\n            [(Name, Name)] ->\n              Name -> Options -> Con -> Either (String, Name) Name -> Q Exp","parseArgs jc pjs _ _ (NormalC conName []) (Left _)\n  = do ([], _) <- reifyConTys jc pjs conName\n       [| pure |] `appE` conE conName\nparseArgs jc pjs tName _ (NormalC conName []) (Right valName)\n  = do ([], _) <- reifyConTys jc pjs conName\n       caseE (varE valName) $ parseNullaryMatches tName conName\nparseArgs jc pjs _ _ (NormalC conName [_]) contents\n  = do ([argTy], tvMap) <- reifyConTys jc pjs conName\n       matchCases contents $ parseUnaryMatches jc tvMap argTy conName\nparseArgs jc pjs tName _ (NormalC conName ts) contents\n  = do (argTys, tvMap) <- reifyConTys jc pjs conName\n       let len = genericLength ts\n       matchCases contents $\n         parseProduct jc tvMap argTys tName conName len\nparseArgs jc pjs tName opts (RecC conName ts) (Left (_, obj))\n  = do (argTys, tvMap) <- reifyConTys jc pjs conName\n       parseRecord jc tvMap argTys opts tName conName ts obj\nparseArgs jc pjs tName opts (RecC conName ts) (Right valName)\n  = case (unwrapUnaryRecords opts, ts) of\n        (True, [(_, st, ty)]) -> parseArgs jc pjs tName opts\n                                   (NormalC conName [(st, ty)])\n                                   (Right valName)\n        _ -> do obj <- newName \"recObj\"\n                (argTys, tvMap) <- reifyConTys jc pjs conName\n                caseE (varE valName)\n                  [match (conP 'Object [varP obj])\n                     (normalB $ parseRecord jc tvMap argTys opts tName conName ts obj)\n                     [],\n                   matchFailed tName conName \"Object\"]\nparseArgs jc pjs tName _ (InfixC _ conName _) contents\n  = do (argTys, tvMap) <- reifyConTys jc pjs conName\n       matchCases contents $ parseProduct jc tvMap argTys tName conName 2\nparseArgs jc pjs tName opts (ForallC _ _ con) contents\n  = parseArgs jc pjs tName opts con contents\nparseArgs jc pjs tName opts (GadtC conNames ts _) contents\n  = parseArgs jc pjs tName opts (NormalC (head conNames) ts) contents\nparseArgs jc pjs tName opts (RecGadtC conNames ts _) contents\n  = parseArgs jc pjs tName opts (RecC (head conNames) ts) contents"],"instances":[],"language":{"extensions":["BangPatterns","FlexibleInstances","NamedFieldPuns","NoImplicitPrelude","UndecidableInstances","TemplateHaskellQuotes","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards","TemplateHaskell"],"isInstance":false}}