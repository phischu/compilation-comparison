{"sliceID":2393352355198117372,"uses":[{"reference":{"otherSlice":5977421355225226687},"usedName":{"constructorName":{"identifier":"ET"},"constructorTypeName":{"identifier":"EncodeTable"}},"qualification":null},{"reference":{"otherSlice":4010822550476529195},"usedName":{"constructorName":{"identifier":"PS"},"constructorTypeName":{"identifier":"ByteString"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">"}},"qualification":null},{"reference":{"builtinModule":"GHC.Enum"},"usedName":{"valueName":{"identifier":"maxBound"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"div"}},"qualification":null},{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"error"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Unsafe"},"usedName":{"valueName":{"identifier":"unsafePerformIO"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"*"}},"qualification":null},{"reference":{"otherSlice":4976473949306289482},"usedName":{"valueName":{"identifier":"mallocByteString"}},"qualification":null},{"reference":{"builtinModule":"Foreign.ForeignPtr"},"usedName":{"valueName":{"identifier":"withForeignPtr"}},"qualification":null},{"reference":{"otherSlice":2494102343239070823},"usedName":{"valueName":{"identifier":"peek8"}},"qualification":null},{"reference":{"builtinModule":"GHC.Ptr"},"usedName":{"valueName":{"identifier":"plusPtr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">="}},"qualification":null},{"reference":{"builtinModule":"GHC.Ptr"},"usedName":{"valueName":{"identifier":"castPtr"}},"qualification":null},{"reference":{"otherSlice":2238221480982001169},"usedName":{"valueName":{"identifier":"peek8_32"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"identifier":"shiftL"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"operator":".|."}},"qualification":null},{"reference":{"builtinModule":"Foreign.Storable"},"usedName":{"valueName":{"identifier":"peekElemOff"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"builtinModule":"Foreign.Storable"},"usedName":{"valueName":{"identifier":"poke"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"=<<"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"identifier":"shiftR"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"operator":".&."}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fmap"}},"qualification":null},{"reference":{"builtinModule":"GHC.Word"},"usedName":{"typeName":{"identifier":"Word8"}},"qualification":null},{"reference":{"otherSlice":1624868840423943539},"usedName":{"valueName":{"identifier":"poke8"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$!"}},"qualification":null},{"reference":{"otherSlice":5977421355225226687},"usedName":{"typeName":{"identifier":"EncodeTable"}},"qualification":null},{"reference":{"otherSlice":4010822550476529195},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":null}],"fragment":["encodeWith :: EncodeTable -> ByteString -> ByteString","encodeWith (ET alfaFP encodeTable) (PS sfp soff slen)\n  | slen > maxBound `div` 4 =\n    error \"Data.ByteString.Base64.encode: input too long\"\n  | otherwise =\n    unsafePerformIO $\n      do let dlen = ((slen + 2) `div` 3) * 4\n         dfp <- mallocByteString dlen\n         withForeignPtr alfaFP $\n           \\ aptr ->\n             withForeignPtr encodeTable $\n               \\ ep ->\n                 withForeignPtr sfp $\n                   \\ sptr ->\n                     do let aidx n = peek8 (aptr `plusPtr` n)\n                            sEnd = sptr `plusPtr` (slen + soff)\n                            fill !dp !sp\n                              | sp `plusPtr` 2 >= sEnd = complete (castPtr dp) sp\n                              | otherwise =\n                                {-# SCC \"encode/fill\" #-}\n                                  do i <- peek8_32 sp\n                                     j <- peek8_32 (sp `plusPtr` 1)\n                                     k <- peek8_32 (sp `plusPtr` 2)\n                                     let w = (i `shiftL` 16) .|. (j `shiftL` 8) .|. k\n                                         enc = peekElemOff ep . fromIntegral\n                                     poke dp =<< enc (w `shiftR` 12)\n                                     poke (dp `plusPtr` 2) =<< enc (w .&. 4095)\n                                     fill (dp `plusPtr` 4) (sp `plusPtr` 3)\n                            complete dp sp\n                              | sp == sEnd = return ()\n                              | otherwise =\n                                {-# SCC \"encode/complete\" #-}\n                                  do let peekSP n f\n                                           = (f . fromIntegral) `fmap` peek8 (sp `plusPtr` n)\n                                         twoMore = sp `plusPtr` 2 == sEnd\n                                         equals = 61 :: Word8\n                                         {-# INLINE equals #-}\n                                     !a <- peekSP 0 ((`shiftR` 2) . (.&. 252))\n                                     !b <- peekSP 0 ((`shiftL` 4) . (.&. 3))\n                                     !b' <- if twoMore then\n                                              peekSP 1 ((.|. b) . (`shiftR` 4) . (.&. 240)) else\n                                              return b\n                                     poke8 dp =<< aidx a\n                                     poke8 (dp `plusPtr` 1) =<< aidx b'\n                                     !c <- if twoMore then\n                                             aidx =<< peekSP 1 ((`shiftL` 2) . (.&. 15)) else\n                                             return equals\n                                     poke8 (dp `plusPtr` 2) c\n                                     poke8 (dp `plusPtr` 3) equals\n                        withForeignPtr dfp $\n                          \\ dptr -> fill (castPtr dptr) (sptr `plusPtr` soff)\n         return $! PS dfp 0 dlen"],"instances":[],"language":{"extensions":["BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}