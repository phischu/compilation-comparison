{"sliceID":4926699719278577568,"uses":[{"reference":{"otherSlice":8862722746729955054},"usedName":{"valueName":{"identifier":"builder"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":38613747648554582},"usedName":{"constructorName":{"identifier":"BufferRange"},"constructorTypeName":{"identifier":"BufferRange"}},"qualification":null},{"reference":{"builtinModule":"GHC.Ptr"},"usedName":{"valueName":{"identifier":"plusPtr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<="}},"qualification":null},{"reference":{"otherSlice":1402340817036728862},"usedName":{"valueName":{"identifier":"runPoke"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":4630681137417404139},"usedName":{"valueName":{"identifier":"bufferFull"}},"qualification":null},{"reference":{"otherSlice":3731036879417106745},"usedName":{"constructorName":{"identifier":"Write"},"constructorTypeName":{"identifier":"Write"}},"qualification":null},{"reference":{"otherSlice":3731036879417106745},"usedName":{"typeName":{"identifier":"Write"}},"qualification":null},{"reference":{"otherSlice":4322896446757888605},"usedName":{"typeName":{"identifier":"Builder"}},"qualification":null}],"fragment":["fromWriteList :: (a -> Write) -> [a] -> Builder","fromWriteList write = makeBuilder\n  where makeBuilder xs0 = builder $ step xs0\n          where step xs1 k !(BufferRange op0 ope0) = go xs1 op0\n                  where go [] !op\n                          = do let !br' = BufferRange op ope0\n                               k br'\n                        go xs@(x' : xs') !op\n                          | op `plusPtr` maxSize <= ope0 =\n                            do !op' <- runPoke wio op\n                               go xs' op'\n                          | otherwise = return $ bufferFull maxSize op (step xs k)\n                          where Write maxSize wio = write x'"],"instances":[],"language":{"extensions":["BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}