{"sliceID":1393632753716275252,"uses":[{"reference":{"otherSlice":1254073128444822395},"usedName":{"constructorName":{"identifier":"Stream"},"constructorTypeName":{"identifier":"Stream"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"SPEC"},"constructorTypeName":{"identifier":"SPEC"}},"qualification":null},{"reference":{"otherSlice":2120320550836080743},"usedName":{"constructorName":{"identifier":"Yield"},"constructorTypeName":{"identifier":"Step"}},"qualification":null},{"reference":{"otherSlice":2120320550836080743},"usedName":{"constructorName":{"identifier":"Skip"},"constructorTypeName":{"identifier":"Step"}},"qualification":null},{"reference":{"otherSlice":2120320550836080743},"usedName":{"constructorName":{"identifier":"Done"},"constructorTypeName":{"identifier":"Step"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"EQ"},"constructorTypeName":{"identifier":"Ordering"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"GT"},"constructorTypeName":{"identifier":"Ordering"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"LT"},"constructorTypeName":{"identifier":"Ordering"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Monad"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Ordering"}},"qualification":null},{"reference":{"otherSlice":1254073128444822395},"usedName":{"typeName":{"identifier":"Stream"}},"qualification":null}],"fragment":["cmpBy ::\n        (Monad m) =>\n        (a -> b -> Ordering) -> Stream m a -> Stream m b -> m Ordering","cmpBy cmp (Stream step1 t1) (Stream step2 t2)\n  = cmp_loop0 SPEC t1 t2\n  where cmp_loop0 !_ s1 s2\n          = do r <- step1 s1\n               case r of\n                   Yield x s1' -> cmp_loop1 SPEC x s1' s2\n                   Skip s1' -> cmp_loop0 SPEC s1' s2\n                   Done -> cmp_null s2\n        cmp_loop1 !_ x s1 s2\n          = do r <- step2 s2\n               case r of\n                   Yield y s2' -> case x `cmp` y of\n                                      EQ -> cmp_loop0 SPEC s1 s2'\n                                      c -> return c\n                   Skip s2' -> cmp_loop1 SPEC x s1 s2'\n                   Done -> return GT\n        cmp_null s2\n          = do r <- step2 s2\n               case r of\n                   Yield _ _ -> return LT\n                   Skip s2' -> cmp_null s2'\n                   Done -> return EQ"],"instances":[],"language":{"extensions":["ExistentialQuantification","MultiParamTypeClasses","FlexibleInstances","Rank2Types","BangPatterns","KindSignatures","GADTs","ScopedTypeVariables","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}