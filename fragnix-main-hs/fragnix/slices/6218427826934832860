{"sliceID":6218427826934832860,"uses":[{"reference":{"otherSlice":8587154504401928891},"usedName":{"typeName":{"identifier":"MonadCatch"}},"qualification":null},{"reference":{"otherSlice":7867549863913549413},"usedName":{"typeName":{"identifier":"MaybeT"}},"qualification":null},{"reference":{"otherSlice":8587154504401928891},"usedName":{"valueName":{"identifier":"catch"}},"qualification":null},{"reference":{"otherSlice":7867549863913549413},"usedName":{"constructorName":{"identifier":"MaybeT"},"constructorTypeName":{"identifier":"MaybeT"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":7867549863913549413},"usedName":{"valueName":{"identifier":"runMaybeT"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null}],"fragment":["instance MonadCatch m => MonadCatch (MaybeT m) where\n        catch (MaybeT m) f = MaybeT $ catch m (runMaybeT . f)"],"instances":[],"language":{"extensions":["ExistentialQuantification","GeneralizedNewtypeDeriving","RankNTypes","FlexibleInstances","MultiParamTypeClasses","UndecidableInstances","TypeFamilies","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":true}}