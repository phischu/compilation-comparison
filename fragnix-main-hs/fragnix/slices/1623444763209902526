{"sliceID":1623444763209902526,"uses":[{"reference":{"otherSlice":8642306666063513779},"usedName":{"constructorName":{"identifier":"PS"},"constructorTypeName":{"identifier":"ByteString"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<="}},"qualification":null},{"reference":{"otherSlice":2109377013281436257},"usedName":{"valueName":{"identifier":"empty"}},"qualification":"B"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO"},"usedName":{"valueName":{"identifier":"unsafePerformIO"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":8772400319191501505},"usedName":{"valueName":{"identifier":"mallocByteString"}},"qualification":null},{"reference":{"builtinModule":"Foreign.ForeignPtr"},"usedName":{"valueName":{"identifier":"withForeignPtr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Ptr"},"usedName":{"valueName":{"identifier":"plusPtr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">="}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.Ptr"},"usedName":{"typeName":{"identifier":"Ptr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Word"},"usedName":{"typeName":{"identifier":"Word8"}},"qualification":null},{"reference":{"builtinModule":"GHC.Word"},"usedName":{"typeName":{"identifier":"Word32"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"otherSlice":8642306666063513779},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":null},{"reference":{"otherSlice":2203303499510377930},"usedName":{"valueName":{"identifier":"done"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fmap"}},"qualification":null},{"reference":{"otherSlice":5261532151706010295},"usedName":{"valueName":{"identifier":"peek8"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":1982945244297598360},"usedName":{"valueName":{"identifier":"x"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"||"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"True"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"False"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"identifier":"shiftL"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"operator":".|."}},"qualification":null},{"reference":{"otherSlice":1195855373699628939},"usedName":{"valueName":{"identifier":"poke8"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"identifier":"shiftR"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"div"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"*"}},"qualification":null},{"reference":{"builtinModule":"GHC.ForeignPtr"},"usedName":{"typeName":{"identifier":"ForeignPtr"}},"qualification":null}],"fragment":["decodeLenientWithTable ::\n                       ForeignPtr Word8 -> ByteString -> ByteString","decodeLenientWithTable decodeFP (PS sfp soff slen)\n  | dlen <= 0 = B.empty\n  | otherwise =\n    unsafePerformIO $\n      do dfp <- mallocByteString dlen\n         withForeignPtr decodeFP $\n           \\ !decptr ->\n             withForeignPtr sfp $\n               \\ !sptr ->\n                 do let finish dbytes\n                          | dbytes > 0 = return (PS dfp 0 dbytes)\n                          | otherwise = return B.empty\n                        sEnd = sptr `plusPtr` (slen + soff)\n                        fill !dp !sp !n\n                          | sp >= sEnd = finish n\n                          | otherwise =\n                            {-# SCC \"decodeLenientWithTable/fill\" #-}\n                              let look ::\n                                       Bool ->\n                                         Ptr Word8 ->\n                                           (Ptr Word8 -> Word32 -> IO ByteString) -> IO ByteString\n                                  \n                                  {-# INLINE look #-}\n                                  look skipPad p0 f = go p0\n                                    where go p\n                                            | p >= sEnd = f (sEnd `plusPtr` (-1)) done\n                                            | otherwise =\n                                              {-# SCC \"decodeLenient/look\" #-}\n                                                do ix <- fromIntegral `fmap` peek8 p\n                                                   v <- peek8 (decptr `plusPtr` ix)\n                                                   if v == x || (v == done && skipPad) then\n                                                     go (p `plusPtr` 1) else\n                                                     f (p `plusPtr` 1) (fromIntegral v)\n                                in\n                                look True sp $\n                                  \\ !aNext !aValue ->\n                                    look True aNext $\n                                      \\ !bNext !bValue ->\n                                        if aValue == done || bValue == done then finish n else\n                                          look False bNext $\n                                            \\ !cNext !cValue ->\n                                              look False cNext $\n                                                \\ !dNext !dValue ->\n                                                  do let w = (aValue `shiftL` 18) .|.\n                                                               (bValue `shiftL` 12)\n                                                               .|. (cValue `shiftL` 6)\n                                                               .|. dValue\n                                                     poke8 dp $ fromIntegral (w `shiftR` 16)\n                                                     if cValue == done then finish (n + 1) else\n                                                       do poke8 (dp `plusPtr` 1) $\n                                                            fromIntegral (w `shiftR` 8)\n                                                          if dValue == done then finish (n + 2) else\n                                                            do poke8 (dp `plusPtr` 2) $\n                                                                 fromIntegral w\n                                                               fill (dp `plusPtr` 3) dNext (n + 3)\n                    withForeignPtr dfp $ \\ dptr -> fill dptr (sptr `plusPtr` soff) 0\n  where dlen = ((slen + 3) `div` 4) * 3"],"instances":[],"language":{"extensions":["BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}