{"sliceID":155863841078474221,"uses":[{"reference":{"otherSlice":502464163944568234},"usedName":{"valueName":{"identifier":"runSTUArray"}},"qualification":null},{"reference":{"otherSlice":7235567377809295464},"usedName":{"valueName":{"identifier":"length"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"otherSlice":7493882458078027726},"usedName":{"valueName":{"identifier":"unsafeIndex"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"||"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"/="}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":5632142578980093812},"usedName":{"valueName":{"identifier":"newArray_"}},"qualification":null},{"reference":{"otherSlice":5632142578980093812},"usedName":{"valueName":{"identifier":"unsafeWrite"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":">>"}},"qualification":null},{"reference":{"otherSlice":5632142578980093812},"usedName":{"valueName":{"identifier":"unsafeRead"}},"qualification":null},{"reference":{"otherSlice":4010822550476529195},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"S"},{"reference":{"otherSlice":5288367503661172006},"usedName":{"typeName":{"identifier":"UArray"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null}],"fragment":["suffLengths :: S.ByteString -> UArray Int Int","suffLengths pat\n  = runSTUArray\n      (do let !patLen = S.length pat\n              !patEnd = patLen - 1\n              !preEnd = patEnd - 1\n              {-# INLINE patAt #-}\n              patAt i = unsafeIndex pat i\n              !pe = patAt patEnd\n              dec !diff !j\n                | j < 0 || patAt j /= patAt (j + diff) = j\n                | otherwise = dec diff (j - 1)\n          ar <- newArray_ (0, patEnd)\n          unsafeWrite ar patEnd patLen\n          let noSuff !i\n                | i < 0 = return ar\n                | patAt i == pe =\n                  do let !diff = patEnd - i\n                         !nextI = i - 1\n                         !prevI = dec diff nextI\n                     if prevI == nextI then unsafeWrite ar i 1 >> noSuff nextI else\n                       do unsafeWrite ar i (i - prevI)\n                          suffLoop prevI preEnd nextI\n                | otherwise =\n                  do unsafeWrite ar i 0\n                     noSuff (i - 1)\n              suffLoop !pre !end !idx\n                | idx < 0 = return ar\n                | pre < idx =\n                  if patAt idx /= pe then\n                    unsafeWrite ar idx 0 >> suffLoop pre (end - 1) (idx - 1) else\n                    do prevS <- unsafeRead ar end\n                       if pre + prevS < idx then\n                         do unsafeWrite ar idx prevS\n                            suffLoop pre (end - 1) (idx - 1)\n                         else\n                         do let !prI = dec (patEnd - idx) pre\n                            unsafeWrite ar idx (idx - prI)\n                            suffLoop prI preEnd (idx - 1)\n                | otherwise = noSuff idx\n          noSuff preEnd)"],"instances":[],"language":{"extensions":["BangPatterns","FlexibleContexts","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}