{"sliceID":6144438486772493569,"uses":[{"reference":{"otherSlice":6598411705420963928},"usedName":{"valueName":{"identifier":"checkLength"}},"qualification":"Ck"},{"reference":{"otherSlice":4956884951746098628},"usedName":{"constructorName":{"identifier":"Internal"},"constructorTypeName":{"identifier":"Checks"}},"qualification":"Ck"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":3004867841528755180},"usedName":{"valueName":{"identifier":"unsafeNew"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"otherSlice":2403735926070941450},"usedName":{"valueName":{"identifier":"checkIndex"}},"qualification":"Ck"},{"reference":{"otherSlice":7447414200794448241},"usedName":{"valueName":{"identifier":"unsafeWrite"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":9212898680022400395},"usedName":{"valueName":{"identifier":"foldM'"}},"qualification":"MBundle"},{"reference":{"otherSlice":2686125781807725101},"usedName":{"valueName":{"identifier":"checkSlice"}},"qualification":"Ck"},{"reference":{"otherSlice":9056219066746679510},"usedName":{"valueName":{"identifier":"unsafeSlice"}},"qualification":null},{"reference":{"otherSlice":3326759671840124085},"usedName":{"typeName":{"identifier":"PrimMonad"}},"qualification":null},{"reference":{"otherSlice":4641953017354057066},"usedName":{"typeName":{"identifier":"MVector"}},"qualification":null},{"reference":{"otherSlice":1801160994859441906},"usedName":{"typeName":{"identifier":"MBundle"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"otherSlice":3326759671840124085},"usedName":{"typeName":{"identifier":"PrimState"}},"qualification":null}],"fragment":["munstreamRMax ::\n                (PrimMonad m, MVector v a) =>\n                MBundle m u a -> Int -> m (v (PrimState m) a)","munstreamRMax s n\n  = do v <- ((Ck.checkLength \"Data/Vector/Generic/Mutable.hs\" 469)\n               Ck.Internal)\n              \"munstreamRMax\"\n              n\n              $ unsafeNew n\n       let put i x\n             = do let i' = i - 1\n                  ((Ck.checkIndex \"Data/Vector/Generic/Mutable.hs\" 473) Ck.Internal)\n                    \"munstreamRMax\"\n                    i'\n                    n\n                    $ unsafeWrite v i' x\n                  return i'\n       i <- MBundle.foldM' put n s\n       return $\n         ((Ck.checkSlice \"Data/Vector/Generic/Mutable.hs\" 477) Ck.Internal)\n           \"munstreamRMax\"\n           i\n           (n - i)\n           n\n           $ unsafeSlice i (n - i) v"],"instances":[],"language":{"extensions":["MultiParamTypeClasses","FlexibleContexts","BangPatterns","TypeFamilies","ScopedTypeVariables","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}