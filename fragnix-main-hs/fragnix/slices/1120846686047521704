{"sliceID":1120846686047521704,"uses":[{"reference":{"otherSlice":2332792786326895280},"usedName":{"typeName":{"identifier":"RegexMaker"}},"qualification":null},{"reference":{"otherSlice":1541402738797772585},"usedName":{"typeName":{"identifier":"Regex"}},"qualification":null},{"reference":{"otherSlice":2092002969156417304},"usedName":{"typeName":{"identifier":"CompOption"}},"qualification":null},{"reference":{"otherSlice":6777075013164680088},"usedName":{"typeName":{"identifier":"ExecOption"}},"qualification":null},{"reference":{"otherSlice":7233619382983855062},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"L"},{"reference":{"otherSlice":2332792786326895280},"usedName":{"valueName":{"identifier":"makeRegexOpts"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Unsafe"},"usedName":{"valueName":{"identifier":"unsafePerformIO"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":82673480206707472},"usedName":{"valueName":{"identifier":"compile"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":">>="}},"qualification":null},{"reference":{"otherSlice":4153463053231619764},"usedName":{"valueName":{"identifier":"unwrap"}},"qualification":null},{"reference":{"otherSlice":2332792786326895280},"usedName":{"valueName":{"identifier":"makeRegexOptsM"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"valueName":{"identifier":"either"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fail"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"builtinModule":"GHC.Show"},"usedName":{"valueName":{"identifier":"show"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null}],"fragment":["instance RegexMaker Regex CompOption ExecOption L.ByteString where\n        makeRegexOpts c e pattern\n          = unsafePerformIO $ compile c e pattern >>= unwrap\n        makeRegexOptsM c e pattern\n          = either (fail . show) return $\n              unsafePerformIO $ compile c e pattern"],"instances":[],"language":{"extensions":["MultiParamTypeClasses","FunctionalDependencies","ForeignFunctionInterface","GeneralizedNewtypeDeriving","FlexibleContexts","TypeSynonymInstances","FlexibleInstances","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":true}}