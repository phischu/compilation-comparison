{"sliceID":2197579575566656888,"uses":[{"reference":{"otherSlice":8587154504401928891},"usedName":{"valueName":{"identifier":"catch"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"valueName":{"identifier":"maybe"}},"qualification":null},{"reference":{"otherSlice":8956807621460794744},"usedName":{"valueName":{"identifier":"throwM"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":8587154504401928891},"usedName":{"typeName":{"identifier":"MonadCatch"}},"qualification":null},{"reference":{"builtinModule":"GHC.Exception"},"usedName":{"typeName":{"identifier":"Exception"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null}],"fragment":["catchJust ::\n            (MonadCatch m, Exception e) =>\n            (e -> Maybe b) -> m a -> (b -> m a) -> m a","catchJust f a b = a `catch` \\ e -> maybe (throwM e) b $ f e"],"instances":[],"language":{"extensions":["ExistentialQuantification","GeneralizedNewtypeDeriving","RankNTypes","FlexibleInstances","MultiParamTypeClasses","UndecidableInstances","TypeFamilies","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}