{"sliceID":3860755822470827222,"uses":[{"reference":{"builtinModule":"GHC.Integer.GMP.Internals"},"usedName":{"constructorName":{"identifier":"S#"},"constructorTypeName":{"identifier":"Integer"}},"qualification":null},{"reference":{"otherSlice":3713672384832793283},"usedName":{"valueName":{"identifier":"decimal"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"I#"},"constructorTypeName":{"identifier":"Int"}},"qualification":null},{"reference":{"otherSlice":1788853585701132976},"usedName":{"valueName":{"identifier":"hexadecimal"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"otherSlice":8378023634612553177},"usedName":{"valueName":{"identifier":"singleton"}},"qualification":null},{"reference":{"otherSlice":8353186781522313059},"usedName":{"valueName":{"operator":"<>"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"identifier":"fromInteger"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"*"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">"}},"qualification":null},{"reference":{"builtinModule":"GHC.Integer"},"usedName":{"valueName":{"identifier":"quotRemInteger"}},"qualification":null},{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"error"}},"qualification":null},{"reference":{"otherSlice":5674923790478697175},"usedName":{"constructorName":{"identifier":"T"},"constructorTypeName":{"identifier":"T"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"until"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"builtinModule":"GHC.Enum"},"usedName":{"valueName":{"identifier":"maxBound"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"mempty"}},"qualification":"Data.Monoid"},{"reference":{"otherSlice":3645198897320373969},"usedName":{"typeName":{"identifier":"Builder"}},"qualification":null},{"reference":{"otherSlice":2431610183294142972},"usedName":{"valueName":{"identifier":"hexDigit"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"quotInt"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"remInt"}},"qualification":null},{"reference":{"builtinModule":"GHC.Integer.GMP.Internals"},"usedName":{"typeName":{"identifier":"Integer"}},"qualification":null}],"fragment":["integer :: Int -> Integer -> Builder","integer 10 (S# i#) = decimal (I# i#)\ninteger 16 (S# i#) = hexadecimal (I# i#)\ninteger base i\n  | i < 0 = singleton '-' <> go (-i)\n  | otherwise = go i\n  where go n\n          | n < maxInt = int (fromInteger n)\n          | otherwise = putH (splitf (maxInt * maxInt) n)\n        splitf p n\n          | p > n = [n]\n          | otherwise = splith p (splitf (p * p) n)\n        splith p (n : ns)\n          = case n `quotRemInteger` p of\n                (# q, r #) | q > 0 -> q : r : splitb p ns\n                           | otherwise -> r : splitb p ns\n        splith _ _ = error \"splith: the impossible happened.\"\n        splitb p (n : ns)\n          = case n `quotRemInteger` p of\n                (# q, r #) -> q : r : splitb p ns\n        splitb _ _ = []\n        T maxInt10 maxDigits10\n          = until ((> mi) . (* 10) . fstT) (\\ (T n d) -> T (n * 10) (d + 1))\n              (T 10 1)\n          where mi = fromIntegral (maxBound :: Int)\n        T maxInt16 maxDigits16\n          = until ((> mi) . (* 16) . fstT) (\\ (T n d) -> T (n * 16) (d + 1))\n              (T 16 1)\n          where mi = fromIntegral (maxBound :: Int)\n        fstT (T a _) = a\n        maxInt\n          | base == 10 = maxInt10\n          | otherwise = maxInt16\n        maxDigits\n          | base == 10 = maxDigits10\n          | otherwise = maxDigits16\n        putH (n : ns)\n          = case n `quotRemInteger` maxInt of\n                (# x, y #) | q > 0 -> int q <> pblock r <> putB ns\n                           | otherwise -> int r <> putB ns\n                  where q = fromInteger x\n                        r = fromInteger y\n        putH _ = error \"putH: the impossible happened\"\n        putB (n : ns)\n          = case n `quotRemInteger` maxInt of\n                (# x, y #) -> pblock q <> pblock r <> putB ns\n                  where q = fromInteger x\n                        r = fromInteger y\n        putB _ = Data.Monoid.mempty\n        \n        int :: Int -> Builder\n        int x\n          | base == 10 = decimal x\n          | otherwise = hexadecimal x\n        pblock = loop maxDigits\n          where loop !d !n\n                  | d == 1 = hexDigit n\n                  | otherwise = loop (d - 1) q <> hexDigit r\n                  where q = n `quotInt` base\n                        r = n `remInt` base"],"instances":[],"language":{"extensions":["BangPatterns","MagicHash","RankNTypes","ScopedTypeVariables","UnboxedTuples","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}