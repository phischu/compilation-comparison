{"sliceID":7728950129673121783,"uses":[{"reference":{"otherSlice":8011917848744696410},"usedName":{"valueName":{"identifier":"zipWithM"}},"qualification":"M"},{"reference":{"otherSlice":2808469878037642740},"usedName":{"valueName":{"identifier":"lift"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Monad"}},"qualification":null},{"reference":{"otherSlice":5873523979145974553},"usedName":{"typeName":{"identifier":"Bundle"}},"qualification":null},{"reference":{"otherSlice":5841983516172584459},"usedName":{"typeName":{"identifier":"Bundle"}},"qualification":"M"}],"fragment":["zipWithM ::\n           Monad m =>\n           (a -> b -> m c) -> Bundle v a -> Bundle v b -> M.Bundle m v c","zipWithM f as bs = M.zipWithM f (lift as) (lift bs)"],"instances":[],"language":{"extensions":["FlexibleInstances","Rank2Types","BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}