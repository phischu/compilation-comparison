{"sliceID":5641749074508611076,"uses":[{"reference":{"builtinModule":"Data.Functor"},"usedName":{"valueName":{"operator":"<$>"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"foldl'"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"splitAt"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"length"}},"qualification":null},{"reference":{"otherSlice":1881500770306494767},"usedName":{"valueName":{"identifier":"mkSubst"}},"qualification":null},{"reference":{"otherSlice":456829821694774674},"usedName":{"valueName":{"identifier":"substType"}},"qualification":null}],"fragment":["expandSyn :: Type -> Q Type","expandSyn (ForallT tvs ctx t) = ForallT tvs ctx <$> expandSyn t\nexpandSyn t@AppT{} = expandSynApp t []\nexpandSyn t@ConT{} = expandSynApp t []\nexpandSyn (SigT t k)\n  = do t' <- expandSyn t\n       k' <- expandSynKind k\n       return (SigT t' k')\nexpandSyn t = return t","expandSynKind :: Kind -> Q Kind","expandSynKind = expandSyn","expandSynApp :: Type -> [Type] -> Q Type","expandSynApp (AppT t1 t2) ts\n  = do t2' <- expandSyn t2\n       expandSynApp t1 (t2' : ts)\nexpandSynApp (ConT n) ts\n  | nameBase n == \"[]\" = return $ foldl' AppT ListT ts\nexpandSynApp t@(ConT n) ts\n  = do info <- reify n\n       case info of\n           TyConI (TySynD _ tvs rhs) -> let (ts', ts'')\n                                              = splitAt (length tvs) ts\n                                            subs = mkSubst tvs ts'\n                                            rhs' = substType subs rhs\n                                          in expandSynApp rhs' ts''\n           _ -> return $ foldl' AppT t ts\nexpandSynApp t ts\n  = do t' <- expandSyn t\n       return $ foldl' AppT t' ts"],"instances":[],"language":{"extensions":["BangPatterns","FlexibleInstances","NamedFieldPuns","NoImplicitPrelude","UndecidableInstances","TemplateHaskellQuotes","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards","TemplateHaskell"],"isInstance":false}}