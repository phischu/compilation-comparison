{"sliceID":4234543146634769846,"uses":[{"reference":{"otherSlice":2208939782328074699},"usedName":{"valueName":{"identifier":"wantInput"}},"qualification":null},{"reference":{"otherSlice":5638772619959052319},"usedName":{"valueName":{"identifier":"get"}},"qualification":null},{"reference":{"otherSlice":1404171709816023738},"usedName":{"valueName":{"identifier":"advance"}},"qualification":null},{"reference":{"otherSlice":2162502551344372029},"usedName":{"valueName":{"identifier":"length"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"reverse"}},"qualification":null},{"reference":{"otherSlice":1318512042216165404},"usedName":{"typeName":{"identifier":"Parser"}},"qualification":null},{"reference":{"otherSlice":6742866475076404776},"usedName":{"typeName":{"identifier":"Text"}},"qualification":null}],"fragment":["takeRest :: Parser [Text]","takeRest = go []\n  where go acc\n          = do input <- wantInput\n               if input then\n                 do s <- get\n                    advance (length s)\n                    go (s : acc)\n                 else return (reverse acc)"],"instances":[],"language":{"extensions":["BangPatterns","FlexibleInstances","GADTs","OverloadedStrings","Rank2Types","RecordWildCards","TypeFamilies","TypeSynonymInstances","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}