{"sliceID":2521659189369003566,"uses":[{"reference":{"otherSlice":2315430096611568222},"usedName":{"typeName":{"identifier":"UUID"}},"qualification":null},{"reference":{"builtinModule":"GHC.Ptr"},"usedName":{"typeName":{"identifier":"Ptr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Word"},"usedName":{"typeName":{"identifier":"Word8"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"otherSlice":84888484770246569},"usedName":{"valueName":{"identifier":"toWords"}},"qualification":null},{"reference":{"builtinModule":"Foreign.Storable"},"usedName":{"valueName":{"identifier":"pokeElemOff"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"identifier":"shiftR"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"operator":".&."}},"qualification":null},{"reference":{"builtinModule":"GHC.Word"},"usedName":{"typeName":{"identifier":"Word32"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null}],"fragment":["pokeASCII :: UUID -> Ptr Word8 -> IO ()","pokeASCII uuid ptr\n  = do pokeDash 8\n       pokeDash 13\n       pokeDash 18\n       pokeDash 23\n       pokeSingle 0 w0\n       pokeDouble 9 w1\n       pokeDouble 19 w2\n       pokeSingle 28 w3\n  where (w0, w1, w2, w3) = toWords uuid\n        pokeDash ix = pokeElemOff ptr ix 45\n        pokeSingle ix w\n          = do pokeWord ix w 28\n               pokeWord (ix + 1) w 24\n               pokeWord (ix + 2) w 20\n               pokeWord (ix + 3) w 16\n               pokeWord (ix + 4) w 12\n               pokeWord (ix + 5) w 8\n               pokeWord (ix + 6) w 4\n               pokeWord (ix + 7) w 0\n        pokeDouble ix w\n          = do pokeWord ix w 28\n               pokeWord (ix + 1) w 24\n               pokeWord (ix + 2) w 20\n               pokeWord (ix + 3) w 16\n               pokeWord (ix + 5) w 12\n               pokeWord (ix + 6) w 8\n               pokeWord (ix + 7) w 4\n               pokeWord (ix + 8) w 0\n        pokeWord ix w r\n          = pokeElemOff ptr ix\n              (fromIntegral (toDigit ((w `shiftR` r) .&. 15)))\n        \n        toDigit :: Word32 -> Word32\n        toDigit w = if w < 10 then 48 + w else 97 + w - 10"],"instances":[],"language":{"extensions":["DeriveDataTypeable","TypeFamilies","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}