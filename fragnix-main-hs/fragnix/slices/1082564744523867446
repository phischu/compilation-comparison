{"sliceID":1082564744523867446,"uses":[{"reference":{"builtinModule":"Control.Monad.Fix"},"usedName":{"typeName":{"identifier":"MonadFix"}},"qualification":null},{"reference":{"otherSlice":836250808765999032},"usedName":{"typeName":{"identifier":"Array"}},"qualification":null},{"reference":{"builtinModule":"Control.Monad.Fix"},"usedName":{"valueName":{"identifier":"mfix"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"toList"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"builtinModule":"GHC.Exts"},"usedName":{"valueName":{"identifier":"fromListN"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"length"}},"qualification":null}],"fragment":["instance MonadFix Array where\n        mfix f = let l = mfix (toList . f) in fromListN (length l) l"],"instances":[],"language":{"extensions":["MagicHash","UnboxedTuples","DeriveDataTypeable","BangPatterns","RankNTypes","TypeFamilies","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":true}}