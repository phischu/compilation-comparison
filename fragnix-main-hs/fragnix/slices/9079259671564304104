{"sliceID":9079259671564304104,"uses":[{"reference":{"otherSlice":5413756915200985750},"usedName":{"typeName":{"identifier":"TBQueue"}},"qualification":null},{"reference":{"otherSlice":1936115390264180453},"usedName":{"typeName":{"identifier":"Sequence"}},"qualification":null},{"reference":{"otherSlice":2801635089134887690},"usedName":{"typeName":{"identifier":"Stream"}},"qualification":null},{"reference":{"otherSlice":9117606929373792949},"usedName":{"typeName":{"identifier":"Leftover"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":8422411450248709681},"usedName":{"typeName":{"identifier":"BytesFilled"}},"qualification":null},{"reference":{"otherSlice":6632841070279347397},"usedName":{"typeName":{"identifier":"Next"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"False"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":6632841070279347397},"usedName":{"constructorName":{"identifier":"Next"},"constructorTypeName":{"identifier":"Next"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"True"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Ptr"},"usedName":{"valueName":{"identifier":"plusPtr"}},"qualification":null},{"reference":{"otherSlice":829999802279960389},"usedName":{"valueName":{"identifier":"frameHeaderLength"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"min"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"otherSlice":9117606929373792949},"usedName":{"constructorName":{"identifier":"LZero"},"constructorTypeName":{"identifier":"Leftover"}},"qualification":null},{"reference":{"otherSlice":4156642968506792875},"usedName":{"valueName":{"identifier":"runStreamBuilder"}},"qualification":null},{"reference":{"otherSlice":9117606929373792949},"usedName":{"constructorName":{"identifier":"LOne"},"constructorTypeName":{"identifier":"Leftover"}},"qualification":null},{"reference":{"otherSlice":9117606929373792949},"usedName":{"constructorName":{"identifier":"LTwo"},"constructorTypeName":{"identifier":"Leftover"}},"qualification":null},{"reference":{"otherSlice":7235567377809295464},"usedName":{"valueName":{"identifier":"length"}},"qualification":"BS"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<="}},"qualification":null},{"reference":{"otherSlice":6389867443957913839},"usedName":{"valueName":{"identifier":"copy"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":3681333600918143498},"usedName":{"valueName":{"identifier":"splitAt"}},"qualification":"BS"},{"reference":{"builtinModule":"Data.Functor"},"usedName":{"valueName":{"identifier":"void"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":6247261920417293319},"usedName":{"constructorName":{"identifier":"Done"},"constructorTypeName":{"identifier":"Next"}},"qualification":"B"},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":6247261920417293319},"usedName":{"constructorName":{"identifier":"More"},"constructorTypeName":{"identifier":"Next"}},"qualification":"B"},{"reference":{"otherSlice":6247261920417293319},"usedName":{"constructorName":{"identifier":"Chunk"},"constructorTypeName":{"identifier":"Next"}},"qualification":"B"},{"reference":{"otherSlice":6632841070279347397},"usedName":{"typeName":{"identifier":"DynaNext"}},"qualification":null}],"fragment":["nextForStream ::\n              TBQueue Sequence ->\n                Stream -> Leftover -> Bool -> BytesFilled -> Next","nextForStream _ _ _ False len = Next len Nothing\nnextForStream sq strm leftOrZero True len\n  = Next len $ Just (fillBufStream leftOrZero sq strm)","fillBufStream :: Leftover -> TBQueue Sequence -> Stream -> DynaNext","fillBufStream leftover0 sq strm buf0 siz0 lim0\n  = do let payloadBuf = buf0 `plusPtr` frameHeaderLength\n           room0 = min (siz0 - frameHeaderLength) lim0\n       case leftover0 of\n           LZero -> do (leftover, cont, len) <- runStreamBuilder payloadBuf\n                                                  room0\n                                                  sq\n                       getNext leftover cont len\n           LOne writer -> write writer payloadBuf room0 0\n           LTwo bs writer | BS.length bs <= room0 ->\n                            do buf1 <- copy payloadBuf bs\n                               let len = BS.length bs\n                               write writer buf1 (room0 - len) len\n                          | otherwise ->\n                            do let (bs1, bs2) = BS.splitAt room0 bs\n                               void $ copy payloadBuf bs1\n                               getNext (LTwo bs2 writer) True room0\n  where getNext l b r = return $ nextForStream sq strm l b r\n        write writer1 buf room sofar\n          = do (len, signal) <- writer1 buf room\n               case signal of\n                   B.Done -> do (leftover, cont, extra) <- runStreamBuilder\n                                                             (buf `plusPtr` len)\n                                                             (room - len)\n                                                             sq\n                                let !total = sofar + len + extra\n                                getNext leftover cont total\n                   B.More _ writer -> do let !total = sofar + len\n                                         getNext (LOne writer) True total\n                   B.Chunk bs writer -> do let !total = sofar + len\n                                           getNext (LTwo bs writer) True total"],"instances":[],"language":{"extensions":["OverloadedStrings","BangPatterns","NamedFieldPuns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}