{"sliceID":2648672313191447527,"uses":[{"reference":{"otherSlice":7235567377809295464},"usedName":{"valueName":{"identifier":"length"}},"qualification":"S"},{"reference":{"otherSlice":3497946061830860787},"usedName":{"valueName":{"identifier":"lazyBreak"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"null"}},"qualification":null},{"reference":{"otherSlice":1338766327385976014},"usedName":{"valueName":{"identifier":"lsplit"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"++"}},"qualification":null},{"reference":{"otherSlice":4010822550476529195},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"S"}],"fragment":["lazySplitKeepEnd ::\n                 S.ByteString -> [S.ByteString] -> [[S.ByteString]]","lazySplitKeepEnd pat = splitter\n  where !patLen = S.length pat\n        breaker = lazyBreak pat\n        splitter [] = []\n        splitter strs\n          = case breaker strs of\n                (pre, mtch) -> let (h : t)\n                                     = if null mtch then [[]] else\n                                         case lsplit patLen mtch of\n                                             (pt, rst) -> pt : splitter rst\n                                 in (pre ++ h) : t"],"instances":[],"language":{"extensions":["BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}