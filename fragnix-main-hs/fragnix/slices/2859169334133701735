{"sliceID":2859169334133701735,"uses":[{"reference":{"otherSlice":5828371041114264500},"usedName":{"constructorName":{"identifier":"ActionT"},"constructorTypeName":{"identifier":"ActionT"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"Control.Monad"},"usedName":{"valueName":{"identifier":"liftM"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"lookup"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"otherSlice":5759671536505916877},"usedName":{"valueName":{"identifier":"getParams"}},"qualification":null},{"reference":{"otherSlice":3136612076280178340},"usedName":{"valueName":{"identifier":"ask"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":1211335018906255539},"usedName":{"valueName":{"identifier":"raise"}},"qualification":null},{"reference":{"otherSlice":2677767377697130686},"usedName":{"valueName":{"identifier":"stringError"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"++"}},"qualification":null},{"reference":{"otherSlice":7310166704595832661},"usedName":{"valueName":{"identifier":"unpack"}},"qualification":"T"},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"valueName":{"identifier":"either"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"const"}},"qualification":null},{"reference":{"otherSlice":1689246261428515635},"usedName":{"valueName":{"identifier":"next"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":3584320635980323336},"usedName":{"valueName":{"identifier":"parseParam"}},"qualification":null},{"reference":{"otherSlice":3584320635980323336},"usedName":{"typeName":{"identifier":"Parsable"}},"qualification":null},{"reference":{"otherSlice":2677767377697130686},"usedName":{"typeName":{"identifier":"ScottyError"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Monad"}},"qualification":null},{"reference":{"otherSlice":3835980439088584228},"usedName":{"typeName":{"identifier":"Text"}},"qualification":"T"},{"reference":{"otherSlice":5828371041114264500},"usedName":{"typeName":{"identifier":"ActionT"}},"qualification":null}],"fragment":["param ::\n        (Parsable a, ScottyError e, Monad m) => T.Text -> ActionT e m a","param k\n  = do val <- ActionT $ liftM (lookup k . getParams) ask\n       case val of\n           Nothing -> raise $\n                        stringError $ \"Param: \" ++ T.unpack k ++ \" not found!\"\n           Just v -> either (const next) return $ parseParam v"],"instances":[],"language":{"extensions":["OverloadedStrings","RankNTypes","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}