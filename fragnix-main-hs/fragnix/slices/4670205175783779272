{"sliceID":4670205175783779272,"uses":[{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":8970838521485301512},"usedName":{"constructorName":{"identifier":"Value"},"constructorTypeName":{"identifier":"DateFormatSpec"}},"qualification":null},{"reference":{"otherSlice":2456799273761564459},"usedName":{"valueName":{"identifier":"parseValue"}},"qualification":null},{"reference":{"otherSlice":8970838521485301512},"usedName":{"constructorName":{"identifier":"Literal"},"constructorTypeName":{"identifier":"DateFormatSpec"}},"qualification":null},{"reference":{"otherSlice":7407075264140047003},"usedName":{"valueName":{"identifier":"char"}},"qualification":null},{"reference":{"otherSlice":8970838521485301512},"usedName":{"constructorName":{"identifier":"WhiteSpace"},"constructorTypeName":{"identifier":"DateFormatSpec"}},"qualification":null},{"reference":{"builtinModule":"Text.ParserCombinators.ReadP"},"usedName":{"valueName":{"identifier":"satisfy"}},"qualification":null},{"reference":{"builtinModule":"GHC.Unicode"},"usedName":{"valueName":{"identifier":"isSpace"}},"qualification":null},{"reference":{"builtinModule":"Text.ParserCombinators.ReadP"},"usedName":{"valueName":{"identifier":"skipSpaces"}},"qualification":null},{"reference":{"otherSlice":2448737557573459507},"usedName":{"typeName":{"identifier":"TimeLocale"}},"qualification":null},{"reference":{"otherSlice":1240848182295940330},"usedName":{"typeName":{"identifier":"DateFormat"}},"qualification":null},{"reference":{"builtinModule":"Text.ParserCombinators.ReadP"},"usedName":{"typeName":{"identifier":"ReadP"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Char"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"String"}},"qualification":null}],"fragment":["parseInput :: TimeLocale -> DateFormat -> ReadP [(Char, String)]","parseInput _ [] = return []\nparseInput l (Value mpad c : ff)\n  = do s <- parseValue l mpad c\n       r <- parseInput l ff\n       return ((c, s) : r)\nparseInput l (Literal c : ff)\n  = do _ <- char c\n       parseInput l ff\nparseInput l (WhiteSpace : ff)\n  = do _ <- satisfy isSpace\n       case ff of\n           (WhiteSpace : _) -> return ()\n           _ -> skipSpaces\n       parseInput l ff"],"instances":[],"language":{"extensions":["Rank2Types","DeriveDataTypeable","StandaloneDeriving","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}