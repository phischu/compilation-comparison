{"sliceID":2500031802896226223,"uses":[{"reference":{"otherSlice":5859084506302185979},"usedName":{"valueName":{"identifier":"unstreamM"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":4329260073762643819},"usedName":{"valueName":{"identifier":"zipWithM"}},"qualification":"Stream"},{"reference":{"otherSlice":2700673456966481432},"usedName":{"valueName":{"identifier":"stream"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Monad"}},"qualification":null},{"reference":{"otherSlice":8934491602005769172},"usedName":{"typeName":{"identifier":"Vector"}},"qualification":null}],"fragment":["zipWithM ::\n           (Monad m, Vector v a, Vector v b, Vector v c) =>\n           (a -> b -> m c) -> v a -> v b -> m (v c)","zipWithM f as bs\n  = unstreamM $ Stream.zipWithM f (stream as) (stream bs)"],"instances":[],"language":{"extensions":["DeriveDataTypeable","Rank2Types","MultiParamTypeClasses","FlexibleContexts","TypeFamilies","ScopedTypeVariables","BangPatterns","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}