{"sliceID":3264434311193587893,"uses":[{"reference":{"otherSlice":8765721791877540981},"usedName":{"valueName":{"identifier":"toPair"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":1904543910357874234},"usedName":{"constructorName":{"identifier":"Tip"},"constructorTypeName":{"identifier":"Set"}},"qualification":null},{"reference":{"otherSlice":4609286002637564688},"usedName":{"constructorName":{"operator":":*:"},"constructorTypeName":{"identifier":"StrictPair"}},"qualification":null},{"reference":{"otherSlice":1904543910357874234},"usedName":{"constructorName":{"identifier":"Bin"},"constructorTypeName":{"identifier":"Set"}},"qualification":null},{"reference":{"otherSlice":5593748703179870837},"usedName":{"valueName":{"identifier":"ptrEq"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"otherSlice":5092005356321557259},"usedName":{"valueName":{"identifier":"link"}},"qualification":null},{"reference":{"otherSlice":4476737295422275346},"usedName":{"valueName":{"identifier":"merge"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":1904543910357874234},"usedName":{"typeName":{"identifier":"Set"}},"qualification":null}],"fragment":["partition :: (a -> Bool) -> Set a -> (Set a, Set a)","partition p0 t0 = toPair $ go p0 t0\n  where go _ Tip = (Tip :*: Tip)\n        go p t@(Bin _ x l r)\n          = case (go p l, go p r) of\n                ((l1 :*: l2), (r1 :*: r2)) | p x ->\n                                             (if l1 `ptrEq` l && r1 `ptrEq` r then t else\n                                                link x l1 r1)\n                                               :*: merge l2 r2\n                                           | otherwise ->\n                                             merge l1 r1 :*:\n                                               (if l2 `ptrEq` l && r2 `ptrEq` r then t else\n                                                  link x l2 r2)"],"instances":[],"language":{"extensions":["BangPatterns","PatternGuards","DeriveDataTypeable","StandaloneDeriving","RoleAnnotations","TypeFamilies","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll"],"isInstance":false}}