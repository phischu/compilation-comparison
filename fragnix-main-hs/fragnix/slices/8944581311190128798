{"sliceID":8944581311190128798,"uses":[{"reference":{"builtinModule":"GHC.IO"},"usedName":{"valueName":{"identifier":"throwIO"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":5741664915825101086},"usedName":{"constructorName":{"identifier":"NotEnoughLines"},"constructorTypeName":{"identifier":"InvalidRequest"}},"qualification":null},{"reference":{"otherSlice":9092065935779385159},"usedName":{"valueName":{"identifier":"parseRequestLine"}},"qualification":null},{"reference":{"otherSlice":4733568415032666100},"usedName":{"valueName":{"identifier":"extractPath"}},"qualification":"H"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"map"}},"qualification":null},{"reference":{"otherSlice":5779584734415206632},"usedName":{"valueName":{"identifier":"parseHeader"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":4010822550476529195},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"otherSlice":128995537675764844},"usedName":{"typeName":{"identifier":"Method"}},"qualification":"H"},{"reference":{"otherSlice":3972775607744493639},"usedName":{"typeName":{"identifier":"HttpVersion"}},"qualification":"H"},{"reference":{"otherSlice":3012545620483548984},"usedName":{"typeName":{"identifier":"RequestHeaders"}},"qualification":"H"}],"fragment":["parseHeaderLines ::\n                 [ByteString] ->\n                   IO\n                     (H.Method, ByteString, ByteString, ByteString, H.HttpVersion,\n                      H.RequestHeaders)","parseHeaderLines [] = throwIO $ NotEnoughLines []\nparseHeaderLines (firstLine : otherLines)\n  = do (method, path', query, httpversion) <- parseRequestLine\n                                                firstLine\n       let path = H.extractPath path'\n           hdr = map parseHeader otherLines\n       return (method, path', path, query, httpversion, hdr)"],"instances":[],"language":{"extensions":["OverloadedStrings","BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}