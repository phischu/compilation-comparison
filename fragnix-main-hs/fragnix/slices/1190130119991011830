{"sliceID":1190130119991011830,"uses":[{"reference":{"otherSlice":6591396614006794967},"usedName":{"typeName":{"identifier":"MonadMask"}},"qualification":null},{"reference":{"otherSlice":2862574134681353170},"usedName":{"typeName":{"identifier":"StateT"}},"qualification":"StrictS"},{"reference":{"otherSlice":6591396614006794967},"usedName":{"valueName":{"identifier":"mask"}},"qualification":null},{"reference":{"otherSlice":2862574134681353170},"usedName":{"constructorName":{"identifier":"StateT"},"constructorTypeName":{"identifier":"StateT"}},"qualification":"StrictS"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":2862574134681353170},"usedName":{"valueName":{"identifier":"runStateT"}},"qualification":"StrictS"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"otherSlice":6591396614006794967},"usedName":{"valueName":{"identifier":"uninterruptibleMask"}},"qualification":null}],"fragment":["instance MonadMask m => MonadMask (StrictS.StateT s m) where\n        mask a\n          = StrictS.StateT $\n              \\ s -> mask $ \\ u -> StrictS.runStateT (a $ q u) s\n          where q ::\n                  (m (a, s) -> m (a, s)) ->\n                    StrictS.StateT s m a -> StrictS.StateT s m a\n                q u (StrictS.StateT b) = StrictS.StateT (u . b)\n        uninterruptibleMask a\n          = StrictS.StateT $\n              \\ s -> uninterruptibleMask $ \\ u -> StrictS.runStateT (a $ q u) s\n          where q ::\n                  (m (a, s) -> m (a, s)) ->\n                    StrictS.StateT s m a -> StrictS.StateT s m a\n                q u (StrictS.StateT b) = StrictS.StateT (u . b)"],"instances":[],"language":{"extensions":["ExistentialQuantification","GeneralizedNewtypeDeriving","RankNTypes","FlexibleInstances","MultiParamTypeClasses","UndecidableInstances","TypeFamilies","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":true}}