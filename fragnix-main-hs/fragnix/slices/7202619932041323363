{"sliceID":7202619932041323363,"uses":[{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"when"}},"qualification":null},{"reference":{"otherSlice":6735251430614770144},"usedName":{"valueName":{"identifier":"demandInput"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"=<<"}},"qualification":null},{"reference":{"otherSlice":8181669363308688327},"usedName":{"valueName":{"identifier":"endOfChunk"}},"qualification":null},{"reference":{"otherSlice":867240739848904414},"usedName":{"valueName":{"identifier":"takeWhile"}},"qualification":"T"},{"reference":{"builtinModule":"Data.Functor"},"usedName":{"valueName":{"operator":"<$>"}},"qualification":null},{"reference":{"otherSlice":9026227396759938023},"usedName":{"valueName":{"identifier":"get"}},"qualification":null},{"reference":{"otherSlice":8815246374892258961},"usedName":{"valueName":{"identifier":"size"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fail"}},"qualification":null},{"reference":{"otherSlice":7133367760469904600},"usedName":{"valueName":{"identifier":"advance"}},"qualification":null},{"reference":{"otherSlice":7249385169843143368},"usedName":{"valueName":{"identifier":"takeWhileAcc"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Char"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":915346971857185237},"usedName":{"typeName":{"identifier":"Parser"}},"qualification":null},{"reference":{"otherSlice":2241541392207318616},"usedName":{"typeName":{"identifier":"Text"}},"qualification":null}],"fragment":["takeWhile1 :: (Char -> Bool) -> Parser Text","takeWhile1 p\n  = do (`when` demandInput) =<< endOfChunk\n       h <- T.takeWhile p <$> get\n       let size' = size h\n       when (size' == 0) $ fail \"takeWhile1\"\n       advance size'\n       eoc <- endOfChunk\n       if eoc then takeWhileAcc p [h] else return h"],"instances":[],"language":{"extensions":["BangPatterns","FlexibleInstances","GADTs","OverloadedStrings","Rank2Types","RecordWildCards","TypeFamilies","TypeSynonymInstances","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}