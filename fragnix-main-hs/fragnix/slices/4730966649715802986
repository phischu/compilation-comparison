{"sliceID":4730966649715802986,"uses":[{"reference":{"otherSlice":8651862265223889960},"usedName":{"typeName":{"identifier":"RegexOptions"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Monad"}},"qualification":null},{"reference":{"otherSlice":8651862265223889960},"usedName":{"valueName":{"identifier":"defaultCompOpt"}},"qualification":null},{"reference":{"otherSlice":8651862265223889960},"usedName":{"valueName":{"identifier":"defaultExecOpt"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"valueName":{"identifier":"maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"error"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"id"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null}],"fragment":["class (RegexOptions regex compOpt execOpt) => RegexMaker regex\n      compOpt execOpt source\n      | regex -> compOpt execOpt, compOpt -> regex execOpt,\n        execOpt -> regex compOpt\n      where\n        makeRegex :: source -> regex\n        \n        makeRegexOpts :: compOpt -> execOpt -> source -> regex\n        \n        makeRegexM :: (Monad m) => source -> m regex\n        \n        makeRegexOptsM ::\n                         (Monad m) => compOpt -> execOpt -> source -> m regex\n        makeRegex = makeRegexOpts defaultCompOpt defaultExecOpt\n        makeRegexM = makeRegexOptsM defaultCompOpt defaultExecOpt\n        makeRegexOpts c e s\n          = maybe (error \"makeRegexOpts failed\") id (makeRegexOptsM c e s)\n        makeRegexOptsM c e s = return (makeRegexOpts c e s)"],"instances":[{"instanceID":6976189385483161633,"instancePart":"OfClass"},{"instanceID":2255198571014443507,"instancePart":"OfClass"},{"instanceID":5205476134334158571,"instancePart":"OfClass"},{"instanceID":9131524928232204124,"instancePart":"OfClass"}],"language":{"extensions":["MultiParamTypeClasses","FunctionalDependencies","TypeSynonymInstances","FlexibleInstances","FlexibleContexts","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}