{"sliceID":5642472482449951623,"uses":[{"reference":{"otherSlice":5417185115511347397},"usedName":{"valueName":{"identifier":"zipWith'"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"minimum"}},"qualification":null},{"reference":{"otherSlice":7787832157326777448},"usedName":{"valueName":{"identifier":"length"}},"qualification":null},{"reference":{"otherSlice":5443748986161845340},"usedName":{"valueName":{"identifier":"take"}},"qualification":null},{"reference":{"otherSlice":9208044541903137161},"usedName":{"typeName":{"identifier":"Seq"}},"qualification":null}],"fragment":["zipWith3 :: (a -> b -> c -> d) -> Seq a -> Seq b -> Seq c -> Seq d","zipWith3 f s1 s2 s3 = zipWith' ($) (zipWith' f s1' s2') s3'\n  where minLen = minimum [length s1, length s2, length s3]\n        s1' = take minLen s1\n        s2' = take minLen s2\n        s3' = take minLen s3"],"instances":[],"language":{"extensions":["BangPatterns","DeriveDataTypeable","StandaloneDeriving","FlexibleInstances","ScopedTypeVariables","DeriveGeneric","TypeFamilies","PatternSynonyms","ViewPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}