{"sliceID":6109735683314530702,"uses":[{"reference":{"otherSlice":2109377013281436257},"usedName":{"valueName":{"identifier":"empty"}},"qualification":"B"},{"reference":{"otherSlice":8642306666063513779},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":null},{"reference":{"otherSlice":1176508231508213633},"usedName":{"typeName":{"identifier":"CodePoint"}},"qualification":null},{"reference":{"otherSlice":905118444108138319},"usedName":{"typeName":{"identifier":"DecoderState"}},"qualification":null},{"reference":{"otherSlice":3854948120027470085},"usedName":{"typeName":{"identifier":"Decoding"}},"qualification":null},{"reference":{"otherSlice":8642306666063513779},"usedName":{"constructorName":{"identifier":"PS"},"constructorTypeName":{"identifier":"ByteString"}},"qualification":null},{"reference":{"builtinModule":"GHC.ST"},"usedName":{"valueName":{"identifier":"runST"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO"},"usedName":{"valueName":{"identifier":"unsafeIOToST"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"builtinModule":"Control.Monad"},"usedName":{"valueName":{"operator":"=<<"}},"qualification":null},{"reference":{"otherSlice":303218261714130477},"usedName":{"valueName":{"identifier":"new"}},"qualification":"A"},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":3588273259683486231},"usedName":{"typeName":{"identifier":"MArray"}},"qualification":"A"},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"builtinModule":"Foreign.ForeignPtr"},"usedName":{"valueName":{"identifier":"withForeignPtr"}},"qualification":null},{"reference":{"builtinModule":"Foreign.Marshal.Utils"},"usedName":{"valueName":{"identifier":"with"}},"qualification":null},{"reference":{"builtinModule":"Foreign.C.Types"},"usedName":{"typeName":{"identifier":"CSize"}},"qualification":null},{"reference":{"builtinModule":"GHC.Ptr"},"usedName":{"valueName":{"identifier":"nullPtr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Ptr"},"usedName":{"valueName":{"identifier":"plusPtr"}},"qualification":null},{"reference":{"builtinModule":"Foreign.Storable"},"usedName":{"valueName":{"identifier":"poke"}},"qualification":null},{"reference":{"otherSlice":6920568761407201113},"usedName":{"valueName":{"identifier":"c_decode_utf8_with_state"}},"qualification":null},{"reference":{"otherSlice":3588273259683486231},"usedName":{"valueName":{"identifier":"maBA"}},"qualification":"A"},{"reference":{"builtinModule":"Foreign.Storable"},"usedName":{"valueName":{"identifier":"peek"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO"},"usedName":{"valueName":{"identifier":"unsafeSTToIO"}},"qualification":null},{"reference":{"otherSlice":4464944826426021000},"usedName":{"valueName":{"identifier":"unsafeWrite"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"otherSlice":8373764884202541830},"usedName":{"valueName":{"identifier":"safe"}},"qualification":null},{"reference":{"otherSlice":2495787221593611115},"usedName":{"valueName":{"identifier":"unsafeFreeze"}},"qualification":"A"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"Prelude"},"usedName":{"valueName":{"operator":"$!"}},"qualification":null},{"reference":{"otherSlice":4069519914147446271},"usedName":{"valueName":{"identifier":"text"}},"qualification":null},{"reference":{"builtinModule":"GHC.Ptr"},"usedName":{"valueName":{"identifier":"minusPtr"}},"qualification":null},{"reference":{"otherSlice":1524283775147600600},"usedName":{"valueName":{"identifier":"append"}},"qualification":"B"},{"reference":{"otherSlice":6985366053944096403},"usedName":{"valueName":{"identifier":"drop"}},"qualification":"B"},{"reference":{"otherSlice":3854948120027470085},"usedName":{"constructorName":{"identifier":"Some"},"constructorTypeName":{"identifier":"Decoding"}},"qualification":null},{"reference":{"otherSlice":663156760748332554},"usedName":{"typeName":{"identifier":"OnDecodeError"}},"qualification":null}],"fragment":["streamDecodeUtf8With :: OnDecodeError -> ByteString -> Decoding","streamDecodeUtf8With onErr = decodeChunk B.empty 0 0\n  where decodeChunk ::\n                    ByteString -> CodePoint -> DecoderState -> ByteString -> Decoding\n        decodeChunk undecoded0 codepoint0 state0 bs@(PS fp off len)\n          = runST $ (unsafeIOToST . decodeChunkToBuffer) =<< A.new (len + 1)\n          where decodeChunkToBuffer :: A.MArray s -> IO Decoding\n                decodeChunkToBuffer dest\n                  = withForeignPtr fp $\n                      \\ ptr ->\n                        with (0 :: CSize) $\n                          \\ destOffPtr ->\n                            with codepoint0 $\n                              \\ codepointPtr ->\n                                with state0 $\n                                  \\ statePtr ->\n                                    with nullPtr $\n                                      \\ curPtrPtr ->\n                                        let end = ptr `plusPtr` (off + len)\n                                            loop curPtr\n                                              = do poke curPtrPtr curPtr\n                                                   curPtr' <- c_decode_utf8_with_state (A.maBA dest)\n                                                                destOffPtr\n                                                                curPtrPtr\n                                                                end\n                                                                codepointPtr\n                                                                statePtr\n                                                   state <- peek statePtr\n                                                   case state of\n                                                       12 -> do x <- peek curPtr'\n                                                                poke statePtr 0\n                                                                case onErr desc (Just x) of\n                                                                    Nothing -> loop $\n                                                                                 curPtr' `plusPtr` 1\n                                                                    Just c -> do destOff <- peek\n                                                                                              destOffPtr\n                                                                                 w <- unsafeSTToIO $\n                                                                                        unsafeWrite\n                                                                                          dest\n                                                                                          (fromIntegral\n                                                                                             destOff)\n                                                                                          (safe c)\n                                                                                 poke destOffPtr\n                                                                                   (destOff +\n                                                                                      fromIntegral\n                                                                                        w)\n                                                                                 loop $\n                                                                                   curPtr' `plusPtr`\n                                                                                     1\n                                                       _ -> do n <- peek destOffPtr\n                                                               codepoint <- peek codepointPtr\n                                                               chunkText <- unsafeSTToIO $\n                                                                              do arr <- A.unsafeFreeze\n                                                                                          dest\n                                                                                 return $!\n                                                                                   text arr 0\n                                                                                     (fromIntegral\n                                                                                        n)\n                                                               lastPtr <- peek curPtrPtr\n                                                               let left = lastPtr `minusPtr` curPtr\n                                                                   undecoded\n                                                                     = case state of\n                                                                           0 -> B.empty\n                                                                           _ -> B.append undecoded0\n                                                                                  (B.drop left bs)\n                                                               return $\n                                                                 Some chunkText undecoded\n                                                                   (decodeChunk undecoded codepoint\n                                                                      state)\n                                          in loop (ptr `plusPtr` off)\n        desc\n          = \"Data.Text.Internal.Encoding.streamDecodeUtf8With: Invalid UTF-8 stream\""],"instances":[],"language":{"extensions":["BangPatterns","ForeignFunctionInterface","GeneralizedNewtypeDeriving","MagicHash","UnliftedFFITypes","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}