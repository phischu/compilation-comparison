{"sliceID":7900303283662048141,"uses":[{"reference":{"otherSlice":6175150438558393209},"usedName":{"valueName":{"identifier":"uncurryKind"}},"qualification":null},{"reference":{"otherSlice":6445232168978361088},"usedName":{"valueName":{"identifier":"tyKind"}},"qualification":null},{"reference":{"builtinModule":"Data.List.NonEmpty"},"usedName":{"valueName":{"identifier":"length"}},"qualification":"NE"},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"all"}},"qualification":"F"},{"reference":{"otherSlice":8847955596416377253},"usedName":{"valueName":{"identifier":"isStarOrVar"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"concatMap"}},"qualification":null},{"reference":{"otherSlice":8026617754988375709},"usedName":{"valueName":{"identifier":"tyVarNamesOfKind"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null}],"fragment":["hasKindVarChain :: Int -> Type -> Maybe [Name]","hasKindVarChain kindArrows t\n  = let uk = uncurryKind (tyKind t) in\n      if (NE.length uk - 1 == kindArrows) && F.all isStarOrVar uk then\n        Just (concatMap tyVarNamesOfKind uk) else Nothing"],"instances":[],"language":{"extensions":["BangPatterns","FlexibleInstances","NamedFieldPuns","NoImplicitPrelude","UndecidableInstances","TemplateHaskellQuotes","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards","TemplateHaskell"],"isInstance":false}}