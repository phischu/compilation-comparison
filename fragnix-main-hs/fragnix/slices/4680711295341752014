{"sliceID":4680711295341752014,"uses":[{"reference":{"builtinModule":"GHC.Prim"},"usedName":{"valueName":{"identifier":"seq"}},"qualification":null},{"reference":{"otherSlice":3215441896288524948},"usedName":{"constructorName":{"identifier":"Bin"},"constructorTypeName":{"identifier":"IntMap"}},"qualification":null},{"reference":{"otherSlice":2654114007802303743},"usedName":{"valueName":{"identifier":"nomatch"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":9197541295180993364},"usedName":{"valueName":{"identifier":"link"}},"qualification":null},{"reference":{"otherSlice":3215441896288524948},"usedName":{"constructorName":{"identifier":"Tip"},"constructorTypeName":{"identifier":"IntMap"}},"qualification":null},{"reference":{"otherSlice":4724247418787711009},"usedName":{"valueName":{"identifier":"zero"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":3215441896288524948},"usedName":{"constructorName":{"identifier":"Nil"},"constructorTypeName":{"identifier":"IntMap"}},"qualification":null},{"reference":{"otherSlice":937490584395345141},"usedName":{"typeName":{"identifier":"Key"}},"qualification":null},{"reference":{"otherSlice":3215441896288524948},"usedName":{"typeName":{"identifier":"IntMap"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null}],"fragment":["insertLookupWithKey ::\n                    (Key -> a -> a -> a) -> Key -> a -> IntMap a -> (Maybe a, IntMap a)","insertLookupWithKey f k x t\n  = k `seq`\n      case t of\n          Bin p m l r | nomatch k p m -> (Nothing, link k (Tip k x) p t)\n                      | zero k m ->\n                        let (found, l') = insertLookupWithKey f k x l in\n                          (found, Bin p m l' r)\n                      | otherwise ->\n                        let (found, r') = insertLookupWithKey f k x r in\n                          (found, Bin p m l r')\n          Tip ky y | k == ky -> (Just y, Tip k (f k x y))\n                   | otherwise -> (Nothing, link k (Tip k x) ky t)\n          Nil -> (Nothing, Tip k x)"],"instances":[],"language":{"extensions":["MagicHash","DeriveDataTypeable","StandaloneDeriving","ScopedTypeVariables","TypeFamilies","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}