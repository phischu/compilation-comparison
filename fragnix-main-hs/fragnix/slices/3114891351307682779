{"sliceID":3114891351307682779,"uses":[{"reference":{"otherSlice":5578825841720533553},"usedName":{"valueName":{"identifier":"length"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"min"}},"qualification":null},{"reference":{"otherSlice":4640371534066560564},"usedName":{"valueName":{"identifier":"inlinePerformIO"}},"qualification":null},{"reference":{"otherSlice":6155617227112425005},"usedName":{"valueName":{"identifier":"memcmp_ByteArray"}},"qualification":null},{"reference":{"otherSlice":1001877324761913086},"usedName":{"valueName":{"identifier":"asBA"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"LT"},"constructorTypeName":{"identifier":"Ordering"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"GT"},"constructorTypeName":{"identifier":"Ordering"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"EQ"},"constructorTypeName":{"identifier":"Ordering"}},"qualification":null},{"reference":{"otherSlice":6188213077566438041},"usedName":{"typeName":{"identifier":"ShortByteString"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Ordering"}},"qualification":null}],"fragment":["compareBytes :: ShortByteString -> ShortByteString -> Ordering","compareBytes sbs1 sbs2\n  = let !len1 = length sbs1\n        !len2 = length sbs2\n        !len = min len1 len2\n      in\n      case inlinePerformIO (memcmp_ByteArray (asBA sbs1) (asBA sbs2) len)\n        of\n          i | i < 0 -> LT\n            | i > 0 -> GT\n            | len2 > len1 -> LT\n            | len2 < len1 -> GT\n            | otherwise -> EQ"],"instances":[],"language":{"extensions":["DeriveDataTypeable","BangPatterns","RankNTypes","ForeignFunctionInterface","MagicHash","UnboxedTuples","UnliftedFFITypes","Unsafe","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}