{"sliceID":5914724303531045084,"uses":[{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"*"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"Text.Read"},"usedName":{"valueName":{"identifier":"read"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"String"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null}],"fragment":["readTzOffset :: String -> Int","readTzOffset str\n  = case str of\n        (s : (h1 : (h2 : (':' : (m1 : (m2 : [])))))) -> calc s h1 h2 m1 m2\n        (s : (h1 : (h2 : (m1 : (m2 : []))))) -> calc s h1 h2 m1 m2\n        _ -> 0\n  where calc s h1 h2 m1 m2 = sign * (60 * h + m)\n          where sign = if s == '-' then -1 else 1\n                h = read [h1, h2]\n                m = read [m1, m2]"],"instances":[],"language":{"extensions":["Rank2Types","DeriveDataTypeable","StandaloneDeriving","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}