{"sliceID":7790422796434454768,"uses":[{"reference":{"otherSlice":7315165113918992770},"usedName":{"typeName":{"identifier":"Format"}},"qualification":"Stream"},{"reference":{"otherSlice":7027838172525951099},"usedName":{"typeName":{"identifier":"CompressParams"}},"qualification":null},{"reference":{"otherSlice":8160419729831137275},"usedName":{"typeName":{"identifier":"CompressStream"}},"qualification":null},{"reference":{"builtinModule":"Control.Monad.ST.Lazy"},"usedName":{"typeName":{"identifier":"ST"}},"qualification":null},{"reference":{"otherSlice":8160419729831137275},"usedName":{"constructorName":{"identifier":"CompressInputRequired"},"constructorTypeName":{"identifier":"CompressStream"}},"qualification":null},{"reference":{"otherSlice":8160419729831137275},"usedName":{"valueName":{"identifier":"compressSupplyInput"}},"qualification":null},{"reference":{"otherSlice":3121151904321032761},"usedName":{"valueName":{"identifier":"mkStateST"}},"qualification":null},{"reference":{"otherSlice":4179110413878942452},"usedName":{"valueName":{"identifier":"compressStream"}},"qualification":null},{"reference":{"otherSlice":608743565900166835},"usedName":{"valueName":{"identifier":"runStreamST"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":1394949281745390129},"usedName":{"typeName":{"identifier":"Stream"}},"qualification":null},{"reference":{"otherSlice":1705518718783831717},"usedName":{"typeName":{"identifier":"State"}},"qualification":"Stream"},{"reference":{"otherSlice":8160419729831137275},"usedName":{"constructorName":{"identifier":"CompressOutputAvailable"},"constructorTypeName":{"identifier":"CompressStream"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":8160419729831137275},"usedName":{"constructorName":{"identifier":"CompressStreamEnd"},"constructorTypeName":{"identifier":"CompressStream"}},"qualification":null}],"fragment":["compressStreamST ::\n                 Stream.Format -> CompressParams -> CompressStream (ST s)","compressStreamST format params\n  = CompressInputRequired{compressSupplyInput =\n                            \\ chunk ->\n                              do zstate <- mkStateST\n                                 let next = compressStream format params\n                                 (strm', zstate') <- runStreamST (next chunk) zstate\n                                 return (go strm' zstate')}\n  where go ::\n           CompressStream Stream -> Stream.State s -> CompressStream (ST s)\n        go (CompressInputRequired next) zstate\n          = CompressInputRequired{compressSupplyInput =\n                                    \\ chunk ->\n                                      do (strm', zstate') <- runStreamST (next chunk) zstate\n                                         return (go strm' zstate')}\n        go (CompressOutputAvailable chunk next) zstate\n          = CompressOutputAvailable chunk $\n              do (strm', zstate') <- runStreamST next zstate\n                 return (go strm' zstate')\n        go CompressStreamEnd _ = CompressStreamEnd"],"instances":[],"language":{"extensions":["RankNTypes","DeriveDataTypeable","BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}