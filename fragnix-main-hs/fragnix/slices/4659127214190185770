{"sliceID":4659127214190185770,"uses":[{"reference":{"otherSlice":8642306666063513779},"usedName":{"constructorName":{"identifier":"PS"},"constructorTypeName":{"identifier":"ByteString"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"EQ"},"constructorTypeName":{"identifier":"Ordering"}},"qualification":null},{"reference":{"otherSlice":4640371534066560564},"usedName":{"valueName":{"identifier":"inlinePerformIO"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"Foreign.ForeignPtr"},"usedName":{"valueName":{"identifier":"withForeignPtr"}},"qualification":null},{"reference":{"otherSlice":3156440535907409113},"usedName":{"valueName":{"identifier":"memcmp"}},"qualification":null},{"reference":{"builtinModule":"GHC.Ptr"},"usedName":{"valueName":{"identifier":"plusPtr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"min"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"Prelude"},"usedName":{"valueName":{"operator":"$!"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"compare"}},"qualification":null},{"reference":{"otherSlice":8642306666063513779},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Ordering"}},"qualification":null}],"fragment":["compareBytes :: ByteString -> ByteString -> Ordering","compareBytes (PS _ _ 0) (PS _ _ 0) = EQ\ncompareBytes (PS fp1 off1 len1) (PS fp2 off2 len2)\n  = inlinePerformIO $\n      withForeignPtr fp1 $\n        \\ p1 ->\n          withForeignPtr fp2 $\n            \\ p2 ->\n              do i <- memcmp (p1 `plusPtr` off1) (p2 `plusPtr` off2)\n                        (min len1 len2)\n                 return $!\n                   case i `compare` 0 of\n                       EQ -> len1 `compare` len2\n                       x -> x"],"instances":[],"language":{"extensions":["ForeignFunctionInterface","BangPatterns","UnliftedFFITypes","MagicHash","UnboxedTuples","DeriveDataTypeable","Unsafe","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}