{"sliceID":8617401166756095581,"uses":[{"reference":{"otherSlice":8429921323650608549},"usedName":{"typeName":{"identifier":"Prim"}},"qualification":null},{"reference":{"otherSlice":4641953017354057066},"usedName":{"typeName":{"identifier":"MVector"}},"qualification":"G"},{"reference":{"otherSlice":336859694209020552},"usedName":{"typeName":{"identifier":"MVector"}},"qualification":null},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicLength"}},"qualification":"G"},{"reference":{"otherSlice":336859694209020552},"usedName":{"constructorName":{"identifier":"MVector"},"constructorTypeName":{"identifier":"MVector"}},"qualification":null},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicUnsafeSlice"}},"qualification":"G"},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicOverlaps"}},"qualification":"G"},{"reference":{"otherSlice":2473081202347251211},"usedName":{"valueName":{"identifier":"sameMutableByteArray"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"||"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">="}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicUnsafeNew"}},"qualification":"G"},{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"error"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"++"}},"qualification":null},{"reference":{"builtinModule":"GHC.Show"},"usedName":{"valueName":{"identifier":"show"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"liftM"}},"qualification":null},{"reference":{"otherSlice":1876703162953532943},"usedName":{"valueName":{"identifier":"newByteArray"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"*"}},"qualification":null},{"reference":{"otherSlice":4430519772844797516},"usedName":{"valueName":{"identifier":"sizeOf"}},"qualification":null},{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"undefined"}},"qualification":null},{"reference":{"builtinModule":"GHC.Enum"},"usedName":{"valueName":{"identifier":"maxBound"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"div"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicInitialize"}},"qualification":"G"},{"reference":{"otherSlice":6209326580814974573},"usedName":{"valueName":{"identifier":"setByteArray"}},"qualification":null},{"reference":{"builtinModule":"GHC.Word"},"usedName":{"typeName":{"identifier":"Word8"}},"qualification":null},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicUnsafeRead"}},"qualification":"G"},{"reference":{"otherSlice":557567798964676631},"usedName":{"valueName":{"identifier":"readByteArray"}},"qualification":null},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicUnsafeWrite"}},"qualification":"G"},{"reference":{"otherSlice":735386886188094764},"usedName":{"valueName":{"identifier":"writeByteArray"}},"qualification":null},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicUnsafeCopy"}},"qualification":"G"},{"reference":{"otherSlice":7064235887675846933},"usedName":{"valueName":{"identifier":"copyMutableByteArray"}},"qualification":null},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicUnsafeMove"}},"qualification":"G"},{"reference":{"otherSlice":2755512006145889089},"usedName":{"valueName":{"identifier":"moveByteArray"}},"qualification":null},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicSet"}},"qualification":"G"}],"fragment":["instance Prim a => G.MVector MVector a where\n        basicLength (MVector _ n _) = n\n        basicUnsafeSlice j m (MVector i _ arr) = MVector (i + j) m arr\n        \n        {-# INLINE basicOverlaps #-}\n        basicOverlaps (MVector i m arr1) (MVector j n arr2)\n          = sameMutableByteArray arr1 arr2 &&\n              (between i j (j + n) || between j i (i + m))\n          where between x y z = x >= y && x < z\n        \n        {-# INLINE basicUnsafeNew #-}\n        basicUnsafeNew n\n          | n < 0 =\n            error $ \"Primitive.basicUnsafeNew: negative length: \" ++ show n\n          | n > mx =\n            error $ \"Primitive.basicUnsafeNew: length to large: \" ++ show n\n          | otherwise = MVector 0 n `liftM` newByteArray (n * size)\n          where size = sizeOf (undefined :: a)\n                mx = maxBound `div` size :: Int\n        \n        {-# INLINE basicInitialize #-}\n        basicInitialize (MVector off n v)\n          = setByteArray v (off * size) (n * size) (0 :: Word8)\n          where size = sizeOf (undefined :: a)\n        \n        {-# INLINE basicUnsafeRead #-}\n        basicUnsafeRead (MVector i _ arr) j = readByteArray arr (i + j)\n        \n        {-# INLINE basicUnsafeWrite #-}\n        basicUnsafeWrite (MVector i _ arr) j x\n          = writeByteArray arr (i + j) x\n        \n        {-# INLINE basicUnsafeCopy #-}\n        basicUnsafeCopy (MVector i n dst) (MVector j _ src)\n          = copyMutableByteArray dst (i * sz) src (j * sz) (n * sz)\n          where sz = sizeOf (undefined :: a)\n        \n        {-# INLINE basicUnsafeMove #-}\n        basicUnsafeMove (MVector i n dst) (MVector j _ src)\n          = moveByteArray dst (i * sz) src (j * sz) (n * sz)\n          where sz = sizeOf (undefined :: a)\n        \n        {-# INLINE basicSet #-}\n        basicSet (MVector i n arr) x = setByteArray arr i n x"],"instances":[],"language":{"extensions":["DeriveDataTypeable","MultiParamTypeClasses","FlexibleInstances","ScopedTypeVariables","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":true}}