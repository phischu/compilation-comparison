{"sliceID":449208475962681376,"uses":[{"reference":{"otherSlice":6073454630168832022},"usedName":{"constructorName":{"identifier":"One"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"otherSlice":6073454630168832022},"usedName":{"constructorName":{"identifier":"Two"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"otherSlice":3097725820661431075},"usedName":{"valueName":{"identifier":"size"}},"qualification":null},{"reference":{"otherSlice":6073454630168832022},"usedName":{"constructorName":{"identifier":"Three"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":6073454630168832022},"usedName":{"constructorName":{"identifier":"Four"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"otherSlice":3097725820661431075},"usedName":{"typeName":{"identifier":"Sized"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"otherSlice":6073454630168832022},"usedName":{"typeName":{"identifier":"Digit"}},"qualification":null}],"fragment":["adjustDigit ::\n              Sized a => (Int -> a -> a) -> Int -> Digit a -> Digit a","adjustDigit f i (One a) = One (f i a)\nadjustDigit f i (Two a b)\n  | i < sa = Two (f i a) b\n  | otherwise = Two a (f (i - sa) b)\n  where sa = size a\nadjustDigit f i (Three a b c)\n  | i < sa = Three (f i a) b c\n  | i < sab = Three a (f (i - sa) b) c\n  | otherwise = Three a b (f (i - sab) c)\n  where sa = size a\n        sab = sa + size b\nadjustDigit f i (Four a b c d)\n  | i < sa = Four (f i a) b c d\n  | i < sab = Four a (f (i - sa) b) c d\n  | i < sabc = Four a b (f (i - sab) c) d\n  | otherwise = Four a b c (f (i - sabc) d)\n  where sa = size a\n        sab = sa + size b\n        sabc = sab + size c"],"instances":[],"language":{"extensions":["DeriveDataTypeable","StandaloneDeriving","TypeFamilies","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}