{"sliceID":8893292142790856450,"uses":[{"reference":{"otherSlice":1669319695546572556},"usedName":{"constructorName":{"identifier":"Array"},"constructorTypeName":{"identifier":"Value"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"Control.Monad"},"usedName":{"valueName":{"identifier":"liftM2"}},"qualification":null},{"reference":{"otherSlice":7359768259816148431},"usedName":{"valueName":{"identifier":"null"}},"qualification":"V"},{"reference":{"builtinModule":"Control.Applicative"},"usedName":{"valueName":{"identifier":"pure"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":9089961804217864861},"usedName":{"valueName":{"identifier":"parseTypeMismatch"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"++"}},"qualification":null},{"reference":{"builtinModule":"GHC.Show"},"usedName":{"valueName":{"identifier":"show"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"otherSlice":6708001900488435128},"usedName":{"valueName":{"identifier":"length"}},"qualification":"V"},{"reference":{"otherSlice":8190452208809716526},"usedName":{"valueName":{"identifier":"matchFailed"}},"qualification":null}],"fragment":["parseNullaryMatches :: Name -> Name -> [Q Match]","parseNullaryMatches tName conName\n  = [do arr <- newName \"arr\"\n        match (conP 'Array [varP arr])\n          (guardedB $\n             [liftM2 (,) (normalG $ [| V.null |] `appE` varE arr)\n                ([| pure |] `appE` conE conName),\n              liftM2 (,) (normalG [| otherwise |])\n                (parseTypeMismatch tName conName (litE $ stringL \"an empty Array\")\n                   (infixApp (litE $ stringL $ \"Array of length \") [| (++) |]\n                      ([| show . V.length |] `appE` varE arr)))])\n          [],\n     matchFailed tName conName \"Array\"]"],"instances":[],"language":{"extensions":["FlexibleInstances","IncoherentInstances","NamedFieldPuns","NoImplicitPrelude","OverlappingInstances","TemplateHaskell","UndecidableInstances","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}