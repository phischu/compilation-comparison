{"sliceID":7080003695627400659,"uses":[{"reference":{"otherSlice":4132404936174356097},"usedName":{"constructorName":{"identifier":"Stream"},"constructorTypeName":{"identifier":"Stream"}},"qualification":null},{"reference":{"otherSlice":2430856326972046314},"usedName":{"valueName":{"identifier":"isEmpty"}},"qualification":null},{"reference":{"otherSlice":3835980439088584228},"usedName":{"constructorName":{"identifier":"Empty"},"constructorTypeName":{"identifier":"Text"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":2339004113504757537},"usedName":{"constructorName":{"identifier":"Done"},"constructorTypeName":{"identifier":"Step"}},"qualification":null},{"reference":{"otherSlice":2339004113504757537},"usedName":{"constructorName":{"identifier":"Skip"},"constructorTypeName":{"identifier":"Step"}},"qualification":null},{"reference":{"otherSlice":2339004113504757537},"usedName":{"constructorName":{"identifier":"Yield"},"constructorTypeName":{"identifier":"Step"}},"qualification":null},{"reference":{"builtinModule":"GHC.ST"},"usedName":{"valueName":{"identifier":"runST"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":303218261714130477},"usedName":{"valueName":{"identifier":"new"}},"qualification":"A"},{"reference":{"otherSlice":4464944826426021000},"usedName":{"valueName":{"identifier":"unsafeWrite"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":">>="}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">="}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"min"}},"qualification":null},{"reference":{"otherSlice":4463961207685254290},"usedName":{"valueName":{"identifier":"shiftL"}},"qualification":null},{"reference":{"otherSlice":7984510095534010158},"usedName":{"valueName":{"identifier":"copyM"}},"qualification":"A"},{"reference":{"otherSlice":2495787221593611115},"usedName":{"valueName":{"identifier":"unsafeFreeze"}},"qualification":"A"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":6742866475076404776},"usedName":{"constructorName":{"identifier":"Text"},"constructorTypeName":{"identifier":"Text"}},"qualification":"I"},{"reference":{"otherSlice":3835980439088584228},"usedName":{"constructorName":{"identifier":"Chunk"},"constructorTypeName":{"identifier":"Text"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"otherSlice":4132404936174356097},"usedName":{"typeName":{"identifier":"Stream"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Char"}},"qualification":null},{"reference":{"otherSlice":3835980439088584228},"usedName":{"typeName":{"identifier":"Text"}},"qualification":null}],"fragment":["unstreamChunks :: Int -> Stream Char -> Text","unstreamChunks !chunkSize (Stream next s0 len0)\n  | isEmpty len0 = Empty\n  | otherwise = outer s0\n  where outer so\n          = {-# SCC \"unstreamChunks/outer\" #-}\n              case next so of\n                  Done -> Empty\n                  Skip s' -> outer s'\n                  Yield x s' -> runST $\n                                  do a <- A.new unknownLength\n                                     unsafeWrite a 0 x >>= inner a unknownLength s'\n                    where unknownLength = 4\n          where inner marr !len s !i\n                  | i + 1 >= chunkSize = finish marr i s\n                  | i + 1 >= len =\n                    {-# SCC \"unstreamChunks/resize\" #-}\n                      do let newLen = min (len `shiftL` 1) chunkSize\n                         marr' <- A.new newLen\n                         A.copyM marr' 0 marr 0 len\n                         inner marr' newLen s i\n                  | otherwise =\n                    {-# SCC \"unstreamChunks/inner\" #-}\n                      case next s of\n                          Done -> finish marr i s\n                          Skip s' -> inner marr len s' i\n                          Yield x s' -> do d <- unsafeWrite marr i x\n                                           inner marr len s' (i + d)\n                finish marr len s'\n                  = do arr <- A.unsafeFreeze marr\n                       return (I.Text arr 0 len `Chunk` outer s')"],"instances":[],"language":{"extensions":["BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}