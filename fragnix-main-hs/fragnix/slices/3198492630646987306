{"sliceID":3198492630646987306,"uses":[{"reference":{"otherSlice":2497553050502348575},"usedName":{"constructorName":{"identifier":"Empty"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"error"}},"qualification":null},{"reference":{"otherSlice":2497553050502348575},"usedName":{"constructorName":{"identifier":"Single"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"otherSlice":2497553050502348575},"usedName":{"constructorName":{"identifier":"Deep"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"otherSlice":449208475962681376},"usedName":{"valueName":{"identifier":"adjustDigit"}},"qualification":null},{"reference":{"otherSlice":1865059409351223182},"usedName":{"valueName":{"identifier":"adjustNode"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":3097725820661431075},"usedName":{"valueName":{"identifier":"size"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":3097725820661431075},"usedName":{"typeName":{"identifier":"Sized"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"otherSlice":2497553050502348575},"usedName":{"typeName":{"identifier":"FingerTree"}},"qualification":null}],"fragment":["adjustTree ::\n             Sized a => (Int -> a -> a) -> Int -> FingerTree a -> FingerTree a","adjustTree _ _ Empty = error \"adjustTree of empty tree\"\nadjustTree f i (Single x) = Single (f i x)\nadjustTree f i (Deep s pr m sf)\n  | i < spr = Deep s (adjustDigit f i pr) m sf\n  | i < spm = Deep s pr (adjustTree (adjustNode f) (i - spr) m) sf\n  | otherwise = Deep s pr m (adjustDigit f (i - spm) sf)\n  where spr = size pr\n        spm = spr + size m"],"instances":[],"language":{"extensions":["DeriveDataTypeable","StandaloneDeriving","TypeFamilies","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}