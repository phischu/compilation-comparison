{"sliceID":1650243988942298401,"uses":[{"reference":{"otherSlice":8765721791877540981},"usedName":{"valueName":{"identifier":"toPair"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":4406277257444163371},"usedName":{"constructorName":{"identifier":"Tip"},"constructorTypeName":{"identifier":"Map"}},"qualification":null},{"reference":{"otherSlice":4609286002637564688},"usedName":{"constructorName":{"operator":":*:"},"constructorTypeName":{"identifier":"StrictPair"}},"qualification":null},{"reference":{"otherSlice":4406277257444163371},"usedName":{"constructorName":{"identifier":"Bin"},"constructorTypeName":{"identifier":"Map"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Left"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"builtinModule":"GHC.Prim"},"usedName":{"valueName":{"identifier":"seq"}},"qualification":null},{"reference":{"otherSlice":7995582847914420959},"usedName":{"valueName":{"identifier":"link"}},"qualification":null},{"reference":{"otherSlice":8591646212762114909},"usedName":{"valueName":{"identifier":"link2"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Right"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"typeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":4406277257444163371},"usedName":{"typeName":{"identifier":"Map"}},"qualification":null}],"fragment":["mapEitherWithKey ::\n                 (k -> a -> Either b c) -> Map k a -> (Map k b, Map k c)","mapEitherWithKey f0 t0 = toPair $ go f0 t0\n  where go _ Tip = (Tip :*: Tip)\n        go f (Bin _ kx x l r)\n          = case f kx x of\n                Left y -> y `seq` (link kx y l1 r1 :*: link2 l2 r2)\n                Right z -> z `seq` (link2 l1 r1 :*: link kx z l2 r2)\n          where (l1 :*: l2) = go f l\n                (r1 :*: r2) = go f r"],"instances":[],"language":{"extensions":["BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}