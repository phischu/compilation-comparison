{"sliceID":5969207038666618599,"uses":[{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"otherSlice":5885623136665892239},"usedName":{"valueName":{"identifier":"writeWord8"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"otherSlice":1488710778993631376},"usedName":{"valueName":{"identifier":"powerArray"}},"qualification":null},{"reference":{"otherSlice":3191844957948247487},"usedName":{"valueName":{"identifier":"unsafeAt"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"identifier":"shiftR"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"operator":".&."}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":8748167810724547885},"usedName":{"typeName":{"identifier":"WorkingBuffer"}},"qualification":null},{"reference":{"builtinModule":"GHC.Word"},"usedName":{"typeName":{"identifier":"Word8"}},"qualification":null}],"fragment":["encode :: WorkingBuffer -> (Word8 -> Word8) -> Int -> Int -> IO ()","encode wbuf set n i\n  | i < p = writeWord8 wbuf $ set $ fromIntegral i\n  | otherwise =\n    do writeWord8 wbuf $ set $ fromIntegral p\n       encode' (i - p)\n  where !p = powerArray `unsafeAt` (n - 1)\n        \n        encode' :: Int -> IO ()\n        encode' j\n          | j < 128 = writeWord8 wbuf $ fromIntegral j\n          | otherwise =\n            do let !q = j `shiftR` 7\n                   !r = j .&. 127\n               writeWord8 wbuf $ fromIntegral (r + 128)\n               encode' q"],"instances":[],"language":{"extensions":["BangPatterns","OverloadedStrings","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}