{"sliceID":4326289686411975228,"uses":[{"reference":{"otherSlice":8818741453000450561},"usedName":{"typeName":{"identifier":"Unbox"}},"qualification":null},{"reference":{"otherSlice":4641953017354057066},"usedName":{"typeName":{"identifier":"MVector"}},"qualification":"M"},{"reference":{"otherSlice":7751570579972356864},"usedName":{"typeName":{"identifier":"MVector"}},"qualification":null},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicLength"}},"qualification":"M"},{"reference":{"otherSlice":7751570579972356864},"usedName":{"constructorName":{"identifier":"MV_3"},"constructorTypeName":{"identifier":"MVector"}},"qualification":null},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicUnsafeSlice"}},"qualification":"M"},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicOverlaps"}},"qualification":"M"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"||"}},"qualification":null},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicUnsafeNew"}},"qualification":"M"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicInitialize"}},"qualification":"M"},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicUnsafeReplicate"}},"qualification":"M"},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicUnsafeRead"}},"qualification":"M"},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicUnsafeWrite"}},"qualification":"M"},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicClear"}},"qualification":"M"},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicSet"}},"qualification":"M"},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicUnsafeCopy"}},"qualification":"M"},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicUnsafeMove"}},"qualification":"M"},{"reference":{"otherSlice":4641953017354057066},"usedName":{"valueName":{"identifier":"basicUnsafeGrow"}},"qualification":"M"},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null}],"fragment":["instance (Unbox a, Unbox b, Unbox c) => M.MVector MVector (a, b, c)\n         where\n        {-# INLINE basicLength #-}\n        basicLength (MV_3 n_ _ _ _) = n_\n        \n        {-# INLINE basicUnsafeSlice #-}\n        basicUnsafeSlice i_ m_ (MV_3 _ as bs cs)\n          = MV_3 m_ (M.basicUnsafeSlice i_ m_ as)\n              (M.basicUnsafeSlice i_ m_ bs)\n              (M.basicUnsafeSlice i_ m_ cs)\n        \n        {-# INLINE basicOverlaps #-}\n        basicOverlaps (MV_3 _ as1 bs1 cs1) (MV_3 _ as2 bs2 cs2)\n          = M.basicOverlaps as1 as2 ||\n              M.basicOverlaps bs1 bs2 || M.basicOverlaps cs1 cs2\n        \n        {-# INLINE basicUnsafeNew #-}\n        basicUnsafeNew n_\n          = do as <- M.basicUnsafeNew n_\n               bs <- M.basicUnsafeNew n_\n               cs <- M.basicUnsafeNew n_\n               return $ MV_3 n_ as bs cs\n        \n        {-# INLINE basicInitialize #-}\n        basicInitialize (MV_3 _ as bs cs)\n          = do M.basicInitialize as\n               M.basicInitialize bs\n               M.basicInitialize cs\n        \n        {-# INLINE basicUnsafeReplicate #-}\n        basicUnsafeReplicate n_ (a, b, c)\n          = do as <- M.basicUnsafeReplicate n_ a\n               bs <- M.basicUnsafeReplicate n_ b\n               cs <- M.basicUnsafeReplicate n_ c\n               return $ MV_3 n_ as bs cs\n        \n        {-# INLINE basicUnsafeRead #-}\n        basicUnsafeRead (MV_3 _ as bs cs) i_\n          = do a <- M.basicUnsafeRead as i_\n               b <- M.basicUnsafeRead bs i_\n               c <- M.basicUnsafeRead cs i_\n               return (a, b, c)\n        \n        {-# INLINE basicUnsafeWrite #-}\n        basicUnsafeWrite (MV_3 _ as bs cs) i_ (a, b, c)\n          = do M.basicUnsafeWrite as i_ a\n               M.basicUnsafeWrite bs i_ b\n               M.basicUnsafeWrite cs i_ c\n        \n        {-# INLINE basicClear #-}\n        basicClear (MV_3 _ as bs cs)\n          = do M.basicClear as\n               M.basicClear bs\n               M.basicClear cs\n        \n        {-# INLINE basicSet #-}\n        basicSet (MV_3 _ as bs cs) (a, b, c)\n          = do M.basicSet as a\n               M.basicSet bs b\n               M.basicSet cs c\n        \n        {-# INLINE basicUnsafeCopy #-}\n        basicUnsafeCopy (MV_3 _ as1 bs1 cs1) (MV_3 _ as2 bs2 cs2)\n          = do M.basicUnsafeCopy as1 as2\n               M.basicUnsafeCopy bs1 bs2\n               M.basicUnsafeCopy cs1 cs2\n        \n        {-# INLINE basicUnsafeMove #-}\n        basicUnsafeMove (MV_3 _ as1 bs1 cs1) (MV_3 _ as2 bs2 cs2)\n          = do M.basicUnsafeMove as1 as2\n               M.basicUnsafeMove bs1 bs2\n               M.basicUnsafeMove cs1 cs2\n        \n        {-# INLINE basicUnsafeGrow #-}\n        basicUnsafeGrow (MV_3 n_ as bs cs) m_\n          = do as' <- M.basicUnsafeGrow as m_\n               bs' <- M.basicUnsafeGrow bs m_\n               cs' <- M.basicUnsafeGrow cs m_\n               return $ MV_3 (m_ + n_) as' bs' cs'"],"instances":[],"language":{"extensions":["BangPatterns","MultiParamTypeClasses","TypeFamilies","FlexibleContexts","DeriveDataTypeable","StandaloneDeriving","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":true}}