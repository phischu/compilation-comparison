{"sliceID":5879732638212515577,"uses":[{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"String"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":2737754736896078200},"usedName":{"valueName":{"identifier":"parseTypeMismatch"}},"qualification":null},{"reference":{"otherSlice":8525771962104289961},"usedName":{"valueName":{"identifier":"valueConName"}},"qualification":null}],"fragment":["matchFailed :: Name -> Name -> String -> MatchQ","matchFailed tName conName expected\n  = do other <- newName \"other\"\n       match (varP other)\n         (normalB $\n            parseTypeMismatch tName conName (litE $ stringL expected)\n              ([| valueConName |] `appE` varE other))\n         []"],"instances":[],"language":{"extensions":["BangPatterns","FlexibleInstances","NamedFieldPuns","NoImplicitPrelude","UndecidableInstances","TemplateHaskellQuotes","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards","TemplateHaskell"],"isInstance":false}}