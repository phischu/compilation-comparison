{"sliceID":1506365180065666965,"uses":[{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":655943511058533134},"usedName":{"valueName":{"identifier":"coefficient"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">="}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"||"}},"qualification":null},{"reference":{"otherSlice":655943511058533134},"usedName":{"valueName":{"identifier":"base10Exponent"}},"qualification":null},{"reference":{"otherSlice":1462742266559157241},"usedName":{"valueName":{"identifier":"normalize"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">"}},"qualification":null},{"reference":{"otherSlice":7444598741628127756},"usedName":{"valueName":{"identifier":"limit"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"otherSlice":1819442648249409049},"usedName":{"valueName":{"identifier":"integerLog10'"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"max"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"identifier":"abs"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"toInteger"}},"qualification":null},{"reference":{"builtinModule":"GHC.Enum"},"usedName":{"valueName":{"identifier":"minBound"}},"qualification":null},{"reference":{"builtinModule":"GHC.Enum"},"usedName":{"valueName":{"identifier":"maxBound"}},"qualification":null},{"reference":{"builtinModule":"GHC.Integer"},"usedName":{"typeName":{"identifier":"Integer"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"identifier":"fromInteger"}},"qualification":null},{"reference":{"otherSlice":9132385980192987407},"usedName":{"valueName":{"identifier":"toIntegral"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"typeName":{"identifier":"Integral"}},"qualification":null},{"reference":{"builtinModule":"GHC.Enum"},"usedName":{"typeName":{"identifier":"Bounded"}},"qualification":null},{"reference":{"otherSlice":655943511058533134},"usedName":{"typeName":{"identifier":"Scientific"}},"qualification":null}],"fragment":["toBoundedInteger ::\n                 forall i . (Integral i, Bounded i) => Scientific -> Maybe i","toBoundedInteger s\n  | c == 0 = fromIntegerBounded 0\n  | integral =\n    if dangerouslyBig then Nothing else fromIntegerBounded n\n  | otherwise = Nothing\n  where c = coefficient s\n        integral = e >= 0 || e' >= 0\n        e = base10Exponent s\n        e' = base10Exponent s'\n        s' = normalize s\n        dangerouslyBig\n          = e > limit &&\n              e >\n                integerLog10'\n                  (max (abs $ toInteger (minBound :: i))\n                     (abs $ toInteger (maxBound :: i)))\n        \n        fromIntegerBounded :: Integer -> Maybe i\n        fromIntegerBounded i\n          | i < toInteger (minBound :: i) || i > toInteger (maxBound :: i) =\n            Nothing\n          | otherwise = Just $ fromInteger i\n        \n        n :: Integer\n        n = toIntegral s'"],"instances":[],"language":{"extensions":["DeriveDataTypeable","BangPatterns","ScopedTypeVariables","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}