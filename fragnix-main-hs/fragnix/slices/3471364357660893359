{"sliceID":3471364357660893359,"uses":[{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"not"}},"qualification":null},{"reference":{"otherSlice":7681846442074873426},"usedName":{"valueName":{"identifier":"null"}},"qualification":"L"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":5368642461557159749},"usedName":{"valueName":{"identifier":"last"}},"qualification":"L"},{"reference":{"otherSlice":785562360566316250},"usedName":{"valueName":{"identifier":"regexec"}},"qualification":"BS"},{"reference":{"otherSlice":3282514032779540102},"usedName":{"valueName":{"identifier":"fromLazy"}},"qualification":null},{"reference":{"otherSlice":1340052861010929905},"usedName":{"valueName":{"identifier":"snoc"}},"qualification":"L"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Left"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Right"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":1029798322689434378},"usedName":{"valueName":{"identifier":"toLazy"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"map"}},"qualification":null},{"reference":{"otherSlice":6756606517105139295},"usedName":{"typeName":{"identifier":"Regex"}},"qualification":null},{"reference":{"otherSlice":1699226608098321587},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"L"},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"typeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":3294887094191733298},"usedName":{"typeName":{"identifier":"WrapError"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null}],"fragment":["regexec ::\n        Regex ->\n          L.ByteString ->\n            IO\n              (Either WrapError\n                 (Maybe (L.ByteString, L.ByteString, L.ByteString, [L.ByteString])))","regexec regex bs\n  = do x <- if (not (L.null bs)) && (0 == L.last bs) then\n              BS.regexec regex (fromLazy bs) else\n              BS.regexec regex (fromLazy (L.snoc bs 0))\n       return $\n         case x of\n             Left e -> Left e\n             Right Nothing -> Right Nothing\n             Right (Just (a, b, c, ds)) -> Right\n                                             (Just (toLazy a, toLazy b, toLazy c, map toLazy ds))"],"instances":[],"language":{"extensions":["MultiParamTypeClasses","FunctionalDependencies","ForeignFunctionInterface","GeneralizedNewtypeDeriving","FlexibleContexts","TypeSynonymInstances","FlexibleInstances","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}