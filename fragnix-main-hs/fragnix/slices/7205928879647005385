{"sliceID":7205928879647005385,"uses":[{"reference":{"otherSlice":2972184915614019242},"usedName":{"constructorName":{"identifier":"ProcessHandle"},"constructorTypeName":{"identifier":"ProcessHandle"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":5130259164710316056},"usedName":{"valueName":{"identifier":"modifyProcessHandle"}},"qualification":null},{"reference":{"otherSlice":2359080457521311454},"usedName":{"constructorName":{"identifier":"ClosedHandle"},"constructorTypeName":{"identifier":"ProcessHandle__"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"False"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"Foreign.Marshal.Alloc"},"usedName":{"valueName":{"identifier":"alloca"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"Foreign.C.Error"},"usedName":{"valueName":{"identifier":"throwErrnoIfMinus1Retry"}},"qualification":null},{"reference":{"otherSlice":8010705527524106605},"usedName":{"valueName":{"identifier":"c_getProcessExitCode"}},"qualification":null},{"reference":{"builtinModule":"Foreign.Storable"},"usedName":{"valueName":{"identifier":"peek"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":3157000245021190803},"usedName":{"valueName":{"identifier":"closePHANDLE"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Exception"},"usedName":{"constructorName":{"identifier":"ExitSuccess"},"constructorTypeName":{"identifier":"ExitCode"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Exception"},"usedName":{"constructorName":{"identifier":"ExitFailure"},"constructorTypeName":{"identifier":"ExitCode"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"True"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"otherSlice":4971887791210092355},"usedName":{"valueName":{"identifier":"endDelegateControlC"}},"qualification":null},{"reference":{"otherSlice":2359080457521311454},"usedName":{"typeName":{"identifier":"ProcessHandle__"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":884597495269511208},"usedName":{"typeName":{"identifier":"PHANDLE"}},"qualification":null},{"reference":{"otherSlice":2359080457521311454},"usedName":{"constructorName":{"identifier":"OpenHandle"},"constructorTypeName":{"identifier":"ProcessHandle__"}},"qualification":null},{"reference":{"otherSlice":2359080457521311454},"usedName":{"constructorName":{"identifier":"OpenExtHandle"},"constructorTypeName":{"identifier":"ProcessHandle__"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Exception"},"usedName":{"typeName":{"identifier":"ExitCode"}},"qualification":null},{"reference":{"builtinModule":"Control.Exception.Base"},"usedName":{"valueName":{"identifier":"bracket"}},"qualification":null},{"reference":{"builtinModule":"GHC.MVar"},"usedName":{"valueName":{"identifier":"tryTakeMVar"}},"qualification":null},{"reference":{"otherSlice":2972184915614019242},"usedName":{"valueName":{"identifier":"waitpidLock"}},"qualification":null},{"reference":{"builtinModule":"GHC.MVar"},"usedName":{"valueName":{"identifier":"putMVar"}},"qualification":null},{"reference":{"otherSlice":2972184915614019242},"usedName":{"typeName":{"identifier":"ProcessHandle"}},"qualification":null}],"fragment":["getProcessExitCode :: ProcessHandle -> IO (Maybe ExitCode)","getProcessExitCode ph@(ProcessHandle _ delegating_ctlc _)\n  = tryLockWaitpid $\n      do (m_e, was_open) <- modifyProcessHandle ph $\n                              \\ p_ ->\n                                case p_ of\n                                    ClosedHandle e -> return (p_, (Just e, False))\n                                    open -> do alloca $\n                                                 \\ pExitCode ->\n                                                   do case getHandle open of\n                                                          Nothing -> return (p_, (Nothing, False))\n                                                          Just\n                                                            h -> do res <- throwErrnoIfMinus1Retry\n                                                                             \"getProcessExitCode\"\n                                                                             $\n                                                                             c_getProcessExitCode h\n                                                                               pExitCode\n                                                                    code <- peek pExitCode\n                                                                    if res == 0 then\n                                                                      return (p_, (Nothing, False))\n                                                                      else\n                                                                      do closePHANDLE h\n                                                                         let e | code == 0 =\n                                                                                 ExitSuccess\n                                                                               | otherwise =\n                                                                                 ExitFailure\n                                                                                   (fromIntegral\n                                                                                      code)\n                                                                         return\n                                                                           (ClosedHandle e,\n                                                                            (Just e, True))\n         case m_e of\n             Just e | was_open && delegating_ctlc -> endDelegateControlC e\n             _ -> return ()\n         return m_e\n  where getHandle :: ProcessHandle__ -> Maybe PHANDLE\n        getHandle (OpenHandle h) = Just h\n        getHandle (ClosedHandle _) = Nothing\n        getHandle (OpenExtHandle h _ _) = Just h\n        \n        tryLockWaitpid :: IO (Maybe ExitCode) -> IO (Maybe ExitCode)\n        tryLockWaitpid action = bracket acquire release between\n          where acquire = tryTakeMVar (waitpidLock ph)\n                release m\n                  = case m of\n                        Nothing -> return ()\n                        Just () -> putMVar (waitpidLock ph) ()\n                between m\n                  = case m of\n                        Nothing -> return Nothing\n                        Just () -> action"],"instances":[],"language":{"extensions":["ForeignFunctionInterface","InterruptibleFFI","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}