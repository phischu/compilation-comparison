{"sliceID":6377885085718807780,"uses":[{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Monad"}},"qualification":null},{"reference":{"otherSlice":7468473159724944043},"usedName":{"typeName":{"identifier":"Acquire"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":7468473159724944043},"usedName":{"constructorName":{"identifier":"Acquire"},"constructorTypeName":{"identifier":"Acquire"}},"qualification":null},{"reference":{"otherSlice":13895810223688184},"usedName":{"constructorName":{"identifier":"Allocated"},"constructorTypeName":{"identifier":"Allocated"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"const"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":">>="}},"qualification":null},{"reference":{"otherSlice":8266417363122549307},"usedName":{"valueName":{"identifier":"onException"}},"qualification":"E"},{"reference":{"otherSlice":6577957584704791200},"usedName":{"constructorName":{"identifier":"ReleaseException"},"constructorTypeName":{"identifier":"ReleaseType"}},"qualification":null},{"reference":{"builtinModule":"Prelude"},"usedName":{"valueName":{"operator":"$!"}},"qualification":null},{"reference":{"otherSlice":8318794974502390293},"usedName":{"valueName":{"identifier":"finally"}},"qualification":"E"}],"fragment":["instance Monad Acquire where\n        return a\n          = Acquire (\\ _ -> return (Allocated a (const $ return ())))\n        Acquire f >>= g'\n          = Acquire $\n              \\ restore ->\n                do Allocated x free1 <- f restore\n                   let Acquire g = g' x\n                   Allocated y free2 <- g restore `E.onException`\n                                          free1 ReleaseException\n                   return $! Allocated y (\\ rt -> free2 rt `E.finally` free1 rt)"],"instances":[],"language":{"extensions":["RankNTypes","MultiParamTypeClasses","DeriveDataTypeable","FlexibleContexts","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":true}}