{"sliceID":1182529288228654645,"uses":[{"reference":{"otherSlice":2522203815511504828},"usedName":{"typeName":{"identifier":"RegOffset"}},"qualification":null},{"reference":{"otherSlice":8468946667989408909},"usedName":{"typeName":{"identifier":"Seq"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Char"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":7652002055566886865},"usedName":{"valueName":{"identifier":"unusedRegOffset"}},"qualification":null},{"reference":{"otherSlice":1530965345057959329},"usedName":{"valueName":{"identifier":"empty"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":5307039913647196388},"usedName":{"valueName":{"identifier":"extract"}},"qualification":null},{"reference":{"builtinModule":"GHC.Enum"},"usedName":{"valueName":{"identifier":"fromEnum"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"otherSlice":5307039913647196388},"usedName":{"valueName":{"identifier":"before"}},"qualification":null},{"reference":{"otherSlice":5307039913647196388},"usedName":{"valueName":{"identifier":"after"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"map"}},"qualification":null},{"reference":{"otherSlice":2310235612847033830},"usedName":{"valueName":{"identifier":"withSeq"}},"qualification":null},{"reference":{"otherSlice":5788803217405295300},"usedName":{"valueName":{"identifier":"wrapMatch"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Right"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Left"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":6756606517105139295},"usedName":{"typeName":{"identifier":"Regex"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"typeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":3294887094191733298},"usedName":{"typeName":{"identifier":"WrapError"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null}],"fragment":["regexec ::\n        Regex ->\n          (Seq Char) ->\n            IO\n              (Either WrapError\n                 (Maybe ((Seq Char), (Seq Char), (Seq Char), [(Seq Char)])))","regexec regex str\n  = do let getSub :: (RegOffset, RegOffset) -> (Seq Char)\n           getSub (start, stop)\n             | start == unusedRegOffset = S.empty\n             | otherwise =\n               extract (fromEnum start, fromEnum $ stop - start) $ str\n           matchedParts ::\n                        [(RegOffset, RegOffset)] ->\n                          ((Seq Char), (Seq Char), (Seq Char), [(Seq Char)])\n           matchedParts [] = (str, S.empty, S.empty, [])\n           matchedParts (matchedStartStop@(start, stop) : subStartStop)\n             = (before (fromEnum start) str, getSub matchedStartStop,\n                after (fromEnum stop) str, map getSub subStartStop)\n       maybeStartEnd <- withSeq str (wrapMatch regex)\n       case maybeStartEnd of\n           Right Nothing -> return (Right Nothing)\n           Right (Just parts) -> return . Right . Just . matchedParts $ parts\n           Left err -> return (Left err)"],"instances":[],"language":{"extensions":["MultiParamTypeClasses","FunctionalDependencies","ForeignFunctionInterface","GeneralizedNewtypeDeriving","FlexibleContexts","TypeSynonymInstances","FlexibleInstances","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}