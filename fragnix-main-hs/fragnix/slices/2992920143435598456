{"sliceID":2992920143435598456,"uses":[{"reference":{"otherSlice":1546470151414195006},"usedName":{"typeName":{"identifier":"Socket"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"otherSlice":4010822550476529195},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Exception"},"usedName":{"valueName":{"identifier":"ioError"}},"qualification":null},{"reference":{"otherSlice":80255355698707360},"usedName":{"valueName":{"identifier":"mkInvalidRecvArgError"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":4472288379372295517},"usedName":{"valueName":{"identifier":"createAndTrim"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"Control.Exception.Base"},"usedName":{"valueName":{"identifier":"catch"}},"qualification":null},{"reference":{"otherSlice":4854391898084860805},"usedName":{"valueName":{"identifier":"recvBuf"}},"qualification":null},{"reference":{"builtinModule":"System.IO.Error"},"usedName":{"valueName":{"identifier":"isEOFError"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO"},"usedName":{"valueName":{"identifier":"throwIO"}},"qualification":null}],"fragment":["recv :: Socket -> Int -> IO ByteString","recv sock nbytes\n  | nbytes < 0 =\n    ioError (mkInvalidRecvArgError \"Network.Socket.ByteString.recv\")\n  | otherwise =\n    createAndTrim nbytes $\n      \\ ptr ->\n        catch (recvBuf sock ptr nbytes)\n          (\\ e -> if isEOFError e then return 0 else throwIO e)"],"instances":[],"language":{"extensions":["DeriveDataTypeable","ForeignFunctionInterface","TypeSynonymInstances","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}