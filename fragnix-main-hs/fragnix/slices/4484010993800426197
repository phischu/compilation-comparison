{"sliceID":4484010993800426197,"uses":[{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"++"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"String"}},"qualification":null},{"reference":{"otherSlice":2431639079978755785},"usedName":{"typeName":{"identifier":"JSONPath"}},"qualification":null},{"reference":{"otherSlice":2850143289159379211},"usedName":{"constructorName":{"identifier":"Index"},"constructorTypeName":{"identifier":"JSONPathElement"}},"qualification":null},{"reference":{"builtinModule":"GHC.Show"},"usedName":{"valueName":{"identifier":"show"}},"qualification":null},{"reference":{"otherSlice":2850143289159379211},"usedName":{"constructorName":{"identifier":"Key"},"constructorTypeName":{"identifier":"JSONPathElement"}},"qualification":null},{"reference":{"otherSlice":2241541392207318616},"usedName":{"typeName":{"identifier":"Text"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":2018106939656672438},"usedName":{"valueName":{"identifier":"unpack"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"False"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.Unicode"},"usedName":{"valueName":{"identifier":"isAlpha"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"all"}},"qualification":null},{"reference":{"builtinModule":"GHC.Unicode"},"usedName":{"valueName":{"identifier":"isAlphaNum"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"concatMap"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Char"}},"qualification":null}],"fragment":["formatError :: JSONPath -> String -> String","formatError path msg\n  = \"Error in \" ++ format \"$\" path ++ \": \" ++ msg\n  where format :: String -> JSONPath -> String\n        format pfx [] = pfx\n        format pfx (Index idx : parts)\n          = format (pfx ++ \"[\" ++ show idx ++ \"]\") parts\n        format pfx (Key key : parts) = format (pfx ++ formatKey key) parts\n        \n        formatKey :: Text -> String\n        formatKey key\n          | isIdentifierKey strKey = \".\" ++ strKey\n          | otherwise = \"['\" ++ escapeKey strKey ++ \"']\"\n          where strKey = unpack key\n        \n        isIdentifierKey :: String -> Bool\n        isIdentifierKey [] = False\n        isIdentifierKey (x : xs) = isAlpha x && all isAlphaNum xs\n        \n        escapeKey :: String -> String\n        escapeKey = concatMap escapeChar\n        \n        escapeChar :: Char -> String\n        escapeChar '\\'' = \"\\\\'\"\n        escapeChar '\\\\' = \"\\\\\\\\\"\n        escapeChar c = [c]"],"instances":[],"language":{"extensions":["DeriveDataTypeable","GeneralizedNewtypeDeriving","Rank2Types","TemplateHaskellQuotes","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards","TemplateHaskell"],"isInstance":false}}