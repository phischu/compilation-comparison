{"sliceID":5859475402547060278,"uses":[{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Left"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":2990348019053653828},"usedName":{"valueName":{"identifier":"getValField"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":8893292142790856450},"usedName":{"valueName":{"identifier":"parseNullaryMatches"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Right"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":5612871736588995741},"usedName":{"valueName":{"identifier":"parseUnaryMatches"}},"qualification":null},{"reference":{"otherSlice":1146004988397805480},"usedName":{"valueName":{"identifier":"parseProduct"}},"qualification":null},{"reference":{"builtinModule":"Data.List"},"usedName":{"valueName":{"identifier":"genericLength"}},"qualification":null},{"reference":{"otherSlice":6564310091007751796},"usedName":{"valueName":{"identifier":"parseRecord"}},"qualification":null},{"reference":{"otherSlice":1669319695546572556},"usedName":{"constructorName":{"identifier":"Object"},"constructorTypeName":{"identifier":"Value"}},"qualification":null},{"reference":{"otherSlice":8190452208809716526},"usedName":{"valueName":{"identifier":"matchFailed"}},"qualification":null},{"reference":{"otherSlice":5961014460351920517},"usedName":{"typeName":{"identifier":"Options"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"typeName":{"identifier":"Either"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"String"}},"qualification":null}],"fragment":["parseArgs ::\n          Name -> Options -> Con -> Either (String, Name) Name -> Q Exp","parseArgs tName _ (NormalC conName []) (Left (valFieldName, obj))\n  = getValField obj valFieldName $ parseNullaryMatches tName conName\nparseArgs tName _ (NormalC conName []) (Right valName)\n  = caseE (varE valName) $ parseNullaryMatches tName conName\nparseArgs _ _ (NormalC conName [_]) (Left (valFieldName, obj))\n  = getValField obj valFieldName $ parseUnaryMatches conName\nparseArgs _ _ (NormalC conName [_]) (Right valName)\n  = caseE (varE valName) $ parseUnaryMatches conName\nparseArgs tName _ (NormalC conName ts) (Left (valFieldName, obj))\n  = getValField obj valFieldName $\n      parseProduct tName conName $ genericLength ts\nparseArgs tName _ (NormalC conName ts) (Right valName)\n  = caseE (varE valName) $\n      parseProduct tName conName $ genericLength ts\nparseArgs tName opts (RecC conName ts) (Left (_, obj))\n  = parseRecord opts tName conName ts obj\nparseArgs tName opts (RecC conName ts) (Right valName)\n  = do obj <- newName \"recObj\"\n       caseE (varE valName)\n         [match (conP 'Object [varP obj])\n            (normalB $ parseRecord opts tName conName ts obj)\n            [],\n          matchFailed tName conName \"Object\"]\nparseArgs tName _ (InfixC _ conName _) (Left (valFieldName, obj))\n  = getValField obj valFieldName $ parseProduct tName conName 2\nparseArgs tName _ (InfixC _ conName _) (Right valName)\n  = caseE (varE valName) $ parseProduct tName conName 2\nparseArgs tName opts (ForallC _ _ con) contents\n  = parseArgs tName opts con contents"],"instances":[],"language":{"extensions":["FlexibleInstances","IncoherentInstances","NamedFieldPuns","NoImplicitPrelude","OverlappingInstances","TemplateHaskell","UndecidableInstances","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}