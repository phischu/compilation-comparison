{"sliceID":2701525215799075972,"uses":[{"reference":{"otherSlice":1699226608098321587},"usedName":{"constructorName":{"identifier":"Empty"},"constructorTypeName":{"identifier":"ByteString"}},"qualification":null},{"reference":{"otherSlice":1699226608098321587},"usedName":{"constructorName":{"identifier":"Chunk"},"constructorTypeName":{"identifier":"ByteString"}},"qualification":null},{"reference":{"otherSlice":6258463563638113276},"usedName":{"valueName":{"identifier":"length"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":4261797841410981906},"usedName":{"valueName":{"identifier":"unsafeHead"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":3560339300675439450},"usedName":{"valueName":{"identifier":"unsafeTake"}},"qualification":"S"},{"reference":{"otherSlice":2291042143385708565},"usedName":{"valueName":{"identifier":"unsafeTail"}},"qualification":"S"},{"reference":{"otherSlice":6696641136964357907},"usedName":{"valueName":{"identifier":"revNonEmptyChunks"}},"qualification":null},{"reference":{"otherSlice":3830563146507192082},"usedName":{"valueName":{"identifier":"findIndexOrEnd"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"/="}},"qualification":null},{"reference":{"otherSlice":6479985746417015458},"usedName":{"valueName":{"identifier":"unsafeDrop"}},"qualification":"S"},{"reference":{"otherSlice":1699226608098321587},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":null}],"fragment":["group :: ByteString -> [ByteString]","group = go\n  where go Empty = []\n        go (Chunk c cs)\n          | S.length c == 1 = to [c] (S.unsafeHead c) cs\n          | otherwise =\n            to [S.unsafeTake 1 c] (S.unsafeHead c) (Chunk (S.unsafeTail c) cs)\n        to acc !_ Empty = revNonEmptyChunks acc : []\n        to acc !w (Chunk c cs)\n          = case findIndexOrEnd (/= w) c of\n                0 -> revNonEmptyChunks acc : go (Chunk c cs)\n                n | n == S.length c -> to (S.unsafeTake n c : acc) w cs\n                  | otherwise ->\n                    revNonEmptyChunks (S.unsafeTake n c : acc) :\n                      go (Chunk (S.unsafeDrop n c) cs)"],"instances":[],"language":{"extensions":["BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}