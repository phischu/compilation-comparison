{"sliceID":5251560688586226984,"uses":[{"reference":{"otherSlice":3675329076143268571},"usedName":{"constructorName":{"identifier":"SResponse"},"constructorTypeName":{"identifier":"SResponse"}},"qualification":null},{"reference":{"otherSlice":3675329076143268571},"usedName":{"valueName":{"identifier":"simpleBody"}},"qualification":null},{"reference":{"otherSlice":4585129306154310503},"usedName":{"valueName":{"identifier":"assertBool"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"concat"}},"qualification":null},{"reference":{"builtinModule":"GHC.Show"},"usedName":{"valueName":{"identifier":"show"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":1799403572029023959},"usedName":{"valueName":{"identifier":"unpack"}},"qualification":"L8"},{"reference":{"otherSlice":4528621529984481541},"usedName":{"valueName":{"identifier":"isInfixOf"}},"qualification":"S"},{"reference":{"otherSlice":8502544738463299527},"usedName":{"valueName":{"identifier":"concat"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"otherSlice":7656308987823753789},"usedName":{"valueName":{"identifier":"toChunks"}},"qualification":"L"},{"reference":{"otherSlice":7233619382983855062},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"L"},{"reference":{"otherSlice":3675329076143268571},"usedName":{"typeName":{"identifier":"SResponse"}},"qualification":null},{"reference":{"otherSlice":8642581281670190790},"usedName":{"typeName":{"identifier":"Session"}},"qualification":null}],"fragment":["assertBodyContains :: L.ByteString -> SResponse -> Session ()","assertBodyContains lbs SResponse{simpleBody = lbs'}\n  = assertBool\n      (concat\n         [\"Expected response body to contain \", show $ L8.unpack lbs,\n          \", but received \", show $ L8.unpack lbs'])\n      $ strict lbs `S.isInfixOf` strict lbs'\n  where strict = S.concat . L.toChunks"],"instances":[],"language":{"extensions":["OverloadedStrings","DeriveDataTypeable","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}