{"sliceID":6029490268005028547,"uses":[{"reference":{"otherSlice":3224449322082811614},"usedName":{"constructorName":{"identifier":"HashPSQ"},"constructorTypeName":{"identifier":"HashPSQ"}},"qualification":null},{"reference":{"otherSlice":6127696732280919193},"usedName":{"valueName":{"identifier":"fold'"}},"qualification":"IntPSQ"},{"reference":{"otherSlice":7487454122265490466},"usedName":{"constructorName":{"identifier":"B"},"constructorTypeName":{"identifier":"Bucket"}},"qualification":null},{"reference":{"otherSlice":472109750905902989},"usedName":{"valueName":{"identifier":"fold'"}},"qualification":"OrdPSQ"},{"reference":{"otherSlice":3224449322082811614},"usedName":{"typeName":{"identifier":"HashPSQ"}},"qualification":null}],"fragment":["fold' :: (k -> p -> v -> a -> a) -> a -> HashPSQ k p v -> a","fold' f acc0 (HashPSQ ipsq) = IntPSQ.fold' goBucket acc0 ipsq\n  where goBucket _ p (B k v opsq) acc\n          = let !acc1 = f k p v acc\n                !acc2 = OrdPSQ.fold' f acc1 opsq\n              in acc2"],"instances":[],"language":{"extensions":["BangPatterns","DeriveFoldable","DeriveFunctor","DeriveTraversable","GeneralizedNewtypeDeriving","ScopedTypeVariables","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}