{"sliceID":5576599581484059279,"uses":[{"reference":{"otherSlice":5551878124765860506},"usedName":{"constructorName":{"identifier":"UrlEncoded"},"constructorTypeName":{"identifier":"RequestBodyType"}},"qualification":null},{"reference":{"otherSlice":7202692338078551997},"usedName":{"valueName":{"identifier":"null"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":8502544738463299527},"usedName":{"valueName":{"identifier":"concat"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":7235567377809295464},"usedName":{"valueName":{"identifier":"length"}},"qualification":"S"},{"reference":{"otherSlice":339079758207504748},"usedName":{"valueName":{"identifier":"prboMaxParmsSize"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"when"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">"}},"qualification":null},{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"error"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"id"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"mapM_"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Left"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":8708074499509697363},"usedName":{"valueName":{"identifier":"parseSimpleQuery"}},"qualification":"H"},{"reference":{"otherSlice":5551878124765860506},"usedName":{"constructorName":{"identifier":"Multipart"},"constructorTypeName":{"identifier":"RequestBodyType"}},"qualification":null},{"reference":{"otherSlice":3835975881895368767},"usedName":{"valueName":{"identifier":"parsePiecesEx"}},"qualification":null},{"reference":{"otherSlice":3693489416482845935},"usedName":{"valueName":{"identifier":"pack"}},"qualification":"S8"},{"reference":{"otherSlice":6987230544343436129},"usedName":{"valueName":{"identifier":"append"}},"qualification":"S"},{"reference":{"otherSlice":339079758207504748},"usedName":{"typeName":{"identifier":"ParseRequestBodyOptions"}},"qualification":null},{"reference":{"otherSlice":6521469553136476641},"usedName":{"typeName":{"identifier":"BackEnd"}},"qualification":null},{"reference":{"otherSlice":5551878124765860506},"usedName":{"typeName":{"identifier":"RequestBodyType"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"otherSlice":4010822550476529195},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"S"},{"reference":{"builtinModule":"Data.Either"},"usedName":{"typeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":3499026409408763122},"usedName":{"typeName":{"identifier":"Param"}},"qualification":null},{"reference":{"otherSlice":2753909998167551698},"usedName":{"typeName":{"identifier":"File"}},"qualification":null}],"fragment":["conduitRequestBodyEx ::\n                     ParseRequestBodyOptions ->\n                       BackEnd y ->\n                         RequestBodyType ->\n                           IO S.ByteString -> (Either Param (File y) -> IO ()) -> IO ()","conduitRequestBodyEx o _ UrlEncoded rbody add\n  = do let loop size front\n             = do bs <- rbody\n                  if S.null bs then return $ S.concat $ front [] else\n                    do let newsize = size + S.length bs\n                       case prboMaxParmsSize o of\n                           Just maxSize -> when (newsize > maxSize) $\n                                             error \"Maximum size of parameters exceeded\"\n                           Nothing -> return ()\n                       loop newsize $ front . (bs :)\n       bs <- loop 0 id\n       mapM_ (add . Left) $ H.parseSimpleQuery bs\nconduitRequestBodyEx o backend (Multipart bound) rbody add\n  = parsePiecesEx o backend (S8.pack \"--\" `S.append` bound) rbody add"],"instances":[],"language":{"extensions":["OverloadedStrings","ExistentialQuantification","PatternGuards","TypeFamilies","RankNTypes","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll"],"isInstance":false}}