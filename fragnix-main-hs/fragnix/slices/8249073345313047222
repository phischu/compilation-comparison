{"sliceID":8249073345313047222,"uses":[{"reference":{"otherSlice":4628040070072641463},"usedName":{"valueName":{"identifier":"length"}},"qualification":"Sh"},{"reference":{"otherSlice":38613747648554582},"usedName":{"constructorName":{"identifier":"BufferRange"},"constructorTypeName":{"identifier":"BufferRange"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<="}},"qualification":null},{"reference":{"otherSlice":7083937321653257506},"usedName":{"valueName":{"identifier":"copyToPtr"}},"qualification":"Sh"},{"reference":{"builtinModule":"GHC.Ptr"},"usedName":{"valueName":{"identifier":"plusPtr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":4630681137417404139},"usedName":{"valueName":{"identifier":"bufferFull"}},"qualification":null},{"reference":{"builtinModule":"GHC.Ptr"},"usedName":{"valueName":{"identifier":"minusPtr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"otherSlice":193294807211571047},"usedName":{"typeName":{"identifier":"ShortByteString"}},"qualification":"Sh"},{"reference":{"otherSlice":8496573510002582276},"usedName":{"typeName":{"identifier":"BuildStep"}},"qualification":null}],"fragment":["shortByteStringCopyStep ::\n                        Sh.ShortByteString -> BuildStep a -> BuildStep a","shortByteStringCopyStep !sbs k = go 0 (Sh.length sbs)\n  where go !ip !ipe !(BufferRange op ope)\n          | inpRemaining <= outRemaining =\n            do Sh.copyToPtr sbs ip op inpRemaining\n               let !br' = BufferRange (op `plusPtr` inpRemaining) ope\n               k br'\n          | otherwise =\n            do Sh.copyToPtr sbs ip op outRemaining\n               let !ip' = ip + outRemaining\n               return $ bufferFull 1 ope (go ip' ipe)\n          where outRemaining = ope `minusPtr` op\n                inpRemaining = ipe - ip"],"instances":[],"language":{"extensions":["ScopedTypeVariables","BangPatterns","RankNTypes","Unsafe","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}