{"sliceID":6256615131339066575,"uses":[{"reference":{"otherSlice":7202692338078551997},"usedName":{"valueName":{"identifier":"null"}},"qualification":"S"},{"reference":{"otherSlice":6833081969160815042},"usedName":{"valueName":{"identifier":"empty"}},"qualification":"L"},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"True"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"otherSlice":7656308987823753789},"usedName":{"valueName":{"identifier":"toChunks"}},"qualification":"L"},{"reference":{"otherSlice":7235567377809295464},"usedName":{"valueName":{"identifier":"length"}},"qualification":"S"},{"reference":{"otherSlice":2096536890270123989},"usedName":{"valueName":{"identifier":"lazyBreaker"}},"qualification":null},{"reference":{"otherSlice":1338766327385976014},"usedName":{"valueName":{"identifier":"lsplit"}},"qualification":null},{"reference":{"otherSlice":677049321249320014},"usedName":{"valueName":{"identifier":"fromChunks"}},"qualification":"L"},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"foldr"}},"qualification":null},{"reference":{"otherSlice":4512551499485129340},"usedName":{"valueName":{"identifier":"chunk"}},"qualification":"LI"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"not"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"null"}},"qualification":null},{"reference":{"otherSlice":4010822550476529195},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"S"},{"reference":{"otherSlice":7233619382983855062},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"L"},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null}],"fragment":["breakFindAfter ::\n               S.ByteString ->\n                 L.ByteString -> ((L.ByteString, L.ByteString), Bool)","breakFindAfter pat | S.null pat = \\ str -> ((L.empty, str), True)\nbreakFindAfter pat = breaker . L.toChunks\n  where !patLen = S.length pat\n        lbrk = lazyBreaker True pat\n        breaker strs\n          = let (f, b) = lbrk strs\n                (f1, b1) = lsplit patLen b\n                mbpat = L.fromChunks f1\n              in ((foldr LI.chunk mbpat f, L.fromChunks b1), not (null b))"],"instances":[],"language":{"extensions":["BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}