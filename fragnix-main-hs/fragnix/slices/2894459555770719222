{"sliceID":2894459555770719222,"uses":[{"reference":{"otherSlice":7169308240080232539},"usedName":{"constructorName":{"identifier":"Bin"},"constructorTypeName":{"identifier":"IntSet"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">="}},"qualification":null},{"reference":{"otherSlice":1823697768615178195},"usedName":{"valueName":{"identifier":"union"}},"qualification":null},{"reference":{"builtinModule":"GHC.Prim"},"usedName":{"valueName":{"identifier":"seq"}},"qualification":null},{"reference":{"otherSlice":4827782982542234419},"usedName":{"valueName":{"identifier":"match"}},"qualification":null},{"reference":{"otherSlice":1307774649002359079},"usedName":{"valueName":{"identifier":"zero"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":7169308240080232539},"usedName":{"constructorName":{"identifier":"Nil"},"constructorTypeName":{"identifier":"IntSet"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"False"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":7169308240080232539},"usedName":{"constructorName":{"identifier":"Tip"},"constructorTypeName":{"identifier":"IntSet"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">"}},"qualification":null},{"reference":{"otherSlice":7373941855936521997},"usedName":{"valueName":{"identifier":"prefixOf"}},"qualification":null},{"reference":{"otherSlice":4926265229710333322},"usedName":{"valueName":{"identifier":"tip"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"operator":".&."}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"/="}},"qualification":null},{"reference":{"otherSlice":2867430951789216942},"usedName":{"valueName":{"identifier":"bitmapOf"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"identifier":"complement"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":937490584395345141},"usedName":{"typeName":{"identifier":"Key"}},"qualification":null},{"reference":{"otherSlice":7169308240080232539},"usedName":{"typeName":{"identifier":"IntSet"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null}],"fragment":["splitMember :: Key -> IntSet -> (IntSet, Bool, IntSet)","splitMember x t\n  = case t of\n        Bin _ m l r | m < 0 ->\n                      if x >= 0 then\n                        case go x l of\n                            (lt, fnd, gt) -> let lt' = union lt r in lt' `seq` (lt', fnd, gt)\n                        else\n                        case go x r of\n                            (lt, fnd, gt) -> let gt' = union gt l in gt' `seq` (lt, fnd, gt')\n        _ -> go x t\n  where go x' t'@(Bin p m l r)\n          | match x' p m =\n            if zero x' m then\n              case go x' l of\n                  (lt, fnd, gt) -> (lt, fnd, union gt r)\n              else\n              case go x' r of\n                  (lt, fnd, gt) -> (union lt l, fnd, gt)\n          | otherwise = if x' < p then (Nil, False, t') else (t', False, Nil)\n        go x' t'@(Tip kx' bm)\n          | kx' > x' = (Nil, False, t')\n          | kx' < prefixOf x' = (t', False, Nil)\n          | otherwise =\n            let lt = tip kx' (bm .&. lowerBitmap)\n                found = (bm .&. bitmapOfx') /= 0\n                gt = tip kx' (bm .&. higherBitmap)\n              in lt `seq` found `seq` gt `seq` (lt, found, gt)\n          where bitmapOfx' = bitmapOf x'\n                lowerBitmap = bitmapOfx' - 1\n                higherBitmap = complement (lowerBitmap + bitmapOfx')\n        go _ Nil = (Nil, False, Nil)"],"instances":[],"language":{"extensions":["MagicHash","BangPatterns","DeriveDataTypeable","StandaloneDeriving","TypeFamilies","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}