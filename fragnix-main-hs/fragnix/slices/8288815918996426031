{"sliceID":8288815918996426031,"uses":[{"reference":{"otherSlice":1254073128444822395},"usedName":{"constructorName":{"identifier":"Stream"},"constructorTypeName":{"identifier":"Stream"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Left"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":2120320550836080743},"usedName":{"constructorName":{"identifier":"Yield"},"constructorTypeName":{"identifier":"Step"}},"qualification":null},{"reference":{"builtinModule":"GHC.Prim"},"usedName":{"valueName":{"identifier":"seq"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":2120320550836080743},"usedName":{"constructorName":{"identifier":"Skip"},"constructorTypeName":{"identifier":"Step"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Right"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":2120320550836080743},"usedName":{"constructorName":{"identifier":"Done"},"constructorTypeName":{"identifier":"Step"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Monad"}},"qualification":null},{"reference":{"otherSlice":2120320550836080743},"usedName":{"typeName":{"identifier":"Step"}},"qualification":null},{"reference":{"otherSlice":1254073128444822395},"usedName":{"typeName":{"identifier":"Stream"}},"qualification":null}],"fragment":["flatten ::\n          Monad m =>\n          (a -> m s) -> (s -> m (Step s b)) -> Stream m a -> Stream m b","flatten mk istep (Stream ostep u) = Stream step (Left u)\n  where {-# INLINE [0] step #-}\n        step (Left t)\n          = do r <- ostep t\n               case r of\n                   Yield a t' -> do s <- mk a\n                                    s `seq` return (Skip (Right (s, t')))\n                   Skip t' -> return $ Skip (Left t')\n                   Done -> return $ Done\n        step (Right (s, t))\n          = do r <- istep s\n               case r of\n                   Yield x s' -> return $ Yield x (Right (s', t))\n                   Skip s' -> return $ Skip (Right (s', t))\n                   Done -> return $ Skip (Left t)"],"instances":[],"language":{"extensions":["ExistentialQuantification","MultiParamTypeClasses","FlexibleInstances","Rank2Types","BangPatterns","KindSignatures","GADTs","ScopedTypeVariables","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}