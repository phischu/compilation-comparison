{"sliceID":285416149484368040,"uses":[{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"/="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":2315430096611568222},"usedName":{"constructorName":{"identifier":"UUID"},"constructorTypeName":{"identifier":"UUID"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"String"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Word"},"usedName":{"typeName":{"identifier":"Word32"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":">>="}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"identifier":"shiftL"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"operator":".|."}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Unicode"},"usedName":{"valueName":{"identifier":"isHexDigit"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"*"}},"qualification":null},{"reference":{"builtinModule":"Data.Char"},"usedName":{"valueName":{"identifier":"digitToInt"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":2315430096611568222},"usedName":{"typeName":{"identifier":"UUID"}},"qualification":null}],"fragment":["fromString' :: String -> Maybe UUID","fromString' s0\n  = do (w0, s1) <- hexWord s0\n       (w1, s2) <- hexWord s1\n       (w2, s3) <- hexWord s2\n       (w3, s4) <- hexWord s3\n       if s4 /= \"\" then Nothing else Just $ UUID w0 w1 w2 w3\n  where hexWord :: String -> Maybe (Word32, String)\n        hexWord s\n          = Just (0, s) >>= hexByte >>= hexByte >>= hexByte >>= hexByte\n        \n        hexByte :: (Word32, String) -> Maybe (Word32, String)\n        hexByte (w, '-' : ds) = hexByte (w, ds)\n        hexByte (w, hi : (lo : ds))\n          | bothHex = Just ((w `shiftL` 8) .|. octet, ds)\n          | otherwise = Nothing\n          where bothHex = isHexDigit hi && isHexDigit lo\n                octet = fromIntegral (16 * digitToInt hi + digitToInt lo)\n        hexByte _ = Nothing"],"instances":[],"language":{"extensions":["DeriveDataTypeable","TypeFamilies","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}