{"sliceID":4953485571122993097,"uses":[{"reference":{"otherSlice":4132404936174356097},"usedName":{"constructorName":{"identifier":"Stream"},"constructorTypeName":{"identifier":"Stream"}},"qualification":null},{"reference":{"otherSlice":4069519914147446271},"usedName":{"valueName":{"identifier":"text"}},"qualification":"I"},{"reference":{"otherSlice":5281522789970953128},"usedName":{"valueName":{"identifier":"run2"}},"qualification":"A"},{"reference":{"otherSlice":303218261714130477},"usedName":{"valueName":{"identifier":"new"}},"qualification":"A"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":">>="}},"qualification":null},{"reference":{"otherSlice":371753114757304304},"usedName":{"valueName":{"identifier":"upperBound"}},"qualification":null},{"reference":{"otherSlice":2339004113504757537},"usedName":{"constructorName":{"identifier":"Done"},"constructorTypeName":{"identifier":"Step"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":2339004113504757537},"usedName":{"constructorName":{"identifier":"Skip"},"constructorTypeName":{"identifier":"Step"}},"qualification":null},{"reference":{"otherSlice":2339004113504757537},"usedName":{"constructorName":{"identifier":"Yield"},"constructorTypeName":{"identifier":"Step"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">="}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":4463961207685254290},"usedName":{"valueName":{"identifier":"shiftL"}},"qualification":null},{"reference":{"otherSlice":7984510095534010158},"usedName":{"valueName":{"identifier":"copyM"}},"qualification":"A"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":4464944826426021000},"usedName":{"valueName":{"identifier":"unsafeWrite"}},"qualification":null},{"reference":{"otherSlice":1071295638341592846},"usedName":{"valueName":{"identifier":"ord"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Char"}},"qualification":null},{"reference":{"otherSlice":4132404936174356097},"usedName":{"typeName":{"identifier":"Stream"}},"qualification":null},{"reference":{"otherSlice":6742866475076404776},"usedName":{"typeName":{"identifier":"Text"}},"qualification":null}],"fragment":["mapAccumL ::\n          (a -> Char -> (a, Char)) -> a -> Stream Char -> (a, Text)","mapAccumL f z0 (Stream next0 s0 len) = (nz, I.text na 0 nl)\n  where (na, (nz, nl))\n          = A.run2 (A.new mlen >>= \\ arr -> outer arr mlen z0 s0 0)\n          where mlen = upperBound 4 len\n        outer arr top = loop\n          where loop !z !s !i\n                  = case next0 s of\n                        Done -> return (arr, (z, i))\n                        Skip s' -> loop z s' i\n                        Yield x s' | j >= top ->\n                                     {-# SCC \"mapAccumL/resize\" #-}\n                                       do let top' = (top + 1) `shiftL` 1\n                                          arr' <- A.new top'\n                                          A.copyM arr' 0 arr 0 top\n                                          outer arr' top' z s i\n                                   | otherwise ->\n                                     do d <- unsafeWrite arr i c\n                                        loop z' s' (i + d)\n                          where (z', c) = f z x\n                                j | ord c < 65536 = i\n                                  | otherwise = i + 1"],"instances":[],"language":{"extensions":["BangPatterns","MagicHash","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}