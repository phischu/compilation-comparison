{"sliceID":8238443678897035199,"uses":[{"reference":{"otherSlice":2658389187921074114},"usedName":{"typeName":{"identifier":"Sized"}},"qualification":null},{"reference":{"otherSlice":2103754850612341338},"usedName":{"typeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"otherSlice":2103754850612341338},"usedName":{"constructorName":{"identifier":"EmptyT"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"otherSlice":2103754850612341338},"usedName":{"constructorName":{"identifier":"Single"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"otherSlice":2103754850612341338},"usedName":{"constructorName":{"identifier":"Deep"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fmap"}},"qualification":null},{"reference":{"otherSlice":8624209003781892825},"usedName":{"valueName":{"identifier":"deep"}},"qualification":null},{"reference":{"otherSlice":3815155061163755225},"usedName":{"valueName":{"identifier":"tailsDigit"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"otherSlice":6288208790906341290},"usedName":{"valueName":{"identifier":"digitToTree"}},"qualification":null},{"reference":{"otherSlice":5455536813294912476},"usedName":{"constructorName":{"identifier":"ConsLTree"},"constructorTypeName":{"identifier":"ViewLTree"}},"qualification":null},{"reference":{"otherSlice":1630285581489176614},"usedName":{"valueName":{"identifier":"viewLTree"}},"qualification":null},{"reference":{"otherSlice":4153133581996284239},"usedName":{"valueName":{"identifier":"tailsNode"}},"qualification":null}],"fragment":["tailsTree ::\n            Sized a => (FingerTree a -> b) -> FingerTree a -> FingerTree b","tailsTree _ EmptyT = EmptyT\ntailsTree f (Single x) = Single (f (Single x))\ntailsTree f (Deep n pr m sf)\n  = Deep n (fmap (\\ pr' -> f (deep pr' m sf)) (tailsDigit pr))\n      (tailsTree f' m)\n      (fmap (f . digitToTree) (tailsDigit sf))\n  where f' ms\n          = let ConsLTree node m' = viewLTree ms in\n              fmap (\\ pr' -> f (deep pr' m' sf)) (tailsNode node)"],"instances":[],"language":{"extensions":["BangPatterns","DeriveDataTypeable","StandaloneDeriving","FlexibleInstances","ScopedTypeVariables","DeriveGeneric","TypeFamilies","PatternSynonyms","ViewPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}