{"sliceID":2645634462688723859,"uses":[{"reference":{"otherSlice":7202692338078551997},"usedName":{"valueName":{"identifier":"null"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"const"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"repeat"}},"qualification":null},{"reference":{"otherSlice":7459617743278403755},"usedName":{"valueName":{"identifier":"empty"}},"qualification":"S"},{"reference":{"otherSlice":7235567377809295464},"usedName":{"valueName":{"identifier":"length"}},"qualification":"S"},{"reference":{"otherSlice":7269172314740669684},"usedName":{"valueName":{"identifier":"strictSearcher"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"False"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":380767506459821795},"usedName":{"valueName":{"identifier":"take"}},"qualification":"S"},{"reference":{"otherSlice":3748312495235440417},"usedName":{"valueName":{"identifier":"drop"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":4010822550476529195},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"S"}],"fragment":["strictSplitKeepFront ::\n                     S.ByteString -> S.ByteString -> [S.ByteString]","strictSplitKeepFront pat | S.null pat = const (repeat S.empty)\nstrictSplitKeepFront pat = splitter\n  where !patLen = S.length pat\n        searcher = strictSearcher False pat\n        splitter str\n          | S.null str = []\n          | otherwise =\n            case searcher str of\n                [] -> [str]\n                (i : _) | i == 0 -> psplitter str\n                        | otherwise -> S.take i str : psplitter (S.drop i str)\n        psplitter !str\n          | S.null str = []\n          | otherwise =\n            case searcher (S.drop patLen str) of\n                [] -> [str]\n                (i : _) -> S.take (i + patLen) str :\n                             psplitter (S.drop (i + patLen) str)"],"instances":[],"language":{"extensions":["BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}