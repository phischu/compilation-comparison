{"sliceID":5202557881824154802,"uses":[{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"typeName":{"identifier":"Foldable"}},"qualification":null},{"reference":{"otherSlice":6497888655579684852},"usedName":{"typeName":{"identifier":"SmallArray"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"foldr"}},"qualification":null},{"reference":{"builtinModule":"Data.Function"},"usedName":{"valueName":{"identifier":"fix"}},"qualification":null},{"reference":{"otherSlice":9036649515903686607},"usedName":{"valueName":{"operator":"?"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"length"}},"qualification":null},{"reference":{"otherSlice":1051985424738612364},"usedName":{"valueName":{"identifier":"indexSmallArray"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"foldr'"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"foldl"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"foldl'"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"foldr1"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":2833989017205590612},"usedName":{"valueName":{"identifier":"die"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":6437733747442839685},"usedName":{"valueName":{"identifier":"sizeofSmallArray"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"foldl1"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"null"}},"qualification":null}],"fragment":["instance Foldable SmallArray where\n        foldr f z sa\n          = fix ? 0 $\n              \\ go i ->\n                if i < length sa then f (indexSmallArray sa i) (go $ i + 1) else z\n        \n        {-# INLINE foldr #-}\n        foldr' f z sa\n          = fix ? z ? length sa - 1 $\n              \\ go acc i ->\n                if i < 0 then acc else go (f (indexSmallArray sa i) acc) (i - 1)\n        \n        {-# INLINE foldr' #-}\n        foldl f z sa\n          = fix ? length sa - 1 $\n              \\ go i ->\n                if i < 0 then z else f (go $ i - 1) $ indexSmallArray sa i\n        \n        {-# INLINE foldl #-}\n        foldl' f z sa\n          = fix ? z ? 0 $\n              \\ go acc i ->\n                if i < length sa then go (f acc $ indexSmallArray sa i) (i + 1)\n                  else acc\n        \n        {-# INLINE foldl' #-}\n        foldr1 f sa\n          | sz == 0 = die \"foldr1\" \"empty list\"\n          | otherwise =\n            fix ? 0 $\n              \\ go i ->\n                if i < sz - 1 then f (indexSmallArray sa i) (go $ i + 1) else\n                  indexSmallArray sa $ sz - 1\n          where sz = sizeofSmallArray sa\n        \n        {-# INLINE foldr1 #-}\n        foldl1 f sa\n          | sz == 0 = die \"foldl1\" \"empty list\"\n          | otherwise =\n            fix ? sz - 1 $\n              \\ go i ->\n                if i < 1 then indexSmallArray sa 0 else\n                  f (go $ i - 1) (indexSmallArray sa i)\n          where sz = sizeofSmallArray sa\n        \n        {-# INLINE foldl1 #-}\n        null sa = sizeofSmallArray sa == 0\n        \n        {-# INLINE null #-}\n        length = sizeofSmallArray\n        \n        {-# INLINE length #-}"],"instances":[],"language":{"extensions":["MagicHash","RankNTypes","TypeFamilies","UnboxedTuples","DeriveTraversable","DeriveDataTypeable","GeneralizedNewtypeDeriving","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":true}}