{"sliceID":4152998084720325475,"uses":[{"reference":{"otherSlice":675696118971413715},"usedName":{"valueName":{"identifier":"null"}},"qualification":"S"},{"reference":{"otherSlice":6084955845854900422},"usedName":{"valueName":{"identifier":"prependCycle"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":6258463563638113276},"usedName":{"valueName":{"identifier":"length"}},"qualification":"S"},{"reference":{"otherSlice":2984864654528663562},"usedName":{"valueName":{"identifier":"lazyBreaker"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"True"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"null"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"++"}},"qualification":null},{"reference":{"otherSlice":1601910010673324444},"usedName":{"valueName":{"identifier":"ldrop"}},"qualification":null},{"reference":{"otherSlice":6084955845854900422},"usedName":{"valueName":{"identifier":"substitution"}},"qualification":null},{"reference":{"otherSlice":7483143390726870398},"usedName":{"valueName":{"identifier":"fromChunks"}},"qualification":"L"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"otherSlice":9091181793480111601},"usedName":{"valueName":{"identifier":"toChunks"}},"qualification":"L"},{"reference":{"otherSlice":6084955845854900422},"usedName":{"typeName":{"identifier":"Substitution"}},"qualification":null},{"reference":{"otherSlice":8642306666063513779},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"S"},{"reference":{"otherSlice":1699226608098321587},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"L"}],"fragment":["replace ::\n          Substitution rep =>\n          S.ByteString -> rep -> L.ByteString -> L.ByteString","replace pat\n  | S.null pat = \\ sub -> prependCycle sub\n  | otherwise =\n    let !patLen = S.length pat\n        breaker = lazyBreaker True pat\n        repl subst strs\n          | null strs = []\n          | otherwise =\n            let (pre, mtch) = breaker strs in\n              pre ++\n                case mtch of\n                    [] -> []\n                    _ -> subst (repl subst (ldrop patLen mtch))\n      in\n      \\ sub ->\n        let {-# NOINLINE subst #-}\n            !subst = substitution sub\n            repl1 = repl subst\n          in L.fromChunks . repl1 . L.toChunks"],"instances":[],"language":{"extensions":["BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}