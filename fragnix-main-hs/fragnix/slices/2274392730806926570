{"sliceID":2274392730806926570,"uses":[{"reference":{"builtinModule":"GHC.Real"},"usedName":{"typeName":{"identifier":"Integral"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Integer.GMP.Internals"},"usedName":{"typeName":{"identifier":"Integer"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"quot"}},"qualification":null},{"reference":{"builtinModule":"GHC.Word"},"usedName":{"typeName":{"identifier":"Word64"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">="}},"qualification":null}],"fragment":["countDigits :: (Integral a) => a -> Int","countDigits v0\n  | fromIntegral v64 == v0 = go 1 v64\n  | otherwise = goBig 1 (fromIntegral v0)\n  where v64 = fromIntegral v0\n        goBig !k (v :: Integer)\n          | v > big = goBig (k + 19) (v `quot` big)\n          | otherwise = go k (fromIntegral v)\n        big = 10000000000000000000\n        go !k (v :: Word64)\n          | v < 10 = k\n          | v < 100 = k + 1\n          | v < 1000 = k + 2\n          | v < 1000000000000 =\n            k +\n              if v < 100000000 then\n                if v < 1000000 then if v < 10000 then 3 else 4 + fin v 100000 else\n                  6 + fin v 10000000\n                else\n                if v < 10000000000 then 8 + fin v 1000000000 else\n                  10 + fin v 100000000000\n          | otherwise = go (k + 12) (v `quot` 1000000000000)\n        fin v n = if v >= n then 1 else 0"],"instances":[],"language":{"extensions":["BangPatterns","MagicHash","RankNTypes","ScopedTypeVariables","UnboxedTuples","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}