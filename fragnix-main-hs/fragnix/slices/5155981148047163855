{"sliceID":5155981148047163855,"uses":[{"reference":{"otherSlice":2795855979338359899},"usedName":{"valueName":{"identifier":"viewl"}},"qualification":null},{"reference":{"otherSlice":6408052984828414906},"usedName":{"constructorName":{"identifier":"EmptyL"},"constructorTypeName":{"identifier":"ViewL"}},"qualification":null},{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"error"}},"qualification":null},{"reference":{"otherSlice":6408052984828414906},"usedName":{"constructorName":{"operator":":<"},"constructorTypeName":{"identifier":"ViewL"}},"qualification":null},{"reference":{"otherSlice":1872735592019550768},"usedName":{"valueName":{"identifier":"scanl"}},"qualification":null},{"reference":{"otherSlice":8468946667989408909},"usedName":{"typeName":{"identifier":"Seq"}},"qualification":null}],"fragment":["scanl1 :: (a -> a -> a) -> Seq a -> Seq a","scanl1 f xs\n  = case viewl xs of\n        EmptyL -> error \"scanl1 takes a nonempty sequence as an argument\"\n        x :< xs' -> scanl f x xs'"],"instances":[],"language":{"extensions":["DeriveDataTypeable","StandaloneDeriving","TypeFamilies","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}