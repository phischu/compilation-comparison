{"sliceID":6108689765555821659,"uses":[{"reference":{"otherSlice":1254073128444822395},"usedName":{"constructorName":{"identifier":"Stream"},"constructorTypeName":{"identifier":"Stream"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":2120320550836080743},"usedName":{"constructorName":{"identifier":"Yield"},"constructorTypeName":{"identifier":"Step"}},"qualification":null},{"reference":{"builtinModule":"GHC.Prim"},"usedName":{"valueName":{"identifier":"seq"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":2120320550836080743},"usedName":{"constructorName":{"identifier":"Skip"},"constructorTypeName":{"identifier":"Step"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":2120320550836080743},"usedName":{"constructorName":{"identifier":"Done"},"constructorTypeName":{"identifier":"Step"}},"qualification":null},{"reference":{"otherSlice":6854859016888063541},"usedName":{"valueName":{"identifier":"error"}},"qualification":"Ck"},{"reference":{"otherSlice":5512440569757699109},"usedName":{"valueName":{"identifier":"emptyStream"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Monad"}},"qualification":null},{"reference":{"otherSlice":1254073128444822395},"usedName":{"typeName":{"identifier":"Stream"}},"qualification":null}],"fragment":["scanl1M' :: Monad m => (a -> a -> m a) -> Stream m a -> Stream m a","scanl1M' f (Stream step t) = Stream step' (t, Nothing)\n  where {-# INLINE [0] step' #-}\n        step' (s, Nothing)\n          = do r <- step s\n               case r of\n                   Yield x s' -> x `seq` return (Yield x (s', Just x))\n                   Skip s' -> return $ Skip (s', Nothing)\n                   Done -> (\\ state ->\n                              (Ck.error \"Data/Vector/Fusion/Stream/Monadic.hs\" 1285) state\n                                emptyStream)\n                             \"scanl1M\"\n        step' (s, Just x)\n          = x `seq`\n              do r <- step s\n                 case r of\n                     Yield y s' -> do z <- f x y\n                                      z `seq` return (Yield z (s', Just z))\n                     Skip s' -> return $ Skip (s', Just x)\n                     Done -> return Done"],"instances":[],"language":{"extensions":["ExistentialQuantification","MultiParamTypeClasses","FlexibleInstances","Rank2Types","BangPatterns","KindSignatures","GADTs","ScopedTypeVariables","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}