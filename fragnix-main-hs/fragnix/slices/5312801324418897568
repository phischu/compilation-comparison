{"sliceID":5312801324418897568,"uses":[{"reference":{"otherSlice":6856618864151171204},"usedName":{"constructorName":{"identifier":"One"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"otherSlice":2368152319216379417},"usedName":{"constructorName":{"identifier":"InsOne"},"constructorTypeName":{"identifier":"Ins"}},"qualification":null},{"reference":{"otherSlice":6685141579357139438},"usedName":{"constructorName":{"identifier":"InsLeftDig"},"constructorTypeName":{"identifier":"InsDigNode"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":2368152319216379417},"usedName":{"constructorName":{"identifier":"InsTwo"},"constructorTypeName":{"identifier":"Ins"}},"qualification":null},{"reference":{"otherSlice":6856618864151171204},"usedName":{"constructorName":{"identifier":"Two"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"otherSlice":6856618864151171204},"usedName":{"constructorName":{"identifier":"Three"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"otherSlice":2658389187921074114},"usedName":{"valueName":{"identifier":"size"}},"qualification":null},{"reference":{"otherSlice":6856618864151171204},"usedName":{"constructorName":{"identifier":"Four"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":6685141579357139438},"usedName":{"constructorName":{"identifier":"InsDigNode"},"constructorTypeName":{"identifier":"InsDigNode"}},"qualification":null},{"reference":{"otherSlice":6843874425638804520},"usedName":{"valueName":{"identifier":"node3"}},"qualification":null},{"reference":{"otherSlice":2658389187921074114},"usedName":{"typeName":{"identifier":"Sized"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"otherSlice":2368152319216379417},"usedName":{"typeName":{"identifier":"Ins"}},"qualification":null},{"reference":{"otherSlice":6856618864151171204},"usedName":{"typeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"otherSlice":6685141579357139438},"usedName":{"typeName":{"identifier":"InsDigNode"}},"qualification":null}],"fragment":["insLeftDigit ::\n               Sized a => (Int -> a -> Ins a) -> Int -> Digit a -> InsDigNode a","insLeftDigit f !i (One a)\n  = case f i a of\n        InsOne a' -> InsLeftDig $ One a'\n        InsTwo a1 a2 -> InsLeftDig $ Two a1 a2\ninsLeftDigit f i (Two a b)\n  | i < sa =\n    case f i a of\n        InsOne a' -> InsLeftDig $ Two a' b\n        InsTwo a1 a2 -> InsLeftDig $ Three a1 a2 b\n  | otherwise =\n    case f (i - sa) b of\n        InsOne b' -> InsLeftDig $ Two a b'\n        InsTwo b1 b2 -> InsLeftDig $ Three a b1 b2\n  where sa = size a\ninsLeftDigit f i (Three a b c)\n  | i < sa =\n    case f i a of\n        InsOne a' -> InsLeftDig $ Three a' b c\n        InsTwo a1 a2 -> InsLeftDig $ Four a1 a2 b c\n  | i < sab =\n    case f (i - sa) b of\n        InsOne b' -> InsLeftDig $ Three a b' c\n        InsTwo b1 b2 -> InsLeftDig $ Four a b1 b2 c\n  | otherwise =\n    case f (i - sab) c of\n        InsOne c' -> InsLeftDig $ Three a b c'\n        InsTwo c1 c2 -> InsLeftDig $ Four a b c1 c2\n  where sa = size a\n        sab = sa + size b\ninsLeftDigit f i (Four a b c d)\n  | i < sa =\n    case f i a of\n        InsOne a' -> InsLeftDig $ Four a' b c d\n        InsTwo a1 a2 -> InsDigNode (Two a1 a2) (node3 b c d)\n  | i < sab =\n    case f (i - sa) b of\n        InsOne b' -> InsLeftDig $ Four a b' c d\n        InsTwo b1 b2 -> InsDigNode (Two a b1) (node3 b2 c d)\n  | i < sabc =\n    case f (i - sab) c of\n        InsOne c' -> InsLeftDig $ Four a b c' d\n        InsTwo c1 c2 -> InsDigNode (Two a b) (node3 c1 c2 d)\n  | otherwise =\n    case f (i - sabc) d of\n        InsOne d' -> InsLeftDig $ Four a b c d'\n        InsTwo d1 d2 -> InsDigNode (Two a b) (node3 c d1 d2)\n  where sa = size a\n        sab = sa + size b\n        sabc = sab + size c"],"instances":[],"language":{"extensions":["BangPatterns","DeriveDataTypeable","StandaloneDeriving","FlexibleInstances","ScopedTypeVariables","DeriveGeneric","TypeFamilies","PatternSynonyms","ViewPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}