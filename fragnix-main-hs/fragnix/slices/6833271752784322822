{"sliceID":6833271752784322822,"uses":[{"reference":{"otherSlice":2658389187921074114},"usedName":{"typeName":{"identifier":"Sized"}},"qualification":null},{"reference":{"otherSlice":2103754850612341338},"usedName":{"typeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"otherSlice":2103754850612341338},"usedName":{"constructorName":{"identifier":"EmptyT"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"otherSlice":2103754850612341338},"usedName":{"constructorName":{"identifier":"Single"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"otherSlice":2103754850612341338},"usedName":{"constructorName":{"identifier":"Deep"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fmap"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"otherSlice":6288208790906341290},"usedName":{"valueName":{"identifier":"digitToTree"}},"qualification":null},{"reference":{"otherSlice":648823180821227266},"usedName":{"valueName":{"identifier":"initsDigit"}},"qualification":null},{"reference":{"otherSlice":8624209003781892825},"usedName":{"valueName":{"identifier":"deep"}},"qualification":null},{"reference":{"otherSlice":8102014299016152806},"usedName":{"constructorName":{"identifier":"SnocRTree"},"constructorTypeName":{"identifier":"ViewRTree"}},"qualification":null},{"reference":{"otherSlice":5773452174339673537},"usedName":{"valueName":{"identifier":"viewRTree"}},"qualification":null},{"reference":{"otherSlice":2260295793169398806},"usedName":{"valueName":{"identifier":"initsNode"}},"qualification":null}],"fragment":["initsTree ::\n            Sized a => (FingerTree a -> b) -> FingerTree a -> FingerTree b","initsTree _ EmptyT = EmptyT\ninitsTree f (Single x) = Single (f (Single x))\ninitsTree f (Deep n pr m sf)\n  = Deep n (fmap (f . digitToTree) (initsDigit pr)) (initsTree f' m)\n      (fmap (f . deep pr m) (initsDigit sf))\n  where f' ms\n          = let SnocRTree m' node = viewRTree ms in\n              fmap (\\ sf' -> f (deep pr m' sf')) (initsNode node)"],"instances":[],"language":{"extensions":["BangPatterns","DeriveDataTypeable","StandaloneDeriving","FlexibleInstances","ScopedTypeVariables","DeriveGeneric","TypeFamilies","PatternSynonyms","ViewPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}