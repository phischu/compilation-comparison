{"sliceID":8994863820362615752,"uses":[{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":2302287400431637102},"usedName":{"constructorName":{"identifier":"Node"},"constructorTypeName":{"identifier":"Tree"}},"qualification":null},{"reference":{"otherSlice":3305428823718036119},"usedName":{"valueName":{"identifier":"contains"}},"qualification":null},{"reference":{"otherSlice":1390224756298979299},"usedName":{"valueName":{"identifier":"include"}},"qualification":null},{"reference":{"otherSlice":2302287400431637102},"usedName":{"typeName":{"identifier":"Forest"}},"qualification":null},{"reference":{"otherSlice":7034042052644827741},"usedName":{"typeName":{"identifier":"Vertex"}},"qualification":null},{"reference":{"otherSlice":6529314032912979708},"usedName":{"typeName":{"identifier":"SetM"}},"qualification":null}],"fragment":["chop :: Forest Vertex -> SetM s (Forest Vertex)","chop [] = return []\nchop (Node v ts : us)\n  = do visited <- contains v\n       if visited then chop us else\n         do include v\n            as <- chop ts\n            bs <- chop us\n            return (Node v as : bs)"],"instances":[],"language":{"extensions":["Rank2Types","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}