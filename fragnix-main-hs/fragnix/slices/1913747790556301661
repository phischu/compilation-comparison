{"sliceID":1913747790556301661,"uses":[{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"lookup"}},"qualification":null},{"reference":{"otherSlice":1770321871109794098},"usedName":{"valueName":{"identifier":"hContentType"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":783137163661109504},"usedName":{"valueName":{"identifier":"gzipCheckMime"}},"qualification":null},{"reference":{"otherSlice":6785525739144644351},"usedName":{"valueName":{"identifier":"fixHeaders"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":5689044719128030324},"usedName":{"valueName":{"identifier":"responseStream"}},"qualification":null},{"reference":{"otherSlice":234909098031431684},"usedName":{"valueName":{"identifier":"newBlazeRecv"}},"qualification":"B"},{"reference":{"otherSlice":4385163726298497203},"usedName":{"valueName":{"identifier":"defaultStrategy"}},"qualification":"B"},{"reference":{"otherSlice":458652461124260253},"usedName":{"valueName":{"identifier":"initDeflate"}},"qualification":"Z"},{"reference":{"otherSlice":3729509523673286253},"usedName":{"constructorName":{"identifier":"WindowBits"},"constructorTypeName":{"identifier":"WindowBits"}},"qualification":"Z"},{"reference":{"builtinModule":"Data.Function"},"usedName":{"valueName":{"identifier":"fix"}},"qualification":null},{"reference":{"builtinModule":"Control.Monad"},"usedName":{"valueName":{"identifier":"unless"}},"qualification":null},{"reference":{"otherSlice":7202692338078551997},"usedName":{"valueName":{"identifier":"null"}},"qualification":"S"},{"reference":{"otherSlice":1188516316003903323},"usedName":{"valueName":{"identifier":"feedDeflate"}},"qualification":"Z"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":">>="}},"qualification":null},{"reference":{"otherSlice":5375758593092890350},"usedName":{"valueName":{"identifier":"flush"}},"qualification":"Blaze"},{"reference":{"otherSlice":8225219986791559030},"usedName":{"valueName":{"identifier":"flushDeflate"}},"qualification":"Z"},{"reference":{"otherSlice":1396085430394202173},"usedName":{"constructorName":{"identifier":"PRDone"},"constructorTypeName":{"identifier":"PopperRes"}},"qualification":"Z"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":1396085430394202173},"usedName":{"constructorName":{"identifier":"PRNext"},"constructorTypeName":{"identifier":"PopperRes"}},"qualification":"Z"},{"reference":{"otherSlice":7741660197025477614},"usedName":{"valueName":{"identifier":"fromByteString"}},"qualification":null},{"reference":{"otherSlice":1396085430394202173},"usedName":{"constructorName":{"identifier":"PRError"},"constructorTypeName":{"identifier":"PopperRes"}},"qualification":"Z"},{"reference":{"builtinModule":"GHC.IO"},"usedName":{"valueName":{"identifier":"throwIO"}},"qualification":null},{"reference":{"otherSlice":294418608349543388},"usedName":{"valueName":{"identifier":"finishDeflate"}},"qualification":"Z"},{"reference":{"otherSlice":1648177423474526705},"usedName":{"valueName":{"identifier":"responseToStream"}},"qualification":null},{"reference":{"otherSlice":783137163661109504},"usedName":{"typeName":{"identifier":"GzipSettings"}},"qualification":null},{"reference":{"otherSlice":8896971230885589368},"usedName":{"typeName":{"identifier":"Response"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null}],"fragment":["compressE :: GzipSettings -> Response -> (Response -> IO a) -> IO a","compressE set res sendResponse\n  = case lookup hContentType hs of\n        Just m | gzipCheckMime set m ->\n                 let hs' = fixHeaders hs in\n                   wb $\n                     \\ body ->\n                       sendResponse $\n                         responseStream s hs' $\n                           \\ sendChunk flush ->\n                             do (blazeRecv, _) <- B.newBlazeRecv B.defaultStrategy\n                                deflate <- Z.initDeflate 1 (Z.WindowBits 31)\n                                let sendBuilder builder\n                                      = do popper <- blazeRecv builder\n                                           fix $\n                                             \\ loop ->\n                                               do bs <- popper\n                                                  unless (S.null bs) $\n                                                    do sendBS bs\n                                                       loop\n                                    sendBS bs = Z.feedDeflate deflate bs >>= deflatePopper\n                                    flushBuilder\n                                      = do sendBuilder Blaze.flush\n                                           deflatePopper $ Z.flushDeflate deflate\n                                           flush\n                                    deflatePopper popper\n                                      = fix $\n                                          \\ loop ->\n                                            do result <- popper\n                                               case result of\n                                                   Z.PRDone -> return ()\n                                                   Z.PRNext bs' -> do sendChunk $ fromByteString bs'\n                                                                      loop\n                                                   Z.PRError e -> throwIO e\n                                body sendBuilder flushBuilder\n                                sendBuilder Blaze.flush\n                                deflatePopper $ Z.finishDeflate deflate\n        _ -> sendResponse res\n  where (s, hs, wb) = responseToStream res"],"instances":[],"language":{"extensions":["OverloadedStrings","Rank2Types","ScopedTypeVariables","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"],"isInstance":false}}